#Download Projetc 
    composer.phar create-project yiisoft/yii2-app-basic basic

 # php yii              :: will show all the commands 

 #php serve             :: will show the running port
 ============================================================================================================================================
 #Controller 
   
   1. Directory Structure 

        basic -> Controller -> FilenameController.php
    
   2. Code 
     
        namespace app\controllers;

        use yii\web\Controller;


        class FirstController extends Controller
        {
            public function actionIndex()
            {
                echo "testing";
            }
        }

    3. Calling Controller

                                          ControllerName/Function name
        http://localhost/yii/basic/web/index.php?r=first/index

        a. actionDemo               :: demo
        b. actionDemoFirst          :: demo-first
        c. actionDemo_second        :: demo_second    



    Note : 1. Function Name allways start wih 'action' keyword 
           2. Function name should be capital but in address bar it should be lower case to call that function
           3. Controller file name always end with 'Controller' keyword. 
           4. DemoTest means demo-test in every case like files, functions etc 

 ============================================================================================================================================
 #View
    1. Directory Structure
        basic -> Views -> FolderName -> viewFiles

    Note : ControllerName and Folder name in View should be same exmaple 
            ControllerName      -> FirstController
            ViewFolderName      -> First

            Store all the files in the first folder which belongs to FirstController only.


    2. Controller File Code 

        public function actionTest(){

             $this->layout = false;                              // to stop by default layout (optional) 
                    or 
            return $this->renderPartial('index');            // to stop by default layout (optional) 

            return $this->render('index');
            
        }

    3. View Folder
        View Folder -> First (folder) -> index.php 

 ============================================================================================================================================
 #Change Layout 

 	1. Folder and File 
 		basic -> view -> create New Folder (layouts2) -> create file (main2.php)

 		basic Code(below) 

 		<?php
			use yii\helpers\Html;
			use app\assets\AppAsset;

			AppAsset::register($this);
			?>
			<?php $this->beginPage() ?>																// Starting of html Page 
			    <!DOCTYPE html>
			    <html lang="<?= Yii::$app->language ?>">
			    <head>
			        <meta charset="<?= Yii::$app->charset ?>">
			        <meta http-equiv="X-UA-Compatible" content="IE=edge">
			        <meta name="viewport" content="width=device-width, initial-scale=1">
			        <?php $this->registerCsrfMetaTags() ?>
			        <title><?= Html::encode($this->title) ?></title>								// Print title , which will comes from index or other page
			        <?php $this->head() ?>															// Printing of All the Heads
			    </head>
			    <body>
			    <?php $this->beginBody() ?>															// Starting of body 	

			        <div class="wrap">
			            <div class="container">
			                <h1>This is my aanother main layout Page</h1>  
			            <?= $content ?>
			            </div>
			        </div>

			        <footer class="footer">
			            <div class="container">
			                <p class="pull-left">&copy; My Company <?= date('Y') ?></p>
			            </div>
			        </footer>

			    <?php $this->endBody() ?>															// Ending of body
			    </body>
			    </html>
			<?php $this->endPage() ?>																// Ending of html Page 	


	2. Configuration of Layout file 
 		
 		#basic -> config -> web.php

 			Add these lines in Config array 

 				'layoutPath'=>'@app/views/layouts2',
    			'layout'=>'main2',	

					OR

    	#in controller you can directly call 

    		public function actionDemo_second()
		    {
		        $this->layout = 'main2';
		        return $this->render('index');
		    }		

    3. creating meta Tags 

    	view -> folder (first) -> index.php

    		$this->title = 'This is My Web page';									// for creating your own title 
			$this->params['breadcrumbs'][] = $this->title;							


			#add below written codes just below the above codes 

    		Yii::$app->view->registerMetaTag([
			    'title'=>'my first Page',
			    'content'=>'test test',
			]);			

	4. Adding js Code 
		view -> folder (first) -> index.php
		
		at the end of the page 
		<?php
			
			$this->registerJs('alert(12)');								// when you dont want to add common js  

		?>		
=================================================================================================================================================================
#load Css and JS (common in all files)
	

a. Common in all
	1. Folder 
		basic -> assets -> AppAssets.php

		class AppAsset extends AssetBundle
		{
		    public $basePath = '@webroot';
		    public $baseUrl = '@web';
		    public $css = [
		        'css/site.css',										// add here your Css here
		    ];
		    public $js = [											// add here your js here
		    ];			
		    public $depends = [
		        'yii\web\YiiAsset',
		        'yii\bootstrap\BootstrapAsset',
		    ];
		}

	2. load in layout File 

		basic -> view -> layouts -> main.php	 
		
		use app\assets\AppAsset;									// load to variable that files 

		AppAsset::register($this);									// loading function 
        
b. Individual JS and CSS
	
	1. Create new File 

		basic -> assets -> TestAssets.php

		class TestAsset extends AssetBundle
		{
		    public $basePath = '@webroot';
		    public $baseUrl = '@web';
		    public $css = [
		        'mytest.css'										// add css
		    ];
		    public $js = [
		        'test.js'											// add js 
		    ];
		}

	2. load in layout File  	

		basic -> view -> layouts -> main.php	 
		
		use app\assets\TestAsset;									// load to variable that files 

		TestAsset::register($this);									// loading function 
=================================================================================================================================================================
#Routes 
	
	basics -> config -> web.php
	
a. Adding Slashes in Address bar  

	1. 	uncomment The Below Code 

		/*
	        'urlManager' => [
	            'enablePrettyUrl' => true,
	            'showScriptName' => false,
	            'rules' => [
	            ],
	        ],
        */	

     2. Hit address in the address bar 
     	
     		http://localhost/yii/basic/web/first/demo_second 

b. Creating your own Routes 
	
	a. Create Dynamic Routes

		1. 	uncomment The Below Code 

		 'urlManager' => [
	                'enablePrettyUrl' => true,
	                'showScriptName' => false,
	                'rules' => [
	                    'second'=>'first/demo_second',								// creating own address 
	                    'first'=>'first/demo-first'									// creating own address 
	                ],
	            ],


	    2. Hit address in the address bar 
	     	
	     		a. http://localhost/yii/basic/web/second
	     		
	     		b. http://localhost/yii/basic/web/first   


	b. Creating Dynamic Routes and sending values in address bar 

		1. hitting Address 

			a. http://localhost/yii/basic/web/first/testing
			b. http://localhost/yii/basic/web/second/testing

		2. setting Code 
			
			basic -> config -> web.php 	

		'rules' => [
                    [
                        'pattern'=>'first/<others>',										// setting key where we will get the value 
                        'route'=>'first/info',												// controller Name/Function Name
                        'defaults'=>[														// setting Default Values Array 
                                'default-value-1'=>'hello 1',								// setting Default Values	
                                'dafult-value-2'=>'hello 2'									// setting Default Values		
                        ]
                        
                    ],
                    [
                        'pattern'=>'second/<others>',										// setting key where we will get the value 
                        'route'=>'first/demo-first',										// controller Name/Function Name
                        'defaults'=>[														// setting Default Values Array 
                                'default-value-1'=>'hello 1',
                                'dafult-value-2'=>'hello 2'
                        ]
                        
                    ]

                ],
        
         3. Controller Code 
         	
         	use Yii;

         	public function actionInfo(){
		        $data= Yii::$app->request->get() ;
		        echo "yes";
		        echo "<br/>";
		        print_r($data);


		    }

		    public function actionDemoFirst()
		    {
		        $data= Yii::$app->request->get() ;
		        echo 'demofirst';
		        echo "<br/>";
		        print_r($data);
		    }  

		  4. Output 
		  	 
		  	 a. yes
				 Array ( [default-value-1] => hello 1 [dafult-value-2] => hello 2 [others] => testing )


			  b. demofirst
				 Array ( [default-value-1] => hello 1 [dafult-value-2] => hello 2 [others] => testing )            		     

=================================================================================================================================================================
#Database 
	
a. Setting up Single Database 

	1. Setting up Connection

		basic -> config -> db.php

		Add database name 	

	2. Write Query in controller 

			 use Yii

			public function actionDemo_second()
			{
			    $data = Yii::$app->db->createCommand('SELECT * FROM employees')->queryAll();		// select Table from the database 
			}

b. Setting Mutiple Database
	
	1. Setting up Connection

		basic -> config -> db.php

			return $db=['db1'=>[
		    'class' => 'yii\db\Connection',
		    'dsn' => 'mysql:host=localhost;dbname=tutorial',
		    'username' => 'root',
		    'password' => '',
		    'charset' => 'utf8',

		    // Schema cache options (for production environment)
		    //'enableSchemaCache' => true,
		    //'schemaCacheDuration' => 60,
		    //'schemaCache' => 'cache',
		],
		'db2'=>[
		    'class' => 'yii\db\Connection',
		    'dsn' => 'mysql:host=localhost;dbname=codeigniterproject ',
		    'username' => 'root',
		    'password' => '',
		    'charset' => 'utf8',

		    // Schema cache options (for production environment)
		    //'enableSchemaCache' => true,
		    //'schemaCacheDuration' => 60,
		    //'schemaCache' => 'cache',
		]]; 

	2. 	Setting Up Array

		'db1' => $db['db1'],
        'db2' => $db['db2'],	

    3. creating Query
    	
    	  public function actionDemo_second()
		    {
		        $data1 = Yii::$app->db1->createCommand('SELECT * FROM employees')->queryAll();			// calling from the another database 
		        $data2 = Yii::$app->db2->createCommand('SELECT * FROM users')->queryAll();				// calling from the another database 
		        echo "<pre>";
		        print_r($data1);
		        print_r($data2);

		        // $this->layout = 'main2';
		        // return $this->render('index');
		    }    

=================================================================================================================================================================
#Using GUI 
	
	Note 
		 'enablePrettyUrl' => false,
         'showScriptName' => false,

         both paremeter should set False 

a. Creating Controller
	
	1. hit Address 

		http://localhost/yii/basic/web/index.php?r=gii 

	2. Click on Controller 

		1. app\controllers\DemoController					// provide Controller Name
					|
			rest of thinks should Blanks 
					|
			Click on Preview button 
					|
			Click on Generate Button
				
			Then Controller and View File will automatcially Created				

		
b. Creating Model
	
	1. hit Address 

		http://localhost/yii/basic/web/index.php?r=gii 
	
	2. Click on Model		

		Note : In database you should Select only one database 


		1. Select Table from the Drop down (which is automatically generated)
						|
			Click on Genereta Button 

			then go to Basic -> Model Folder -> ModelName.php


c. Creating Form	
	
	1. hit Address 

		http://localhost/yii/basic/web/index.php?r=gii 

	2. Click Form 
		a. demo/demo_home								// view name / form name
		b. select Model 								// app\models\Articles

	3. Copy Code in Controller which is generated by yii
		
		public function actionDemo_home()
		{
		    $model = new \app\models\Articles();

		    if ($model->load(Yii::$app->request->post())) {
		        if ($model->validate()) {
		            // form inputs are valid, do something here
		            return;
		        }
		    }

		    return $this->render('demo_home', [
		        'model' => $model,
		    ]);
		}				

	4. hit the url 

		 http://localhost/yii/basic/web/index.php?r=demo/demo_home


d. creating Crud 
	
		1. Creating Model Class 

			app\models\Articles

		2. Search Model Class
			
			app\models\ArticleSearch					// provide any name 

		3. Create Model Name 

			app\controllers\ArticleController

		4. Create View 
			
			@app\views\article	

		click on Generate Button 

==============================================================================================================================================
#ORM
	
	Object Relation Mapping  

		1. An ORM is layer thats site between your database and your application 
		2. ORM in computer is a programming technique (machanism) for converting data between incompatible type systems using (OOPS) object -oriented programming language 
		3. An ORM is the layer between the database and your application. By using an ORM, a lot of the hardwork of creating, updating, reading and deleting from the databae is taken care for us.


		OOPS Objects------>ORM-------->SQL

		OOPS Objects<------ORM<--------SQL

		 a. all data of application will be in Objects form and database date will be in Tables form 
		 b. application pass his object to the ORM so it can store data or da any thing in Sql(tables) , every thing done automatcially ORM , we just simply pass our application Object to ORM  
		 c. so map Objects and SQL using Classes name which is same as table name of the SQL and variable of class are same the column name of the tables 

		There are two types of ORM	
			1. Data Mapper ORM
			2. Active Record ORM 

		Example's of ORM are : 
			1. Docttrine		-> sybiny
			2. Eloquent			-> Laravel
			3. Propel 			
			4. Redbean	

			these all are PHP ORM


	Why we use ORM 
		In Object oriented programming, you work with objects as your main point of reference. (means we only want to work in objects)		


==============================================================================================================================================
#Model
	
	1. Call Model in controller 

		Write these lines in Controller 

		use app\models\Articles;
		use Yii
		

	
	#Various CRUD function 

		1. Insert 				

			$data = new Articles();					// Createing Object
			$data->title='test';					// Column Name
	        $data->body='test';						// Column Name
	        $data->user_id=1;						// column name
	        $data->save();							// function is used to save 
	        echo "yes";


	    2. Updating 

	    	$data = Articles::findOne(8);			// finding the value from the objects 
			$data->title='updating test';
	        $data->body='updating body';
	        $data->user_id=2;
	        $data->save();  


		3. Delete 

			$data = Articles::findOne(8);			// finding the value from the objects 
        	$data->delete();	  					//delete particluar row

		4. Select 

			a. Print All Values 
				  
				$data= Articles::find()->all();
				echo "<pre>";
				print_r($data);
				exit;	

			b. Print all the data in the array From 

				$data= Articles::find()->asArray()->all();

			c. Print all data with where Conditon 

				$data= Articles::find()->where(['id'=>9])->all();
			
			d. print all data with where and in query 

				 $data= Articles::find()->where(['id'=>[8,9,7,6]])->all(); 

			e. print all data with where , in , order by query 

				 $data= Articles::find()->where(['id'=>[8,9,7,6]])->groupBy('id')->orderBy('user_di')->all(); 

				 SELECT * FROM `articles` WHERE `id` IN (7, 8, 9) GROUP BY `user_id` ORDER BY `id`	  		

			f. to Create Sql Command as Raw
				
				$data= Articles::find()->where(['id'=>9])->all();
				echo $data->createCommand()->getRawSql();

				SELECT * FROM `articles` WHERE `id`=9
				

			g. Print All with the where condition 

				 $data= Articles::findAll(['user_id'=>2]);				// finding with which contain user_id 2

			h. print top one Asc 

				$data= Articles::find()->one();

			i. Print One particluar Result 

				$data= Articles::findOne(9);					//filling Id number	  	

			k. Select and joins 

				$data = Articles::find()
				 ->select('*')
				->innerJoin('user as u','u.id=articles.user_id')
				->leftJoin('a as a','a.id=articles.a_id')
				->where(['id'=>[7,8,9]])
				->groupBy('user_id')
				->orderBy('id')->all();

			l. Normal Query	

				$data = Yii::$app->db->createCommand("SELECT * FROM Atricles")->queryAll();	
==============================================================================================================================================
#Query Builder
	 
	1. Model 	 
	 	
		 use yii\db\Query;

		a. Insert Query
		 	public function getData(){														// create your own function 
					$sql = Yii::$app->db->createCommand()->insert('articles',[			// insert query 
						'title'=>'queryBuilder',
						'body'=>'queryBuilderBody',
						'user_id'=>1
				])->execute();

					$lastId = Yii::$app->db->getLastInsertId();					// lastinserted Id
					return $lastId;										
			}

		b. Update Query 
			 $sql = Yii::$app->db->createCommand()->update('articles',[
                'title'=>'UpdatequeryBuilder',
                'body'=>'UpdatequeryBuilderBody',
                'user_id'=>1
            ],array('id'=>[1,2,3,4,5,6,7,8]))->execute();

		c. Delete Query 
			$sql = Yii::$app->db->createCommand()->delete('articles',array('id'=>[1,2,3,4,5,6,7,8]))->execute();	


		d. Select Query 

			1.	// Normal Query 
				
				$query =(new Query())->select('*')->from('articles')->where(['id'=>10])->all();

			2. // Only One Result
				
				$query =(new Query())->select('*')->from('articles')->where(['id'=>10])->one();

			3. // Create Raw Query 

				$query =(new Query())->select('*')->from('articles')->where(['id'=>10]);
            	echo $query->createCommand()->getRawSql();

			4. Create query With where and Conditon 
				
				$query =(new Query())->select(['user_id','title','body'])->from('articles')->where(['id'=>10])->andWhere(['email'=>'xx@gmail.com']);		

			4. Create query With where,and, or Conditon 
				
				$query =(new Query())->select('*')->from('articles')->where(['id'=>10])->andWhere(['email'=>'xx@gmail.com'])->orWhere(['name'=>'Deepinder']);

			5. Create Or Query 

				$query =(new Query())->select('*')->from('articles')->where(['id'=>10])->andFilterWhere(['or',['Like','article.title','test'],['Like','article.body','bodytest']]);
            echo $query->createCommand()->getRawSql();

				SELECT * FROM `articles` WHERE (`id`=10) AND ((`article`.`title` LIKE '%test%') OR (`article`.`body` LIKE '%bodytest%'))	

			6. Groupby and orderBy

				 $query =(new Query())->select('*')->from('articles')->where(['id'=>10])->andFilterWhere(['or',['Like','article.title','test'],['Like','article.body','bodytest']])->groupBy('user_id')->orderBy('id')->limit(5)->offset(4);
            	echo $query->createCommand()->getRawSql();

				SELECT * FROM `articles` WHERE (`id`=10) AND ((`article`.`title` LIKE '%test%') OR (`article`.`body` LIKE '%bodytest%')) GROUP BY `user_id` ORDER BY `id`			


			5. // Create Raw Query 

				$query =(new Query())->select('*')->from('articles')->leftJoin()->innerJoin()->where(['id'=>10]);
            	echo $query->createCommand()->getRawSql();	

	2. Controller 

		$data= new Articles;
       echo $data->getData();	

=============================================================================================================================================
#Components 

	Same like helper in Codeigniter where we can call this function to every where 


	1. create folder 

		basics -> Folder anyname (Components)


	2. Create File 
		
		basics -> Folder anyname -> anyFilename (Commoncomponent)


		namespace app\components;															//provide any name 
		use yii\base\Component;						

			Class CommonComponents extends Component{										// create class according to filename

					public function getToken(){
						return 'DJDIDJFHUIEKDPWIEURYEUIOWSLXMCNVBFDHUWISLD';
					}
			}	

	3. Create Controller 

		  public function actionComponent(){
				echo Yii::$app->common->getToken();										//calling component
			}				

=============================================================================================================================================
#Widgets

	Location Of all Widgets

		basic -> vender -> yiisoft -> yii2 -> base -> widget -> all widget there


	#breadcrumbs widget 

		$arrayList=[                                                                             // creating array   
			'dashboard',                                                                        // creating simple text
			[
				'label'=>'Home',                                                                //creating Text     
				'url'=>'home'                                                                   //making link using text     
			],
			[
				'label'=>'about',
				'url'=>['about','id'=>1],                                                       // providing id with link 
			],
			[
				'label'=>'testing',
				'url'=>['testing','id'=>3],
				'template'=>'<li><span style="font-style: italic;">{link}</li>',                // adding html element to particular 
			]
		]
	
			<?= Breadcrumbs::widget([                                                           //calling the breadcrumbs 
				'itemTemplate'=>"<li><b>{link}</b></li>",                                       // making html element to all the breadcrumbs
				'links'=>$arrayList                                                             // making breadcrumbs using array
			]);?>

=============================================================================================================================================
#Custome Widgets

	1. creating File 

		basic -> widget -> filename (Form.php)

		Code 

		namespace app\widgets;

		use yii\base\Widget;

		Class Form extends Widget{

			public $pageType;									//variable name  
			public $Tag;										//variable name
			public $records;									//variable name

			public function init(){								// this function always run first before any other function 
				parent::init();
				echo "run first in this file";				

			}



			public function run(){								// default function 
				echo "<pre>";
				print_r($this->records);
				return $this->pageType.' '.$this->Tag.' '.'<input type="text" name="firstName" value="" placeholder="Enter FirstName"/>';
			}

		}

	2. View file Code 

		basic -> view -> folderName -> anyFilename

			use app\widgets\Form;
			echo Form::widget(['pageType'=>'Home Page','Tag'=>'Label','records'=>[1,2,3,4,5]]);				// key which we passed in this sholud be same as variable name in class 
===========================================================================================================================================
#Sessions

	1. Set Session 
		
		Yii::$app->session->set('username','Code Improved');

	2. Get Session 

		Yii::$app->session->get('username');

	3. Unset Session

		  unset(Yii::$app->session['username']); 			// to unset particluar key
    	  Yii::$app->session->remove('username');			// to unset particluar key
          Yii::$app->session->destory();					// to unset all keys

===========================================================================================================================================
#Flash Session

	1. Set Session Data

		Yii::$app->session->setFlash('message','Success');

	2. Get Session Data 	

		Yii::$app->session->getFlash('message');








