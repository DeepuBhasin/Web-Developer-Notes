PHP Standards Recommendation (PSR) 

PRS - PRS-2 is a code formatting Standards,is a social Standard ,Means Code according to the PHP Community Standards.  


Into 
1. The PHP Standard Recommendation (PSR) is a PHP specification published by the PHP framework interop Group (means make a single Standard for all developer who are using PHP)
2. It servers the standardization of programming cocepts in PHP 
3. The aim is to enable interoperability of components 
4. The PHP-FIG is Fromed by several PHP framework founders. 


Status 
1. Accepted 
2. Draft
3. Abandoned 
4. Deprecated 

we have to work only with Accepted 

=================================================================================================================================
PSR-1: Basic Coding Standard

1. Files MUST use only <?php and <?= tags.

2. Files MUST use only UTF-8 without BOM (byte order mark) for PHP code.

3. Files SHOULD either declare symbols (classes, functions, constants, etc.) or cause side-effects (e.g. generate output, change .ini settings, etc.) but SHOULD NOT do both.

4. Namespaces and classes MUST follow an "autoloading" PSR: [PSR-0, PSR-4].

5. Class names MUST be declared in StudlyCaps. eg camelCase

6. Class constants MUST be declared in all upper case with underscore separators.

7. Method names MUST be declared in camelCase.

==================================================================================================================================
PSR-2: Coding Style Guide

1. Code MUST follow a "coding style guide" PSR [PSR-1].

2. Code MUST use 4 spaces for indenting, not tabs.

3. There MUST NOT be a hard limit on line length; the soft limit MUST be 120 characters; lines SHOULD be 80 characters or less.

4. There MUST be one blank line after the namespace declaration, and there MUST be one blank line after the block of use declarations.

5. Opening braces for classes MUST go on the next line, and closing braces MUST go on the next line after the body.

6. Opening braces for methods MUST go on the next line, and closing braces MUST go on the next line after the body.

7. Visibility MUST be declared on all properties and methods; abstract and final MUST be declared before the visibility; static MUST be declared after the visibility.

8. Control structure keywords MUST have one space after them; method and function calls MUST NOT.

9. Opening braces for control structures MUST go on the same line, and closing braces MUST go on the next line after the body.

10. Opening parentheses for control structures MUST NOT have a space after them, and closing parentheses for control structures MUST NOT have a space before.

==================================================================================================================================
PSR-3: Logger Interface

This document describes a common interface for logging libraries.

The main goal is to allow libraries to receive a Psr\Log\LoggerInterface object and write logs to it in a simple and universal way. Frameworks and CMSs that have custom needs MAY extend the interface for their own purpose, but SHOULD remain compatible with this document. This ensures that the third-party libraries an application uses can write to the centralized application logs.

==================================================================================================================================
PSR-4: Autoloader

This PSR describes a specification for autoloading classes from file paths. It is fully interoperable, and can be used in addition to any other autoloading specification, including PSR-0. This PSR also describes where to place files that will be autoloaded according to the specification.

1. Basically remove 'include' and 'require' function. 
2. every thing is autoload using Composer
3. deal with Namespaces


==================================================================================================================================
PSR-6: Caching Interface

Caching is a common way to improve the performance of any project, making caching libraries one of the most common features of many frameworks and libraries. This has lead to a situation where many libraries roll their own caching libraries, with various levels of functionality. These differences are causing developers to have to learn multiple systems which may or may not provide the functionality they need. In addition, the developers of caching libraries themselves face a choice between only supporting a limited number of frameworks or creating a large number of adapter classes.

A common interface for caching systems will solve these problems. Library and framework developers can count on the caching systems working the way they're expecting, while the developers of caching systems will only have to implement a single set of interfaces rather than a whole assortment of adapters.

Goal
The goal of this PSR is to allow developers to create cache-aware libraries that can be integrated into existing frameworks and systems without the need for custom development.

==================================================================================================================================
PSR-6: Caching Interface

HTTP messages are the foundation of web development. Web browsers and HTTP clients such as cURL create HTTP request messages that are sent to a web server, which provides an HTTP response message. Server-side code receives an HTTP request message, and returns an HTTP response message.

HTTP messages are typically abstracted from the end-user consumer, but as developers, we typically need to know how they are structured and how to access or manipulate them in order to perform our tasks, whether that might be making a request to an HTTP API, or handling an incoming request.

Every HTTP request message has a specific form:
POST /path HTTP/1.1
Host: example.com

foo=bar&baz=bat
The first line of a request is the "request line", and contains, in order, the HTTP request method, the request target (usually either an absolute URI or a path on the web server), and the HTTP protocol version. This is followed by one or more HTTP headers, an empty line, and the message body.

HTTP response messages have a similar structure:

HTTP/1.1 200 OK
Content-Type: text/plain

This is the response body
The first line is the "status line", and contains, in order, the HTTP protocol version, the HTTP status code, and a "reason phrase," a human-readable description of the status code. Like the request message, this is then followed by one or more HTTP headers, an empty line, and the message body.
