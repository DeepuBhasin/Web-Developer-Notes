#Main Point 

    1. Scripting refers to a series of commands that are interperated and executed sequentially and immediately on occurrance of an event 
    2. This is event action generated by a user while interacting with a web page.
    3. Example of events includes button clicks, selecting a product from a menu, and so on. 
    4. A scripting language refers to a set of instructions that provides some functionality when the user intrects with a web page. 
    5. scripting languages are often  embedded in the Html pages to changes the behaviour of the web pages according to the user's requirments
    6. The first javscript engine was created by brenden eich in 1995 at netscape, for the netscape navigator web browser 

    There are two types of scripting languages.
        1. Client-side Scripting 
            refers to a script being executed on the client's machine by the browser example javacsript 

        2. Server-Side Scripting 
            Refers to a script being executed on a web server to generated example : 
                
                var c = 4 + 7;
                
                means 
                    
                    function +(4,7){
                    }  php 


    1. Javascript is a scripting language that allows buiding dynamic web pages by ensuring maximum user interactivity
    2. Javascript language is an object-based langauge, which means that it provides object for specifying functionalities.  

    Note : 1. Document                   :: is a root object which contains all html 
           2. document.write('hello')    :: this function allow to write any thing on the html page
           
=========================================================================================================================================
#Notes for Special Lecture 

    1. Name/Value Pair : A name which maps to a unique value 

        Example : Address = '#51-d Street number 3'                     // address is name , #51-d Street number 3 is value 

        a. The name may be defined more than once, but only can have one value in any given context.
        
        b. That value may be more name/value pairs.

            #object : A Collection of name value pairs (The simplest defination when talking about javascript)    

            Example : Address : {                                               // address is name , value is object
                                    street: 'Main',
                                    Nunber: 100,
                                    apartment: {
                                        floor : 3,
                                        number : 301,
                                    }  
                                }    
    2. When ever javacsript code runs the engine of the javacsript script wrap every thing in the Execution context (global) and this make two things 
        a) global Object (which contains all global things & in browser global object is window )  and 
        b) this variable 

        so when you write this in the script or console it pointing to the current window. in the Case of browser window is global object. On global level this and global object are same there for window = this.

        global means : not inside a function.

    3. Setup Memory space for variable (and set equal to 'undefined') and functions is called Hoisting    

        Example 

            function b() {
            console.log('Hello function b');
            }
            b();
            console.log(a);
            var a = "hello Global";
            console.log(a);    

        OutPut
        ======
        
        Hello function b
        undefined
        hello Global 

        there are two phase create while Running code and all the things happens line by line (below phase create line by line)
            1. Creation Phase   : all variable are created and assign undefined value
            2. Execution Phase  : all variable are assign original value and executed

                var a = "hello world";
                console.log(a);
                console.log(window.a);
                console.log(this.a);

                OutPut
                =======    
                
                hello world
                hello world
                hello world


    4. Single Threaded : one command at a time (under the hood of the browser, maybe not) & Synchronous : one at a time (and in order). Note javacsript has a Synchronous behaviour.
    
    5. Invocation : Running a function (in javacsript, by passing parenthesis()). When ever a function runs it create their own global Execution.

        Example 

        #Function Invocation amd the Execution stack (this is very Important for the Synchronous calls)

                    function b(){

                    }
                    function a(){
                        b();
                    }  
                    a();


                    
                            b()                                         
                        Execution Context
                (create and code is executed) 
                            |       
                            a()
                        Execution Context
                (create and code is executed)    
                            |   
                    Global Execution Context
                (create and code is executed)                               function a(), function b()
        
        1. When ever we invoke any function then a new execution context is created, while it invoke the code which is written in , it will create and excute that code. 

        2. if function exist within the function then it will create a another execution context and it will create and execute code of that function first and also it place on the top the stack 
        
        2.Which ever on the top it will execute first and it will execute their complete block then it will pop-off from the top of the stack and the next block will be execute which ever on the top of the stack.  

     6. Variable Enviro()nment : Where the variable  live (and how they realted tit is also referencing to the Outer Environment but its variable output is 2 instead of 1 beacuse is has declaration and initilization of myArray variable.

            function b(){
                var myVar;

              }
            function a(){
                var myvar=2;
                    b();
                }  
            var myVar =1;
            a();


                    
                    b()
                Execution Context                       myvar : undefined;
        (create and code is executed) 
                    |       
                    a()
                Execution Context                      // myvar : 2 
        (create and code is executed)                   
                    |   
            Global Execution Context                    // myVar : 1
        (create and code is executed) 
        
        
     7. The Scope chain : scope means where a variable is available in your code and chain means connection of Outer Environment called lexical level

        There are two level
            1. lexical level
            2. physical level
     
        when ever programmer is execute in 'creation phase' a lexical Environment is create which setup the stack and set every thing on the global level and it does not depend upon the physical level and all variables also pointig to the Outer global execution for the variable in lexical level.then in 'execute phase' execute , value will assign then they total depend upon on the physical level

          #Example 1

            function b() {
                console.log(myvar);
            }
            function a() {
                var myvar = 2;
                b();
            }
            var myvar = 1
            a(); 

            OutPut
            ======
            1

            a. instead of getting 2 we are getting 1 beacuse of lexical Environment not by physical Environment. function a and function b sit on same level of global level execution.
            b. when ever function is created it always Reference to the Outer Environment which is Global execution that is why function b getting 1 instead of 2.
            c. incase function a() it is also referencing to the Outer Environment but its variable output is 2 instead of 1 beacuse is has declaration and initilization of myArray variable.



         #Example 2   

            function a() {
                function b() {
                    console.log(myvar);
                }
                var myvar = 2;
                b();
            }
            var myvar = 1
            a();
            b(); 

            output
            ======
            2
            Uncaught ReferenceError: b is not defined


           1. in the above example now only function a() sit on the global level in lexical Environment but function b() sit in the function a() execute context that is why we get the value 2 (now its reference order Environment is block of function a()) and that is why we will not able to call from global level. 
           2. function b() Execution context will not create untill function a() execution context is create.  


      8. Asynchronous : More than one at a time.

            Note : All events are handle Asynchronously.  

                         
                    b()
                Execution Context                       
        (create and code is executed) 
                    |       
                    a()
                Execution Context                      
        (create and code is executed)                   
                    |   
            Global Execution Context                          Click, Http Request
        (create and code is executed)                           Event Queue 

        There is another execute context in the javascript engine called Event Queue which store all the event handler in the form of stack same like discuss in the above topics. like 

                Http Request()
             Execution Context   
            (create and executed) 
                    |
               ClickHandler()
             Execution Context   
            (create and executed)  

        Note : event queue does not work untill its global execution context stack not empty. Example

            function waitThreeSecond()
            {
                var ms = 3000 + new Date().getTime();
                while (new Date() < ms) { }
                console.log('finished Function');

            }
            function clickHandler() { console.log('click event'); }
            document.addEventListener('click', clickHandler);

            waitThreeSecond();
            console.log('finished Execution');     

      9. Dynamic Typing: You Don't tell the engine what type of data a variable Holds, if figures it out while your code is running. (variables can hold different types of values beacuse its's all figured out during execution)

            Statis Typing 

                bool isNew  = 'hello'      // an error

            Dynamic Typing

                var isNew = true           // no errors
                isNew = 'yup!'
                isNew = 1;  


        #Primitive Data type : a type of data that represents a single values (that is, not an object)
            1. undefined : represents lack of existence (you shouldn't set a variable to this)
            2. Null      : represents lack of existence (you can set a variable to this)  
            3. Boolen    : true or false 
            4. Number    : Floating point number (there's always some decimals). Unlike other programming languages there's only one 'number' type.. and it can make math weird
            5. string    : a sequence of characters (both '' and "" can be used)
            6. Symbol    : used in the ES6  

      10. Operator : these are functions with Special Symbol like + , - etc

            example : 

                var c = 4 + 7;
                means 
                function +(4,7)
                {} 

      11. Coercion : Converting a values from one type to another (this happen quite often in javascript beacuse it's dynamically typed)

      12. default value :   

            name = variable1 || 1;      // if variable1 has value then it will pass to variable name;            



                    

      13. Objects           : contains 3 things                                 0x001
            |------> Primitive (property)                               0x002      have reference in the object (main object)   
            |------> Object    (property)                               0x003      have reference in the object (main object)   
            |------> Function  (method)                                 0x004      have reference in the object (main object)   


           Accessing properties/methods
            a. []       :: Brackets Operator
            b. .        :: Dot Operator   
           

           Various creating object Method 
           ==============================
            1. new Method 

                var person = new Object();               // object 

                person.address = new Object()           // sub object

                Example 
                =======
                    var person = new Object();
                    person['firstname'] = "Deepinder";                                      // seeting values 
                    person['lastname'] = "Singh";                                           // seeting values
                    person['phone'] = "9915099247";
                    
                    person.address = new Object();

                    person.address.house = "51-d"
                    person.address.street = "street No. 3";
                    person.address.city = "Patiala";
                    person.address.state = "Punjab";

                output
                ======
                    address: { house: "51-d", street: "street No. 3", city: "Patiala", state: "Punjab" }
                    firstname: "Deepinder"
                    lastname: "Singh"
                    phone: "9915099247"   

            2. Object Literals

                var person = {};

                    var person ={firstname : "Deepinder",lastname : "singh"};

            3. Creating object on fly 

                function greet(preson){                                                 // receiving object as parameter                
                    console.log('Hi ' + preson.firstname);                              // getting value 
                }

                greet({firstname:"Deepinder",lastname:"Singh"});                        // creating object on fly   


        14. Namespace : a container for variables and functions (typically to keep variables and function with the same name separate)  but in javascript there is Namespace so we use objects as Namespace.

            english.greet = 'hello';
            spanish.greet = 'hola' ;

            so greet is comman in above objects , so object act like a namespace.

            Note ! concept

                var person = new Object();
                person.test.firstname = "Deepinder singh";
                console.log(person);

                Uncaught TypeError: Cannot set property 'firstname' of undefined

                we get this error because test object is not defined.

        15. JSON : javacsript Object Notation,it is string which is inspired by javacsript but does not means its a same thing, it has same syntax like object literals. Javascript has inbuilt functionalities which allow to parse the json to javacsript.

            1. JSON.stringify(objectLiteral)                                // it will convert javscript object into json string
            2. JSON.parse('{"firstname":"Marry","isAProgrammer":true}');    // it will convert json string into javscript object  


        16. Functions and Objects 

            first class functions : everything you can do with other types you can do with functions (assign them to variables, pass them around, create them on the fly)       


            Function (a Special type of object which contains 5 things) 
            |------> Primitive (property)                               
            |------> Object    (property)                               
            |------> Function  (method)                                 
            |------> Name      (optional, can be anonymous, property)           // hidden property
            |------> code      (property)                                       // hidden property and "Invocable" ()


            Example
            ======== 

                function greet(){
                    console.log('Hello');
                }

                greet.language = "Hindi";

                console.log(greet);
                console.log(greet());

            Output 
            ======

                ƒ greet() {
                        console.log('Hello');
                    }
                Hello   


            Explanation 
            ===========

                   Function (a Special type of object which contains 5 things) 
                    |------> Name       // greet
                    |------> code       // "Invocable"() --- > console.log('Hello');   

        17. function expression and function statements
            
            Expression : A unit of code that results in a value (it doesn't have to save to a variable)

               function greet(){                                    // function statement, simple function.
                   console.log('hello');
               }
               
               greet();
               
               var anonymousGreet = function(){                      // here we are creating an object, a function object    
                        console.log('Hello');                        // function expression , it retunring some value                    
                }

                anonymousGreet()                                     // Invocing the anonymous function with "()" 


            #function on fly
            ================

                function log(a){
                    a();                                            // Invocing function
                }

                log(function (){
                    console.log('Hello');                           // creating function on fly and also function Expression
                });


         18. Pass by value and Pass by reference

            1. in Pass by value variables get different Momery Address example all primitive data types, while in the Pass by reference same Memory block is pass to different variables example all object types .        

            2. concept
                a.in pass by value 
                    var a = 3; 
                    var b;
                    b=a;
                    a=4;     // changing the value of a variable but it does not effect the b variable beacuse it has different Memory block

                b. in pass by reference    

                    var c = {greeting : 'hi'};
                    var d;
                    d = c;

                    c.greeting='hello';     // mutate : to change something (immutable means it can't be changed.)

                    console.log(d);

                    Output
                    ======

                    hello                  // getting hello value of different

                    in this , changing the value of object it effect the other object because it has same Memory block

             Note ! equal Operator sets up new Memory space  (new address)

         19. This concept

            function get(){
                console.log(this)
            }           

            get();                      // return window object 


            var c = {
                name : 'Deepinder',
                test : function(){
                    console.log(this);  
                }
            }
            c.test()                    // return the complete c object.


            this represents the current object in which physical written. 


            #concept (kind of late static binding)

                var c = {
                    name : 'The c Object',
                    log : function (){
                        var self = this;                // passing reference to another variable.

                        self.name = 'Upload c object';
                        console.log(self);

                        var setname = function (newname){       // here get  problem when we use function with in the function
                            self.name = newname;                // we use variable instead fo this beacuse it pointing to window object
                        }

                        setname('Updated again ! The c object');
                        console.log(self)
                    }

                }

            above example totally depend on call by reference and reference Outer Environment;


         20. Array 

            1. var arr = new Array();
            2. var arr = []

            in array we can store any datatype like primitive,object, function object etc  beacuse javacsript is dynamic langauge.       


            var arr = [
                1,
                false,
                {
                    name : 'Tony',
                    address : '111 Main st.'
                },
                function (name){
                    var greeting = 'Hello',
                    console.log(greeting + name);
                },
                "Hello"
            ]

            console.log(arr);
            arr[3](arr[2].name);

         21. Arguments and Spreads 

            1. Arguments : The parameters you pass to a function (javacsript gives you a keyword of the same name which contains them all)

            2. argument is keyword which return the number of argument pass to the function.

            3. function overloading not exist in javacsript

         22. Semicolon 

            1. return                                                      // it will cause undefined
                {
                    firtname : 'Deepinder'
                }   

            2.return{                                                      // it will return object  
                    firtname : 'Deepinder'
                }

         23. Immediately Invoked Function Expression (IIFE)       

                var greet = function (name) {                              // here function expression 
                    console.log('Hello ' + name);                          // here it invoke itself and return value to variable  
                }('Deepinder');                                                     

                console.log(greet);                                        // here its datatype is string not a function object  


                Note : any thing in the brackets () are called expression example (3+4) is expressin 

                    (function (name){
                        var greeting = 'Hello';
                        console.log('Hello '+ name);
                    }('Deepinder'));    

                in above example it is called function expressin , it create on fly and invoke immediately. 
                            
                
                #concept 
                                    ()
                                Execution Context                           // greeting : Hello
                (create and code is executed for the anonymous function)                   
                                    |   
                            Global Execution Context                        // ()
                        (create and code is executed) 


                anonymous function have there own execution context.

         24. Closures 

            1. Example  

                 function greet(whatsay) {
                    return function (name) {
                        console.log(whatsay + name);
                    }
                }
                greet('hello')('Deepinder'); 

                            or 
                var sayHi  = greet('Hi');
                sayHi('Deepinder');




                      ()                                                                       ---- 3.  
             'sayHi' Execution Context                       
            (create and code is executed)                   // name : Deepinder 
                        |       
                      greet()
                    Execution Context                       
            (create and code is executed)                   // whatsay : Hi                     ---- 1. 
                        |   
                Global Execution Context                         
            (create and code is executed)                   // sayHi ()                         ---- 2.    


           a. in the 1. step when greet function execute complete it will pop from the stack but variable whatsay will remain store in its Memory like a grabage collection and after that 2. is excute in which sayHi invoke it will create a execution context and they have still reference of there outer reference (it will not point to global environment it will point to outer function). 
 
        
        this 'closed in' concept is called Closures 
        ----------------------------------------------        
        |              ()                            |                                           ---- 3.  
        |     'sayHi' Execution Context              |         
        |    (create and code is executed) --------  |        // name : Deepinder 
   -->  |                |                        |  |        // point to the whatsay variable Memory (still have reference)
   |    |                                         |  |
   |    |                      whatsay : Hi   <---|  |                                           ---- 1.      
   |    ----------------------------------------------                                                                      
   |                     |   
   |             Global Execution Context                         
   |         (create and code is executed)                   // sayHi ()                         ---- 2.   
   |
   |---- 1. sayHi function execution context 'is closed' in its outer variable, that variable have reference to any way, even though execution context are gone, so this phenomena of closing in all the variable that suppose to have access to is called Closures

         2. this is feature and happens 


         #example (concept-> please unsderstand carefully its easy)

             function buildFnction() {
                var arr = [];
                for (var i = 0; i < 3; i++) {
                    arr.push(function () {
                        console.log(i);
                    });
                }
                return arr;
            }
            var fa = buildFnction();

            console.log(fa[0]);                     // 3
            console.log(fa[1]);                     // 3
            console.log(fa[2]);                     // 3

            in the above example we getting 3 in the all the case because in array, usnderstand only -> when we invoke inside function its value of i = 3 beacuse of for loop so the inside function has outer reference which has i=3 value.-> in simple words the value of i matters when the function it actually call.

                
                it become this, that is why we getting value 3

                i=3 
                function ()
                {
                    console.log(i);
                }

            Note : Let create a new momery block every time. but var point to same Memory block 

                  function buildFnction() {
                        var arr = [];
                        for (let i = 0; i < 3; i++) {
                            arr.push(function () {
                                console.log(i);
                            });
                        }
                        return arr;
                    }
                    var fa = buildFnction();

                    console.log(fa[0]);                     // 1
                    console.log(fa[1]);                     // 2
                    console.log(fa[2]);                     // 3    
            
            #If we do this code without let 

                function buildFnction() {
                        var arr = [];
                        for (var i = 0; i < 3; i++) {
                            arr.push((function (j) {
                                return function () {
                                    console.log(j);
                                }
                            }(i)));
                        }
                        return arr;
                    }
                    var fa = buildFnction();

                    console.log(fa[0]());
                    console.log(fa[1]());
                    console.log(fa[2]()); 

             # Example (concept)

                   function makeGreeting(language) {
                        return function (firstname, lastname) {
                            if (language === 'en') {
                                console.log(' Hello ' + firstname + ' ' + lastname);
                            }
                            if (language === 'es') {
                                console.log(' Hola ' + firstname + ' ' + lastname);
                            }
                        }
                    }

                    var greetEnglish = makeGreeting('en');
                    var greetSpanish = makeGreeting('es');

                    greetEnglish('Jhon', 'Doe');
                    greetSpanish('Jhon', 'Doe');    

              Note : when ever you call a function a new exceution context is created does not matters how many times you have invoke the same function and also very time have there own variables environment.


         24. Callback function : A function you give to another function, to be run when the other function is finished. (so the function you call (i.e invoke), 'calls back' by calling the function you gave it when if finishes.)


            Example

                function tellMeWhenDone(callback){
                    var a = 1000;
                    var b = 2000;

                    callback();
                }

                tellMeWhenDone(function(){
                    console.log('I am done!');
                });
                
                tellMeWhenDone(function(){
                    console.log('I done....');
                });
         
         25.    Function (a Special type of object which contains 5 things) 
                |------> Primitive (property)                               
                |------> Object    (property)                               
                |------> Function  (method)                                 
                |------> Name      (optional, can be anonymous, property)           // hidden property
                |------> code      (property)                                       // hidden property and "Invocable" ()  


                |------>bind()
                |------>call()
                |------>apply()

            basically these functions are use to controll 'this', it point to the function of the object which we bind with 'this' on global execution level    

            a. Example Bind    
            ===============

                 var person = {
                firstname: 'Deepinder',
                lastname: 'Singh',
                getFullName: function () {
                    var fullname = this.firstname + ' ' + this.lastname;
                    return fullname;
                            }
                        }

                var logName = function (lang1, lang2) {
                    console.log('Logged : ' + this.getFullName());
                };

                var logPersonName = logName.bind(person)    // it will bind the person object to the 'this' then make a copy of function
                logPersonName();

                        or 


                var logName = function (lang1, lang2) {
                    console.log('Logged : ' + this.getFullName());
                }.bind(person);                            // it will bind the person object to the 'this' then make a copy of function

                logName();   


            Output 
            ======
            Logged : Deepinder Singh


            b. Example Call    
            ===============

                 var person = {
                firstname: 'Deepinder',
                lastname: 'Singh',
                getFullName: function () {
                    var fullname = this.firstname + ' ' + this.lastname;
                    return fullname;
                            }
                        }

                    var logName = function (lang1, lang2) {
                        console.log('Logged : ' + this.getFullName());
                        console.log('Argument : ' + lang1 + ' ' + lang2);
                        console.log('-----------------------------------');
                    };

                 logName.call(person, 'eng' , 'hindi');       // call is special property of function object which can invoke the code of the function and also it can bind the object and also it do not make copy of function.  


            Output 
            ======
            Logged : Deepinder Singh

            c. Example apply
            ===============

             var person = {
                firstname: 'Deepinder',
                lastname: 'Singh',
                getFullName: function () {
                    var fullname = this.firstname + ' ' + this.lastname;
                    return fullname;
                            }
                        }

                    var logName = function (lang1, lang2) {
                        console.log('Logged : ' + this.getFullName());
                        console.log('Argument : ' + lang1 + ' ' + lang2);
                        console.log('-----------------------------------');
                    };

                 logName.apply(person, ['eng' , 'hindi']);       // call is special property of function object which can invoke the code of the function and also it can bind the object and also it do not make copy of function.  

                 The only difference between apply and call , that in apply method arrangment send in arrangment.


            Output 
            ======
            Logged : Deepinder Singh


            #a. Example (Real life application -> borowing a function)
            =========================================================
                var person = {
                firstname: 'Deepinder',
                lastname: 'Singh',
                getFullName: function () {
                    var fullname = this.firstname + ' ' + this.lastname;
                    return fullname;
                    }
                }

                var person2 = {
                    firstname: 'Simranjeet',
                    lastname: 'Kaur'
                }

                console.log(person.getFullName.apply(person2));

             Output 
             ======
            12

             #b Example (Currying)
             =====================

             Function currying : creating a copy of a function but with some present parameters (very usefull in mathematical situations)

                function multiply(a, b) {
                    return a * b;
                }

                var multiplybytwo = multiply.bind(this, 2);     //bind makes a copy of the function 

                console.log(multiplybytwo(6)); 

                var multiplybythree = multiply.bind(this, 3);     //bind makes a copy of the function 

                console.log(multiplybytwo(6)); 


                it actually convert into this after bind function , which makes a copy of the function 

                    function multiple(b){               
                        var a = 2;
                        return a*b; 
                    }

                    console.log(multiply(6)); 


             Output 
             ======
             12
             18






















             

   



=========================================================================================================================================
=========================================================================================================================================
=========================================================================================================================================
=========================================================================================================================================
=========================================================================================================================================
=========================================================================================================================================
=========================================================================================================================================
=========================================================================================================================================
=========================================================================================================================================
=========================================================================================================================================
=========================================================================================================================================
#Javascript Engine 

    1. V8
    2. Spider Monkey 


=========================================================================================================================================
#DATA TYPES IN JAVASCRIPT

    There are 2 Data types 
        1. Primitive Data type                                               :: Momery allocation in stack
            a. Boolen 
            b. Null 
            c. Strings 
            d. Numbers 
            e. undefined
            f. Symbol

            Note : typeof return for null is object but it primitive data type

        2. Composite Data type/ Reference Datatype                           :: Memory Allocation in Heap
            a. Objects                 :: typeof return is object            
            b. Functions               :: typeof return is function  
            c. Arrays                  :: typeof return is object
            d. dates 

        Note :  1. typeOf           :: print the variable Type 
                2. parseInt         :: convert any Datatype into Integer
                3. c , c++ are the static languages thats we have to declare every datatype before declarition of variable but javascript is flexibal language in which engine automatically understand the datatype of the variable         

   
=========================================================================================================================================
#Console

    1. Console.log
    2. Console.table()                          // very usefull in the case of the objects
    3. console.warn()                           // show waring 
    4. console.clear();                         // clear all the console window
    5. console.time()  + console.timeEnd()      // execution time
    6. console.error()                          // to Show the error

=========================================================================================================================================
#var , let , const 
    
    1. var          :: are available globaly
    2. let          :: have block scope only 
    3. Const        :: value cannot change or redeclare 

    Note : 1. declaring and initilization in constant in one step only 
           2. when ever we declar array as const we can push elements from array but we cannot redeclare that array  
           3. In Let we cannot redeclare the variable same as const

    #various most common Programming case types: 
        1. camalCase 
        2. Kebab-Case 
        3. snake_case
        4. PascalCase

=========================================================================================================================================
#Type Conversation
    
    1. String(varibleName) or variable.toString()                 :: convert into string
    2. Number(variable) or parseInt() or parseFloat()             :: convert into number  
            toFixed()                                             :: convert into integer Number              
            toFixed(4)                                            :: convert into Float Number upto four decimals  

=========================================================================================================================================
#Coercion and falsy value 

    1. Null 
    2. ''
    3. 0
    4. NaN
    5. undefined           

=========================================================================================================================================
#String and string Functions, Template Literals 
    
    1. Concatination                                                :: add text to the existing text 
        a. '+' using of this sign
        b. variableName = VariableName.concat('Enter text Here');
    2. variableName.toLowerCase()                                   :: lower the all the text      
    3. variableName.toUpperCase()                                   :: Captalize the all the text  
    4. variableName[2]                                             :: return the 3rd Character from the string 
    5. variableName.indexOf('this')                                 :: return the starting index position of 'this' word from the string        
                -1     :: not found 
    6. variableName.lastIndexOf('this')                             :: return the last word starting position of 'this' word from the string        
    7. variableName.charAt(3)                                       :: return the third charcter from the string  
    8. variableName.inclides('test')                                :: return true or false if 'test' found in the string 
    9. variableName.substring(0,3)                                  :: return the characters starting from the 0 positon and end with 3 position  
    10. variableName.slice(0,3)                                     :: return the characters starting from the 0 positon and end with 3 position     
        
        Note slice function can also return characters from the end while substring cannot

    11. variableName.split(' ')                                     :: convert string into array same like expload function;
    12. variableName.replace('old word','new word')                 :: replace the first occurance word in the string 



#template Literals 

    1. Back Ticks  '`' Sign helps a lot like 

            var a = `html ${variableName} 
                        no need of concatination after enter
                        thanku so much and 
                        even i can add ' single or double inverted comma
                        and we will not get any kind of error  
                    `;    

# functions 
    1. when we call function with 'sayhello()' then it is called calling a function 
    2. when we call function with 'sayhello' then it is called referencing a function (mostly use in DOM part )                   
=========================================================================================================================================
#Arrays 
    
    1. Decalaring 

        1. var a = [1,2,4,5,6];                     :: with square brackets 
        2. var a = new array(1,2,3,4,5)             :: with array Constructor

    functions 

        1. arrayName.length                         :: return the length of the arrat 
        2. Array.isArray(arrayName)                 :: return true or false if arrayName is array
        3. arrayName.indexOf(23)                    :: return the index position of 23 value from the array     
        4. arrayName.push(23)                       :: add 23 value at the end of array 
        5. arrayName.unshift(23)                    :: add 23 value ad the beigning of the array  
        6. arrayName.pop()                          :: remove the last element from the array 
        7. arrayName.shift()                        :: remove the first element from the array 
        8. variableName.slice(0,3)                  :: remove the 3 elements from the array starting from the 0 index 
        9. variableName.revers()                   :: reverse the original array 
        10. newarray=array1.concate(array2)         :: combining two arrays


        #foreach loop

            let arr = [1,2,3,4,5,6,7,8,9,0];
                arr.foreach(function(elements,index,array){
                    console.log(elements);
                });



=========================================================================================================================================
#Objects 
    
    1. var obj = new object();                              //creating object

        obj.name="Deepinder";                           //creating property     
        obj.phone=9915099247;                           //creating property  
        obj.run=function{                               //creating function / method  
            return obj.name + "is Running";             // returning value      
        }

        Acessing Variable 
            obj.name                                // Deepinder
            obj.run();                              // Deepinder is Running 

    2. var bike = {                                       //createing object 
        name            : "aulto",                                 // creating property     
        'color'         : "black",                                // creating property 
        'company of'    : "maruti",                             // creating property 
        price           : 50000,
        discount        : function(){                          // creating function/method 
        var amount = bike.price-5000;
        }
    } 

        bike.name               //aulto
        bike['color']           //black    
        bike['company of']      //maruti


        #in forloop

            for(let key in bike){
                console.log(`The ${key} of object is ${obj[key]}`);  
            }

=========================================================================================================================================
#Window Object 

       
    
    1. window.innerHeight               // return the height of the window 
    2. window.innerWidth                // return the width of the window 
    3. window.scrollX                   // if scroll in the x-dircetion it will tell me value 
    4. window.scrollY                   // if scroll in the y-dircetion it will tell me value
    5. window.alert()                   // language construct 
    6. window.histoy()                  // return the history 
    7. window.history.length            // return the length of the history 
    8. window.history.go(-1)            // move backword 
    9. window.history.go(+1)            // move forward

    Note : Window id global object  which plays a major role in the dom 


    6. location.reload()                // reload the page 
    7. location.href                    // return the current url
    8. location.href="address"          // redirect to the address 
    9. location.toString()              // return the current address as string
         

    

=========================================================================================================================================
#DOM
    
    1. When a webpage or html page loads the browsers, Browser create a DOM (Document Object Model) for the page.

        Document    : Html page (Document)
        Object      : Tags or Elements and attributes in html pages 
        Model       : in Dom, tree structure of html elements 

    2. so the Html, Dom is Browser created tree structure arrangment of elements and Attribute.     

    3. Dom is a standard to understand the structure of the html page so that we can create, Read, Update and Delete and manages DOM Elements using javscript methods 

    4. Html DOM helps you to understand and control the element structure using javscript methods. if you understand the Dom Structure of the Html page, You can easily control it elements, Attribute and all Nodes 

    #What is Node ? 

        1. According the Html Dom Every thing in a html page is node 
        2. Entire Document is a Document Node.
        3. Each element in a html page is element node.
        4. all text of document is text nodes
        5. all Attribute of elements are attribute nodes.
        6. Comments of page are comment nodes 

        Note : console.log(document)       // object 

        1. document.all                     // return all the elements in the current page 
        2. document.body                    // return the body element with all child elements
        3. document.forms                   // return all the forms on the current page 
        3. document.links                   // return all the links on the current page 
        3. document.images                   // return all the images on the current page 
        3. document.script                   // return all the script on the current page 

        Note : when ever we use document.all , console will return the data in the form of array but it is not in the array from so we have to convert that thing into the array first then we can print that values 

            a  = document.all
            Array.from(a).forEach(function(element){
                console.log(element);
            });

    
=========================================================================================================================================
#Dom Selector, ChildNode, Children 
    
    1. Id                           // every element have unique id 
    2. Class                        // multiple elements can have same class  

    1. Single Element Selector      
        a. document.querySelector('#main');                 // only return the element which contains id main 
        b. document.querySelector('.test');                 // only return first element which contains test class 
        c. document.querySelector('div');                   // only return first div from whole dom
        d. document.querySelector('div.main')               // select div which have main class name 



    2. Multiple Element selector    
        a. document.getElementsByClassName('main');         // select all the elements which contains main class 
        b. document.getElementsByTagName('div')             // select all the elements which contains div element 

    #concept 
        <div id="container">
            <div id="main" class="first second third forth">
                <div id="test1">Child Node1</div>
                <div id="test2">Child Node2</div>
                <div id="test3">Child Node3</div>
            </div>
         </div>   

        let element = document.getElementById('main');

        document                :: object 
        getElementbyEd          :: method of the document class 

        1. element.className    :: accessing the object properties                      // example first second third forth

        2. element.childNode    :: return the child between a particular element 

                a. element.childNode[1].nodeName                  // it will return the node Name like h1, #text, comment etc    
                b. element.childnode[0].nodeType                  // it will return a number 

                        1. elements                 ::1
                        2. Attribute                ::2
                        3. Text Node                ::3
                        4. Comment                  ::4
                        5. document                 ::9
                        6. docType                  ::10   
        3. element.parentNode   :: return the parent Node element              // container 

                a. element.firstElementChild.nextSibling                        // return next sibling 
                a. element.firstElementChild.nextElementSibling                 // return next sibling element      


        4. element.children     :: return only the elements between selected element

                Note : 1. when ever we print childnode then it will print all the things which is included in that like text, comment, elements etc

        5. element.firstChild                              // return only the first child
        6. element.lastChild                               // return only the last child   
        7. element.firstElementChild                       // return only the first child element only 
        8. element.lastElementChild                        // return only the last child element only    

        9. element.childelementCount                       // return only elements counts with in the selected element    

       innertext    // will add only text in the element
       innerHTML    // will add html + text in the element like <b> hello </b> 
        
=========================================================================================================================================
#createing Removing and Replacing elements  
    
    1. createing 
        let element = document.createElement('li');                     // create list element 
            element.className = 'main'                                  // create class attribute with main class name 
            element.id        = 'credmain'                              // create id attribute with credmain id name 
            element.setAttribute('title','mytitle');                    // create attribute in the element wiht title 
            
            element.innerText = "hello Deepinder"                       // adding text in the li element 

                        or 
            element.appendChild(document.createTextNode('Hello i am Developer'))    // adding text in the li element             
            

        let ul  = document.querySelector('ul.this')                     // select ul which contains this class 
                  ul.appendChild(element)                               // add element to the ul element 

    2. replacing 

        1. element.replaceWtih(newElmentDetails)                              // replace all text and attribute with new details 
        2. parentId.replaceChild(newElment,document.getelmentById('main'))    // replace all text and attribute with new details 

     3. Remove                   
            
        1. element.replaceChild(document.getelmentById('main'))               // to remove the element from the child class
        4. element.removeAttribute('id')                                      // to remove the attribute from the element 

     4. hasAttribute 

        1. element.hasAttribute('href')                                         // return tru or flase if attribute exist in it         

=========================================================================================================================================
#Evenets and evenet Objects 
    
    1. Click event

        let myclick = document.getElementById('myclick');                       // selecting element 
            myclick.addEventListener('click', function(e) {                     // creating event 
                alert('Nik Bakery');
                console.log(e)                                                  // print all object details
                console.log(e.target)                                           // print data related to the target property  
                console.log(e.target.className)                                 // print class Name which is targeted
                console.log(e.target.id)                                        // print id name which is targeted
                console.log(e.target.classList)                                 // print all the list of the class name
                console.log(e.target.offsetX)                                   // print distance in the x-direction from the reference point   
                console.log(e.target.offsetY)                                   // print distance in the y-direction from the reference point   
            });

        Note : 1. here 'e' is the argument which is called event object. Most Important one is target property in object  
               2. e.target which returns the element 
               2. here function is called callback function    

    2. PreventDefault
        
        let btn = document.getElementId('btn');
        btn.addEventListener('click',fxn1);

        function fxn1(e){
            console.log('thanks',e);
            e.preventDefaut();
        }     

=========================================================================================================================================
#Local Storage (Appication -> localStorage  in the inspect element)

    1. localStorage.setItem('name','Deepu');            // store the value 

        window.localStorage                             // to print the value

    2. localStorage.getItem('name')                      // get value 

    3. localStorage.clear()                             // to delete all the local Storage values 

    4. localStorage.removeItem('name')                  // to remove the particular item

    5. to story array in local Storage you convert your array into json first   

        let array= [1,2,4,5,6];
        localStorage.setItem('myarray',JSON.stringify(array));

        localStorage.getItem.(array)            // it's output will be string not the array but it looks like array

        so convert into array 

        let name = JSON.parse(localStorage.getItem('array'));         // convert into object  

        console.log(name);                               // print array 


        JSON.stringify()     // convert array into string   
        JSON.parse()         // convert string into object 


=========================================================================================================================================
#Session Storage (Appication -> session  in the inspect element)

    1. same the above just reaplce session with local
    2. main difference , when ever we close the browser , and reopen the same tab then session will gone but local strorage will exis there.


=========================================================================================================================================
#Math Object 
    
    1. Math.round(5.5)                      // 6
    2. Math.ceil(5.4)                       // 6    
    3. Math.floor(5.4)                      // 5


=========================================================================================================================================
#object literals , Constructor and object oriented javascript 
  

  #object  laterial 

     let car = {                                                        // creating object
            name: 'aulto',                                              // class property
            model: 'k10',                                               // class property
            type: 'petrol',                                             // class property
            run: function () {                                          // class function 
                console.log(`${car.name} is runnig`);
            },
            stop: function () {                                         // class function 
                console.log(`${car.name} is Stop`);
            }
        }  

   #object Constructor
    
        function generateCar(givenName, givenSpeed, givenType) {            // creating function 
                this.name = givenName;                                      // creating properties 
                this.speed = givenSpeed;                                    // creating properties 
                this.type = givenSpeed;                                     // creating properties         
                this.run = function () {                                    // creating method     
                    console.log(`${this.name} is runnig `);
                },
                    this.stop = function () {                               // creating method 
                        console.log(`${this.name} is stop `);
                    }
            }

        car1 = new generateCar('aulto', 220, 'petrol');                     // creating object     
        car2 = new generateCar('scorpiao', 300, 'desial');                  // creating object 

=========================================================================================================================================
#object Prototype (basically it is use to create inbuilt functions)
    
    1. bydefaut when ever we create a object laterial or construtor object we get prototype object and prototype inherit all properties from laterial objects and in object sontructor it inherit from contructor 
    2. in case of object constructor we get two prototype first prototype of object and second one for contructor object 
    3. prototype object is nothing it just a list of various by default functions which is provided by javascript engine
    4. we can only modified in the constuctor objects not the laterial objects 

    Note : never edit prototype of Object (default object class)

        example 
              function generateCar(givenName, givenSpeed, givenType) {            // creating function 
                    this.name = givenName;                                      // creating properties 
                    this.speed = givenSpeed;                                    // creating properties 
                    this.type = givenSpeed;                                     // creating properties         
                    this.run = function () {                                    // creating method     
                        console.log(`${this.name} is runnig `);
                    },
                        this.stop = function () {                               // creating method 
                            console.log(`${this.name} is stop `);
                        }
                }

                generateCar.prototype.okok = function () {                      // creating prototype (onstructor prototype)
                    return this.name;
                };
                car1 = new generateCar('aulto', 220, 'petrol');
                console.log(car1.okok());

=========================================================================================================================================
#Creating prototype object

 const proto = {
            slogan: function () {
                return `This    company is best`;
            },
            chnageName: function (newName) {
                this.name = newName;
            }
        }
        const harry = Object.create(proto);						// creating prototype object 
        console.log(harry);

=========================================================================================================================================
#Class 
	
	class Student {
            constructor(gname, gclass, grollno, gphoneno) {										//creating constructor 
                this.name = gname;																//creating properties 		
                this.class = gclass;															//creating properties 	
                this.rollno = grollno;															//creating properties 
                this.phoneno = gphoneno;														//creating properties 
            }	
            study() {																			//creating functions 
                return `this is ${this.name} is study from the last 3 hours`;				
            }
            static add(a, b) {																	// creating static function 
                return a + b;
            }
        }

        object1 = new Student('Deepinder', 'Diploma', '198', '9915099247');						// creating object with new keyword
        console.log(object1.study());															// calling function 
        console.log(Student.add(1, 2));															// calling static function 

=========================================================================================================================================
#Inheritence 
	
	 class Student {
            constructor(gname, gclass, grollno, gphoneno) {
                this.name = gname;
                this.class = gclass;
                this.rollno = grollno;
                this.phoneno = gphoneno;
            }
            study() {
                return `this is ${this.name} is study from the last 3 hours`;
            }
            static add(a, b) {
                return a + b;
            }
        }
	
		 class teacher extends Student {
            constructor(gname, gclass, grollno, gphoneno, langugae) {							// constructor function 
                super(gname, gclass, grollno, gphoneno)											// calling constructor function of the parent class 
                this.name = gname;
                this.class = gclass;
                this.rollno = grollno;
                this.phoneno = gphoneno;
            }
        }

        object1 = new teacher('Deepinder', 'Diploma', '198', '9915099247');
        console.log(object1.study());
        console.log(teacher.add(1, 2)); 


=========================================================================================================================================
#Asynchronous Code in javascript 
    
    Asynchronous models allows multiple things to happen at the same time.
    Synchronous programming model, things happen at the same time.

    1. Async/await
    2. Callbacks 
    3. promises 

    #why use ajax 
        1. No page reload/refresh
        2. Better user experience 
        3. Save netweok bandwith 
        4. very intractive 
        
    Note : pure javascript means vanilla javascript and it is already in the browser 

    #How it works 
        1. Ajax uses XMLHttpRequest object (also called xhr Object) to achives this 
        2. Modern websitess use json instead or XML for data transfer 
        3. Data can be transferred in any format and protocol (Not always https necesserily) like text , json , xml , html etc

    Note :  
        1. readyState   Holds the status of the XMLHttpRequest.
             0: request not initialized
             1: server connection established
             2: request received
             3: processing request
             4: request finished and response is ready

        2. Http Requests
            1. status   200: "OK"
            2. 403: "Forbidden"
            3. 404: "Page not found"
            4. 500: Server Error    
    

        #GET Method
        ===========    
            let fetchBtn = document.getElementById("fetchBtn");
            fetchBtn.addEventListener("click", buttonClickHandler);
            function buttonClickHandler() {
              const xhr = new XMLHttpRequest();
              xhr.open("GET", "test.txt", true);                                // GET method with Asynchronous parameter (true)
            
              xhr.onprogress = function () {                                    // while doing progress 
                console.log("On progress");
              };

             
              xhr.onreadystatechange = function () {                            // to check the ready state 
                console.log("ready state is ", xhr.readyState); 
              };

                xhr.onload = function () {                                      // this is alternate function of onreadystatechange == 4
                if (xhr.status === 200) {                                       // when response get 200 
                  console.log(this.responseText);
                } else {
                  console.log("File Not Found 404");
                }
              };
              xhr.send();                                                       // to send the request 
            }

        #POST Method
        ============    
            let fetchBtn = document.getElementById("fetchBtn");
            fetchBtn.addEventListener("click", buttonClickHandler);
            function buttonClickHandler() {
              const xhr = new XMLHttpRequest();
              xhr.open("POST", "test.txt", true);                                // POST method with Asynchronous parameter (true)
              xhr.getResponseHeader('Content-type','application/json')           // sending and receiving json data
            
              xhr.onprogress = function () {                                    // while doing progress 
                console.log("On progress");
              };

             
              xhr.onreadystatechange = function () {                            // to check the ready state 
                console.log("ready state is ", xhr.readyState); 
              };

                xhr.onload = function () {                                      // this is alternate function of onreadystatechange == 4
                if (xhr.status === 200) {                                       // when response get 200 
                  console.log(this.responseText);
                } else {
                  console.log("File Not Found 404");
                }
              };
              params = `{"name":"test",'value':'deepinder'}`,                   // sending data
              xhr.send(params);                                                 // to send the request 
            }    

=========================================================================================================================================
#promises
    
      function fun1() {
            return new Promise(function (resolve, reject) {
                setTimeout(() => {
                    const error = true;
                    if (!error) {
                        console.log("Function : Your Promiss has been resolved");
                        resolve();
                    } else {
                        console.log('Function : Your Promiss has not been resolved');
                        reject('Sorry not Fulfilled');
                    }
                }, 5000);
            })
        };
        fun1().then(function () {
            console.log("Deepu: Thanks for Resolving");
        }).catch(function (error) {
            console.log("Deepinder: Very bad bro.");
        });

=========================================================================================================================================
#Arrow Function
    
    1. anonymous function 
        
        let test = function () {
            console.log('This is testing function');
        }

        test();
    
    2. Arrow function 

        let test = () => {
            console.log('This is testing function');
        }

        test();

    3. Arrow Function With return Type          
      
         let test = () => 'This is testing function';

        console.log(test());

    4. Arrow function with return type and one parameter

         let test = name => 'This is testing function ' + name;

        console.log(test('deepu'));

    5. Arrow function with retrun type and two parameter

        let test = (name, job) => 'This is testing function ' + name + job;

        console.log(test('deepu', 'Web Developer'));

    6. Arow Function with return type object           

        let test = () => ({ 'name': 'Deepinder', 'job': 'Web Developer' });

        console.log(test());
=========================================================================================================================================
#Fetch Api       

    This function is used insted of XHR 

    #GET Method
    ===========
    function getData() {
            console.log('Started getData');
             let url = 'https://api.github.com/users';
            fetch(url).then((response) => {                                     // returning promiss 
                console.log('Inside the First then');
                return response.text();                                         // returning data in the text form        
                    or
                return response.json();                                         // returning data in the json form    

            }).then((data) => {                                                 // returning promiss
                console.log("Inside Second Then");
                console.log(data);
            });
        }
        console.log('Before Running Data');
        getData();
        console.log('After Running Datat');

        OutPut
        ======

            Before Running Data
            index.html:14 Started getData
            index.html:26 After Running Datat
            index.html:17 Inside the First then
            index.html:20 Inside Second Then
            index.html:21 hello world 
            My name is Deepinder Singh 
            This is api for working file.
            thank you


        #POST Method
        ============
        function postData() {
            url = 'https://dummy.restapiexample.com/create';
            data = '{"name":"deepinder","salary":"123","age":"23"}';
            params = {
                method: 'post',
                headers: {
                    'Content-Type': 'application/json',



                },
                body: (data)
            },
                fetch(url, params).then(response => response.json())
                    .then(data => console.log(data));
        }
        postData();
=========================================================================================================================================
#Async and Awaut

    these are Asynchronous concept and this we use less 'then' as compare to fetchapi promiss

     async function test() {                                                        // convert the function into promiss
            console.log('Inside test function');                                    
            
            // tell the test function that you have to wait i am doing some thing  till the time complete your execution 

            const response = await fetch('https://api.github.com/users');           
            
            console.log('before respone');

           // tell the test function that you have to wait i am doing some thing  till the time complete your execution 

            const users = await response.json();
            console.log('user resolved');
            return users;
        }

        console.log('Before calling test');
        let a = test();
        console.log("After Calling test");
        console.log(a);  

        OutPut
        ======
        This is Tutorial 43
        index.html:23 Before calling test
        index.html:15 Inside test function
        index.html:25 After Calling test
        index.html:26 Promise {<pending>}                           // showing pending status beacuse it is in pending status
        index.html:17 before respone
        index.html:19 user resolved     

=========================================================================================================================================
#Try, catch, finally
    
    throw new Error('This is not defined');



    try {                                                               // mean try this code and if error occur send to the catch block
            klsdfsdflksflksflk;
        } catch (error) {
            console.log('Error occur in final block');
            console.log(error);
            console.log(error.name);
            console.log(error.message);

        } finally {
            console.log('this is used in the final block');
        }


        OutPut
        ======
        Error occur in final block
        index.html:22 ReferenceError: klsdfsdflksflksflk is not defined
            at index.html:19
        index.html:23 ReferenceError
        index.html:24 klsdfsdflksflksflk is not defined
        index.html:27 this is used in the final block



        Note :  Types of errors:
                TypeError = occurs when a variable or parameter is not of a valid type.
                SyntaxError = occurs when there is an error in syntax.
                ReferenceError = occurs when there is an invalid reference.
                EvalError= occurs when there is an error in global function.
                RangeError=  occurs when a numeric variable or parameter is outside of its valid range.

=========================================================================================================================================
#Regular Expression

    1. regex.exce(string)

        Let reh = /deepinder/i;                         // insensitive
        reh = /deepinder/g;                             // global
        let string = "This is Deepinder Singh Computer and deepinder Singh Best programmer";
        console.log(reh.source);
        console.log(reh.exec(string));

    2. regex.test(string)   

        return true or false

    3. string.match(regex)

        return an array of result or null

    4. string.search(regex)

        return index of first match else -1 

    5. string.replace(reg,replaceWithWords)                  

    #various Expression 

        1. ^ cap              :: ^ means expression will match if string start with ,

            Example regex=/^dee/ if trying to match with regex it will return only those words which start with letter 'dee'

        2. $ doller           :: $ means expression will match if string end with    

            Example regex=/dee$/ if trying to match with regex it will return only those words which end with letter 'dee'  

        3. . dot              :: matches with exact one charcter 

            Example regex=/d.ee/ if trying to match with regex it will return only those words which exact with letter 'd_ee'

        4. * star             ::  matches with any charcter        

            Example regex=/d*ee/ if trying to match with regex it will return only those words which match with letter 'd_ee'

        5. ? question         :: optional 

           Example regex=/di?ea?/ if trying to match with regex it will return only where i and a will be optional 

        6. [abc]              :: charcter set 

            Example regex=/[abc]/ if trying to match with regex it will return only those words which match with letter only  a,b,c

        7. [a-z] or [a-zA-Z] or [0-9]     :: charcter set

            Example regex=/[a-z]/ if trying to match with regex it will return only those words which match with a-z charcters only 



        8. [^a-z] or [^0-9]     :: charcter set

            Example regex=/[^a-z]/ if trying to match with regex it will return only those words which not match with a-z charcters only   

        9.  /^[a-z]/            :: start with a-z only    

        9. {}                   :: Quantifiers
            
            a. /har{}y/     r can occur exactly 2 times 
            b. /har{0,2}/   r can occur exactly 0 to 2 (0 or 1 or 2) times

        10. ()                  :: Grouping 

            a. /(har){2}([1-9]r)3/      har should be 3 times, 1-9,r should be 3 times 

=========================================================================================================================================
#Iterators 

    function fruitIterator(values) {
            let nextIndex = 0;
            return {
                next: function () {
                    if (nextIndex < values.length) {
                        return {
                            value: values[nextIndex++],
                            done: false,
                        }
                    } else {
                        return {
                            done: false
                        }
                    }
                }
            }
        }


        const myArray = ['apple', 'orange', 'grapes', 'Bhindi'];
        const fruits = fruitIterator(myArray);                      // this is Important step
        console.log(fruits.next().value);
        console.log(fruits.next().value);
        console.log(fruits.next().value);
        console.log(fruits.next().value);
        console.log(fruits.next().value);

        OutPut
        ======
        apple
        orange
        grapes
        Bhindi
        undefined    

=========================================================================================================================================
#Audio 

  var audio = new Audio('https://interactive-examples.mdn.mozilla.net/media/cc0-audio/t-rex-roar.mp3');
        audio.play();               

=========================================================================================================================================
#Generator

      function* numbersGen() {                                  // * is used to generator 
            let i = 0;

            yield 1;                                            // yield keyword is used 
            yield 2;
            yield 3;
            yield 4;

                or 

            while (true) 
            {
                yield i++;
            }
        }

        const gen = numbersGen();
        console.log(gen.next());                                  // calling default function       
        console.log(gen.next());    
        console.log(gen.next());
        console.log(gen.next());
        console.log(gen.next());

        OutPut
        ======
        { value: 0, done: false }                                 
        { value: 1, done: false }
        { value: 2, done: false }
        { value: 3, done: false }
        { value: 4, done: false }

    // return object where value is value , and done means next values exist or if next exit then it will return true otherwise false.

======================================================================================================================================
#For in and For of Loop

      
      For-in loop return indexs (use for object) and For-of lopp return values (use for array) 

      Example 1 (for-in object)
       
        obj = {
                name: 'Deepinder',
                job: 'web developer',
                phone: '+91-9915099247',
                mobile: 'apple'
            }
            for (let key in obj) {
                console.log(obj[key]);
            }

            OutPut
            ======
            Deepinder
            web developer
            +91-9915099247
            apple

      #Example 2 (for-in string)

        let mystring = "Hello my name is Deepinder Singh and i am a web developer";

        for (key in mystring) {
            console.log(mystring[key]);
        }   

      #Example 3 (for-of string)

        let obj = ['deep', 'sim', 'dev', 'alisha'];
        for (let name of obj) {
            console.log(name);
        }

        
        OutPut
        ======
         deep
         sim
         dev
         alisha     

======================================================================================================================================
#Maps 

    