Ajax In simple words :  data exchanging process in the background.


Jquery Ajax - Ajax is the art of exchanging data with a server and updating parts of a web page - without reloading the whole page. 

What is ajax ?
	1. Ajax = Asynchronous javascript and XML
	2. Ajax is not a programming langauge 
	3. Ajax is a technique used by a web developers in order to make websites behave like Desktop Applications 
	4. In Shot; Ajax is about loading data in the background and display it on the webpage, without reloading the whole page 
	5. web application using ajax enables partial page updates, ie only the related section of the page is updated, wihtout realoading the entire page 
	6. Examples of applications using ajax : Gmail, Google Maps, youtube and facebooks tabs 

There are 2 2 types of request/ Communication ways in client server Architecture 
	1. Synchronous 
	2. Asynchronous 

#Synchronous	
	1. we have a client-server application and in that application we have a button on a form and let say button event handler takes 10 seconds
	2. so in a Synchronous request when we click the button, request is send to the server and server takes 10 seconds to process that request so while server is processing the request the client is blocked and client waits for the server to complete the process and send request back to the client, at the time the user interface of the client is blocked and we cannot do anything with our interface of website

	Drawbacks of Synchronous programming
	1. Synchronous web programming results in lengthy postbacks (complete cycle of send request and receive response is called postbacks) 
	2. lack of continous interactivity on webpages
	3. Reduced responsiveness due to long waiting Periods
	4. Reduced efficency
	5. Decrease in prdocutivity of users 

						Request
		Client 	------------------------> Server 	
						Response	
		Client <------------------------  Server 

		Only One Request will send to the server at a same time and vice verse in this Architecture 




#Asynchronous
	1. Ajax applications are non-blocking as ajax requests are Asynchronous, the user doesn't have to wait for the request processing to complete.	
	2. Even while the request is still being processed by the server, the application remains responsive and the user can interact with the application 
	3. When the request processingis complete, the user interface is automatically updated. this is not the case with Synchronous request. The user interface is blocked and the user cannot do anything else until the request has completed processing
	4. Asynchronous means that we are exchanging data to / from the server in the background without having to refresh the page
	5. Ajax enables an applications to send and receive only the data that is required. as the a result that is Reduced traffic between the client and the server and better performance 
	6. The keystone of Ajax is the XMLHttpRequest object
						Request
						
		Client 	------------------------> Server 		// request 1 
		Client 	------------------------> Server 		// request 2 	
		Client 	------------------------> Server 		// request 3 
		Client 	------------------------> Server 		// request 4  
		Client 	------------------------> Server 		// request 5  	
						Response	
		Client <------------------------  Server 		// response 1 	
		Client <------------------------  Server 		// response 2 
		Client <------------------------  Server 		// response 3
		Client <------------------------  Server 		// response 4
		Client <------------------------  Server 		// response 5

	Multiple Request will send to server at a same time  and vice verse in this Architecture 

#The XMLHttpRequest object
	1. All modern browsers support the XMLHttpRequest object
	2. The XMLHttpRequest object can be used to exchanging data with a server behind the scenes. This means that it is possible to update parts of a webpage wihtout reloading the whole page.
	3. All Modern browsers (Chrome, Firefox, IE7+, Edge, Safari opera)have a built-in XMLHttpRequest object.
	4. XMLHttpRequest is used by javascript for Communication with server-side components
	5. Transfer data in the form fo the plain text, XML or JSON format
	6. Retrieves data from the server Asynchronous
	7. Allows web pages to request data from a server using client-side code 
	8. Provides properties and methods to access the server response (means XMLHttpRequest have so many properties and methods)
	9. Ajax improves performance of the page by enabling users to carry on with their tasks after sending a request to the server.  

# GET and POST Request
	1. it Specifies how to send the form data to a web server.
	2. the data can be sent as url variables, by using the get method or the HTTP post, by using the post Method 
		a. GET(default)
		b. POST

	#GET		
(best)	a. GET sends the data as part of the url 
		b. appends from-data into the url in name/value pairs
		c. The length of a url is limited 2048 characters 
		d. Never use GET method if you have password or other sensitive information to be sent to the server 
		e. Useful for form submissions where a user want to bookmarks the pages 
		f. GET is better for non-secure data, like query strings in Google
		g. GET can't be used to binary data ex :- images or word documents 

	#POST
		a. HTTP POST requests supply additional data from the client(browser) to the server in the message boday 
(best)	b. appends form-data inside the body of the HTTP request (data is not shown is in URL)
		c. The POST method does not have any restriction on data size to b sent 
		d. From submissions with POST cannot be bookmarked 		
		e. The post methods can be used to send ASCII as well as binary data. ex-images and word documents
		f. The Data sent by POST method goes through HTTP protocol. Bt using Secure HTTP you can make sure that your information is Secure.
		g. POST is a little safer than GET because the parameters are not stored in browser history or in web server logs. 

#Jquery and Ajax
	1. Jquery Provides several methods for ajax functionality 
	2. with the Jquery Ajax methods, you can request TEXT, HTML, XML or JSON from the remote server using both HTTP GET and HTTP POST - and you can load the external data directly into the selected HTML elements of your web page!
	
	Note : 	without Jquery, Ajax Coding can be a bit tricky!

	3. writing regular AJAX code can be a bit trikcy, because different browsers have different syntax for ajax implementation. This means that you will have to write extra code to test for different browser 
	4. However, the Jquery team has taken care of this for us, so that we can write AJAX functionality with only one single Line of 

#jquery Ajax Methods 
	1. Load 							// in LoadFunction Folder 
	2. GET
	3. POST
	4. ajax

#Jquery Ajax Load() Method
	syntax : $(select).load(url,data,callback)
	1. The required URL parameter Specifies the URL you wish to load 
	2. The optional data parameter Specifies a set of querystring key/value pair to send along with the request 
	3. The optional callback parameter is the name of a function to be executed after the load() method is completd. 
	4. The optional callback parameter Specifies a callback function to run when the load() method is completed. The Callback function can have different parameter
		a. responseTxt : Conatins the resulting content if the call succeeds 
		b. statusTxt   : conatins the status of the call 
		c. xhr 		   : contains the XMLHttpRequest object	 	

	Note : 	#load function 
			1. only load text and html files 
			2. if we want to import a particular element from external file then use below example 
				$('#getDatahtml').load('htmlFile.html h1');		// here we are loading only h1 element from the htmlFile.html
			3. if we want to import a particular element using id or class from the external file then use below example
				$('#getDatahtml').load('htmlFile.html #p1');	// here we are loading only id contain p1 element from the htmlFile.html

#jquery Ajax GET() Method  
	1. The $.get() method requests data from the server with an HTTP GET request.
	2. syntax
		$.get(URL,data,callback,dataType)
		a. The required URL parameter Specifies the URL you wish to request.
		b. The optional data parameter, A plain object or string that is sent to thet server with the request 
		c. The optional callback parameter is the name of a function to be executed if the request succeeds.
		d. The optional dataType parameter, the types of data expected from the server.  Default :Intelligent Guess (xml,json,script,text,html)

Note : when ever we want to send large number of Key:value pair then we use 'serialize' Method it will make query string with key:value 
		example : firstname=Deepinder&lastname=Singh&mobile=9915099247

		#To use serialize method
		1. Html Code
			<form id="formId">
				<input type="text" name="uname" id="uname" placeholder="Enter Your Username"><br/>
				<input type="text" name="sname" id="sname" placeholder="Enter Your Surname"><br/>
				<input type="button" value="Send" id="send">
			</form>

		2. jquery Code 
			   $(document).ready(function(){
					$('#send').click(function(){
						var uname = $('#uname').val();
						var sname = $('#sname').val();
						if(uname!='' || sname!=''){
							$.get(
								'processing.php',
								$('#formId').serialize(),
								function(response,status,xhr){
									alert(response);
									alert(status);
									alert(xhr);
									$('#result').text(response);
								}
								
								); 
						} else{
							alert('Please Enter Values');
						} 
					});
				});

#Jquery $.POST() Method
	1. The $.POST()method requests data from the server using an HTTP POST request 
	2. syntax
	$.post(URL,data,callback,dataType)
	a. The required URL parameter Specifies the URL you wish to request.
	b. The optional data parameter, A plain object or string that is sent to thet server with the request 
	c. The optional callback parameter is the name of a function to be executed if the request succeeds.
	d. The optional dataType parameter, the types of data expected from the server.  Default :Intelligent Guess (xml,json,script,text,html)


#Difference Between Load and Get 
	LOAD()														GET()
1. Loads only Html data.						|	1. Loads any type of data, such as JSON and script
2. Send a get or post request.					|	2. Sends a get request always.
   If data parameteris sepecified,				|
   POST is used. Otherwise, GET is used 		|	
3. Follows a selector for inserting the 		|	3. Does not follow a selector while coding. 
   retrieved content into the element 			|	   Instead, it invokes a callback function to insert thet data 
   that matches with the selector				|	   from the server	
4. There are 3 parameter in load() 				|	4. There are 4 parameter in Get() method. 
	method.url,data,callback					|		url,data,callback,dataType
5. Returns the data to a selector in html 		|	5. Returns the data to a callback function parameter.
	page.										|			



#Simplarities & Difference Between GET and POST 
1. The jquery's $.get() and $.post() methods Provides simple tools to send and retrieve data Asynchronous from a web server.
2. Both the methods are pretty much identical, apart from one major difference - the $.get() makes Ajax requests using the HTTP GET method, where as the $.post makes Ajax requests using the HTTP POST method 
3. GET - Request data from a sepecified resource
   POST - Submits data to be processed to a sepecified resource
4. syntax is also same for GET & POST method    



#ajax Method jquery
	1. The jquery ajax() method Provides core functionality of ajax in jquery
	2. it sends Asynchronous HTTP request to the server.
	3. One thing is very great about $.ajax method is that we can use this method in place of $.get,$.post() and $.load methods

	syntax	
		1. $.ajax('url',{options});
		2. $.ajax({options});
		   $.ajax({name:value.name:value,......;})


		   <div id="loader" style="display:none"><img src="loading.gif" alt="loading" height=100 width=100></div>

		     $.ajax({
						url:'processing.php',
						type:'POST',
						data:{'sname':sname,'uname':uname},
						dataType : 'json',
						beforeSend:function(){
                            $('#loader').css({'display':'block'});
                         },
                         success:function(result,status,xhr){
                             alert('success Message : ' + result);
                             alert('success Message : ' + status);
                             alert('success Message : ' + xhr);
                             $('#loader').css({'display':'none'});
                         },
                         error: function(xhr,status,result){
                            alert('erorr Message : ' + result);
                             alert('erorr Message : ' + status);
                             alert('erorr Message : ' + xhr);
                         },complete(xhr,status) {
                             alert('complete Message : ' + status);
                             alert('complete Message : ' + xhr);
                         }     
					}); 


	options
		1. url : it i used to Specify the url to send the request 
		2. type : it is used to specify the type of request. (get or post)
		3. data : it is used to specify data to sent to the server. {key: value pair}
		4. success(result,status,xhr) : it is to be run when the request succeeds.
		5. error(xhr,status,result) : it is used to run if the request fails	  
		6.  async: it's default values is true. It insdicates whether the request should be handled Asynchronous or not.
		7. dataType : The data type expected of the server response. eg : json,xml,html, etc
		8. complete(xhr,status) : it is a function which is to be run when the request is being finished.
		9. beforeSend(xhr): it is a function which is to be run before the request is being sent to the client. 