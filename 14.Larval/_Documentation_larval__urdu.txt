Lerning never ends 
======================================================================================================================================================
Introduction


What is Framework 
a. A frame is a platform for developing software applications
b. it provides a foundation on which software developers can build programs for a specific platform 
c. for example, a framwork may include predefined classes and functions can be used to process input, manage hardware devices and interact with system software 
d. framework provides set of rules and regulations for developing a software
e. framework provides an architectural to develop software in a structural and logical manner
f. MVC is a most common features used in frameworks.

g. Laravel is a PHP based web framework for building high end web applications using its significant and graceful syntaxes
h. it comes with a robust collection of tools and provied application architecture
i. Moreover, it includes various charactersticis of technolgies like ASP.net MVC, Codeigniter, Ruby on rails and lot more 
j. it facilitates developers by saving huge time and helps reduce thinking and planning to develop the entire website from scratch 
k. Open source PHP framework
l. uses the model-view-controller (MVC) design pattern
j. An alternative to CakePHP and Codeigniter
k. Laravel one of the most popular PHP framework after codeigniter


Some essentail features provieded by laravel are 
1. Routing Controller
2. Configuration management 
3. Testabilty 
4. Authentication and authorization of users 
5. Modularity {means different different}
6. ORM(object Relational Mapper) features {create database using Model Classes}
7. Provides templates engine {blade engine}
8. Building schemes 
9. E-mailing facilities 



Need for Frameworks 
Framework is a basic templating structure that is used to develop, test, and deploy applications rapidly and efficently 



Purpose of Frameworks 
1. Provide abstraction {provide only neccessry things to users}
2. Handles repetitve and menial tasks
3. Arranges things in a logical structure. 
4. Reuses and assembles existing components, dependencies, and libraries 
5. To build web appliction in a structured manner


Features of laravel
1. Convention over configuration {means Model Class}
	a. Can Predict the dependencies 
	b. Automate the cofiguration realted tasks 
	c. Reduces the time and effort required to setup and configure service 
	d. Suitable for rapid application Development (RAD)

2. MVC 
	user->request->controler->model->controler->user  

3. Artisan Command for Automation 
	Artisan {means creater}

	a.Artisan is the name of the command-line interface included with laravel. It provieds a number of helpful commands for your use while developing your        application. It is driven by the powerful symfony console component.
	b. Automation Tool
	c. uset to create models, views, and controllers
	d. used to create dummy server 
	e. Perform database operations 
	f. Listing all Available Commands 
		To view a list of avalibale Artisan commands, you may use the list command : php artisan List 

4. Helper functions 
	a. Global PHP functions 
	b. Reduces time and effort 
	c. Helper functions are classified as follows 
		1. arrays and objects 
		2. paths 
		3. strings 
		4. urls 
		5. Miscellaneous 
5. Extensive Library {very large libray + can add so many codes}
	a. Includes lot of popular and commonly used libraries 
	b. Reduces time and effort 
	c. Code snippet that allows inclusion of external libraries using the composer package manger: compose require <>

============================================================================================================================================================
Downloading and Installing

we need 4 thing in this laravel installation
	1. wamp/xamp/mamp server 
	
	2. Composer (Dependency Manager for PHP ){means this thing help to download all the things automatically which we will use in laravel} 
		a. Composer is tool for dependency management in PHP
		b. Composer provides you CLI (command line interface) to run commands
		c. it allows you declare the libraries your project depends on and it will manage (install/update) them for you 
		d. it helps us installing/updating various requirments/components for our app such as Laravel Framework

	3. text editor

	4. Git bash : it also provides command line interface to include third party packages	 

note : laravel work if php version is greater than 5  	

1. Installing laravel Command using Composer 
	 Composer global require laravel/insteller -------------> this command is used to install the laravel {this command only run in starting}

2. creating new project comman d
	Laravel new project_name 

	composer create-project laravel/laravel laravel "5.1.*"		 

3. Change powershell to bash
	step 1 : Go to file tab then go to preferences and then go to setting 
	step 2 : there is a list in left hand side, and from that list select features 
	step 3 : in features list, select terminal then scroll downward and then click to edit in settings.json
	step 4 : Remove all data of settings.json then in the curly brackets pass the path given below.
	step 5 : "terminal.integrated.automationShell.windows": "C:\\Program Files\\Git\\bin\\bash.exe"
=======================================================================================================================================================
Directoty Structure 
 1. App Directory : Contains the core{important code that runs the laravel application. Most classes are stored in this directory and its subdirectories.
 2. Bootstrap Directory : includes the code that collates all files spred through the directories and run the application.
 3. config Directory : includes files realted ro configuration of different components 
 4. database directory : Contains database migrations, seeds, model fatories and the SQLite databse that will bes used in subsequent session 	
 5. Public Directory : Includes files that must be exposed to the internet. Thus, the index.php file calls the app.php file in the bootstrap directory to start the application whenever it receives a request. All HTML, CSS, and images files are also stored in this directory 
 6. Resources Directory : includes the views that will be used to display the final web page as well as the un-compiled assets realted to javascript and CSS
 7. Routes Directory : provides the route defination for the application that will match the request with its response 
 8. stroage Directory : includes data generated by the laravel framework fro storage an cache 
 9. tests Directory : Contains the test specifications for automated testing 
 10. vendor Directory : Contains infromation on thiird party dependencies imported by the composer dependency manager 
 ====================================================================================================================================================
 #Removing Public From URL in laravel 

 1. copy .htacces file from from the 'public folder' and then paste outside the Public folder
 2. copy and paste again server.php file and then rename that copy file as 'index.php'
 3. then hit the laravel project address without 'public' word
 4. when we remove public from address bar then '.env' file get expose {means breaking of security}
 		Hiding '.env' file code
 			<Files.env>
 				Order allow,deny
 				Deny from all
 			</Files>	

 		paste this code in the '.htaccess file' before '</IfModule>'
=====================================================================================================================================================
#Routing in Laravel

1. Routing is one of the essentail concepts in Laravel 
2. Routing allows you to map the request with the appropiate location 
3. Routing in laravel allows you to route all your application requests to its appropriate controller
4. {Request} FirstProject/About -> controller -> About Method -> About View 
	The whole above process is called Routing 
5. All the routes in Laravel are defined within the routes files that you can find in the 'routes sub-directory' {app -> Http -> Route.php -> write route in 5 version}
6. These route files get loaded and generated automatically by the laravel framework
7. Route-> web.php {in latest version}

	Avalibale Router Method 
		1. The Router allows you to register routes that respond to any HTTP verb 

			a. Route::get($uri,$callback);
			b. Route::post($uri,$callback);			{example in other documentation}
			c. Route::put($uri,$callback);
			d. Route::patch($uri,$callback);
			e. Route::delete($uri,$callback);
			f. Route::option($uri,$callback);

			Example 
			1. Route::get('/',function(){				// this is callback function means ,in this route we are not going to controller  
				return "Welcome to laravel"
			});

			2. Route::get('sayhello','Hellocontroller@index');	 // this is Controller function means ,in this route we going to controller function  

8. php artisan route:list 
	This command will display you all the routes for your crud application 
			
========================================================================================================================================================
Controllers and Views in Laravel 

Controllers 
	1. in the MVC framework, the letter 'C' stands for Controller
	2. it acts as a directing traffic between views and Models, means controller play intermidate role
	3. Controller are php classes 
	4. Controller are used to creat application Logic 
	5. Controller contains one or more than one methods which can return different types of data
	6. Separates the controller/application logic from the presntation logic
	7. Controllers can be seen at app/http/Controllers 
	8. Every Controller class must extends/inherit controller class and this parent controller class is location in App\http\Controllers
	9. Move request and responses from the routes file to their own separate files and functions 
	10. Organize web application 
	11. East to implement Create, Read, Update, Delete (CRUD) application
	12. Can be initiated using: Single action Controllers and resources controllers
	13. Command For creating Controller 
			php artisan make:controller <Controller-name>	

			example php artisan make:controller HomeController	


Views 
	1. Provides User-Interface of the website
	2. Provides the modularuty required for web application Development
	3. Located at reesources\views 
	4. The Deafult view for Laravel Framework is welcome.blade.php		
	5. Separates the controller/application logic from the presntation logic

=====================================================================================================================================================
Passing Data From Controller to view in laravel

1. There are various ways of passing data to views 
	a. By using the the name array 
	b. By using with() function 
	c. by using compact() function 

============	
#Name array 
	The name array is the array of data that is passed as the second parameter to the view() method.

	return view('Home.index', ['std1' => 'Ali', 'std2' => 'Zain', 'std3' => 'Osama']);

	<ol>
	    <li>{{$std1}}</li>
	    <li>{{$std2}}</li>
	    <li>{{$std3}}</li>
	</ol>	
	
============
with() function
We can also use the with() function to pass the data to views. The 'with()' functions two parameters 

Example :
public function index(){
	$name = "learning Never End";
	return view ('Home.index')->with('name',$name);
}


Note : {{--  Comment Section place here     --}}			// syntax of comments 
==============
Compact 
The compact() function is also used to pass the data to views. It contains a single parameter. i.e the name of the variable 

Example 
	public function index(){
		$name = "Learning Never Ends";
		return view('Home.index',compact('name'));
	} 			

======================================================================================================================================	
Blade Template Engine In Laravel 

1. Blade Template engine is used to simplify the process of creating view 
2. It makes the syntax writing very simple 
3. The blade templating engine provides its own structure such as conditional statements and loops 
4. View is also called Blade templates 
5. To create a blade template, you just need to create a view file and save it with a '.blade.php' extenstion insted of '.php' extention 
6. The main advantage of using the blade template is that we can create the master template, which can be extended by other file
7. Blade is a lightweight template language that provides multiple short codes

Why Blade template : Blade template is used beacuse of the following reasons 
1. Dipsplaying Data 
	if you want to print the value of variable, then you can do so by simply enclosing the varible within the curly brackets 
		syntax {{$ variable }}
	
	in blade template, we do not need to write the code between <?php echo $varaiable?>

2. Blade Template Control Statement {these are the things to reduce the codes }
	Blade templating engine also provide the control statments in laravel as well as shortcut for the control statment 

		a. @if()	:: <?php if()
		   @endif  ::  endif ?>

		b. @php $i=0 @endphp :: <?php $i=0;?>	


		@if @else
		@if @elseif @else
		@switch


		1. @if @else
			example 
			$name = "Learning never End";
	        $myName = "Adil";
			return view('Home.contact')->with('name', $myName);

			@if($name=='Adil')
			<h1>Hello Adil</h1>
			@else
			<h1>Hello Other</h1>
			@endif	

		2. @if @elseif @else

			 $name = "Learning Never Ends";
	        $percentage = 75;
	        return view('Home.index')->with('ChannelName', $name)->with('per', $percentage);

			@if($per>=80)
			<h1>A-1 Greade</h1>
			@elseif($per>=70)
			<h2>A-2 Greade</h2>
			@elseif($per>=60)
			<h2>A-3 Gread</h2>
			@else
			<h2>Fail</h2>
			@endif	

		3. @switch case {Starting from Laravel 5.2 and up use @php statement.}

			$pizza = 'Supreme';
		    return view('Home.index')->with('pizza', $pizza);
			
			@switch($pizza)
			@case("Tikka")
			<h1>You have selected Tika Pizza</h1>
			@break
			@case("Fajita")
			@break
			@case("supreme")
			<h1>You have Seleted Supreme Pizza</h1>
			@break
			@default
			<h1>Your pizza flavour is not available</h1>
			@endswitch	



3. Blade loops 
 	a. The blade templating engine provides loops such as @for, @endfor, @foreach, @endforeach, @while, and @endwhile directive 
			1. foreach
 				$data['games'] = ['cricket', 'football', 'hockey'];
				return view('Home.index', $data);

				@foreach($games as $game)
				<h2>{{$game}}</h2>
				@endforeach;

	b. These directives (basic php loops) are used to create the php loop equivalent statements 

3. Null coalescape Operator 
	a. in blade template the syntax of null coalesce operator can be written as : 
			{{$variable ?? 'default Value'}}

	the above syntax is equvalent to <?php isset($variable) $varible:'default value';?>		

===================================================================================================================================
Master page layout or Template inheritance in laravel 

1. Master page layout defines the common layout across all the webpages 
2. All the web applications have to master page layout to define the common layout across all the web pages.
3. The blade templating engine defines the master layout that can be extended by all the webpages 
4. The master page layout is avaialbe in the /resousrces/views/layout/directory 
5. comman name master.blade.php   

Note : all bootstrap and js files should be placed in the public folder 


Master File code (master.blade.php)					// place in layouts/master.blade.php
	<!DOCTYPE html>
		<html lang="en">

		<head>
		    <title></title>
		    <meta charset="UTF-8">
		    <meta name="viewport" content="width=device-width, initial-scale=1">
		    <link href="public/bootstrap/css/bootstrap.min.css" rel="stylesheet">

		</head>
		<h1>This is Master Page</h1>
		@yield('content')							// variable name that we are setting it

		<body>
		    <script src="public/bootstrap/js/jquery.js"></script>
		    <script src="public/bootstrap/js/custom.js"></script>
		    <script src="public/bootstrap/js/bootstrap.bundle.min"></script>
		    <script src="public/bootstrap/js/jquery.js"></script>

		</body>

		</html>

view file (index.blade.php)
	1. Index file 
	
		@extends('layouts/master')						// extending the master file 

		@section('content')								setting value to the content section 
		<h1>Index Page</h1>
		@endsection

	2. contact 

		@extends('layouts/master')

		@section('content')
		<h1>about Page Page</h1>
		@endsection

====================================================================================================================================================
Form Handling (part-1)	

1. it is a webpage containing fields 
2. it is used by users to enter information 
3. it passes entered data from a client to a server 
4. steps for handling html forms and process information are as follows 
	a. user enters information in an html form and sends it to the web server 
	b. processing the information 
	c. sending output back to the web server       

CSRF protection 

a. Cross Site Request Forgery is a type of attack that performed by the attacker to send request to a system with the help of an authorized user who is trusted by the system 
b. Laravel provides protection with the CSRF attackes by gerenrating CSRF token. This CSRF token is generated automatically for each user. This token is nothing but a random string that is managed by the laravel application to verify the user requests
c. How to use : this CSRF token protection can be applied to any html form in laravel application by specifying a hidden form a field of CSRF token. The requests are validated automatically by the CSRF verfiy CSRF Token middleware


index.blade.php
<form action="{{url('data')}}" method="post">
    <input type="text" class="form-control" name="name" id="" placeholder="Enter First Name  ">
    <br /><br />
    {{csrf_field()}}
    <input type="email" class="form-control" name="email" id="" placeholder="Enter Email  ">
    <select name="gender" id="" class="form-control">
        <option value="">Select Gender</option>
        <option value="male">Male</option>
        <option value="female">Female</option>
    </select>
    <input type="submit" value="Submit" class="btn btn-success">
    <input type="reset" value="Clear" class="btn btn-danger ">
</form>



route.php
Route::post('/data', 'HomeController@getData');


HomeController.php
 public function getData(Request $request)
    {
        $data['fromData'] = $request->all();
        return view('Home')
    }
===============================================================================================================================================
Form handling part-2

Follow these 3 steps before creating forms in laravel 

1 step
	Composer require laravelcollective/html

2 step 
	Go to config directoty > app.php >providers 
	Collective\Html\HtmlServiceProviders::class,	

3 step
	Go to config directory > app.php > aliases
	'Form'=> Collective\Html\FormFacade::class,
	'Html'=> Collective\Html\HtmlFacade::class,	


Note : you can search laravel collective in google

LaravelCollective reposiroty is created by the open source community to help developers who use From builder Class.


1. Form tage	
	{{Form::open(['url'=>'/add','method'=>'post'])}}				// form with attribute 
	Form componets here......
	{{Form::close}}

2. Form componets 
	1. labal -> {{Form::label('Enter Name')}}
	2. text -> {{Form::text('name')}}
	3. number -> {{Form::number('name')}}
	4. password ->{{Form::password('password')}}
	5. File upload ->{{Form::file('image')}}
	6. checkbox -> {{Form::checkbox('name','value')}}
	7. radio -> {{Form::radio('name','value')}}
	8. select -> {{Form::select('country',array('1'=>'Deepinder','2'=>'Simranjeet','3'=>'Inder'))}}
	9. submit -> {{Form::submit('Submit')}}
=========================================================================================================================================
Form Validations in laravel {same document as pervious in }
1. required 		: required
2. Email 			: valid email
3. Min 				: required minimum number
4. Max     			: allow maximum number
5. Numeric 			: allow only numeric words
6. Alpha Dahs       : allow charcters and dash
7. Alpha			: allow only chacters  
8. Regex			: allow patterns {search in google html5 pattern}
		example : 'regex:[0-9]+'
		incase if we get any kind of error then 'regex:/[0-9]+/' add slashes in front and back

note : regex for strong password video is 15 - FORM VALIDATION IN LARAVEL ( PART-2 ) ( URDU / HINDI )	

9. nullable			: allow user to enter null data
	
note : form validation for laravel

10. size 			: allow fix number of charcters
11. Boolen			: allow only  1 or 0
12. in 				: allow specific words ex in:adil,osama,deep,zandu
13. Not_in			: not allow speciic words 
13. url 			: allow only url address
14. Lt 				: less than 	example lt:5 means allow number less than 5
15. Gt 				: greater than 	example gt:5 means allow number greater than 5
16. Between 		: between range example between:10,20 
17. Digits			: digit:2 means allow 2 digits number	
18. Same 			: use to match the fields with each other like password-confrim password 		
		example confirm =>['same:pass']	
19. Starts_with		: start with particular word exmple starts_with:a,b,c,d 		also its a case-sensitive
20. Ends_with 		: end with particular word example 	ends_with:a,b,c,d
21. Date 			: accept valid date 
22. date_format 	: accept date format example date_format:d-m-y

	version 5.1 {previousu notes}
	
	version 7.0 
	public function store(Request $request){
        
        $request->validate([
        'name'=>'required|min:3|max:30',
        'email'=>'required|email',
        'age'=>'required|numeric|regex:[0-9]+'],
        [
        	'name.required'=>'Name is must'							// this is to create for custome message for name 
        	'email.required'=>'email is must',
        	'email.email'=>'email not valid',
        	'age.required'=>'age is must',
        ]);

        dd($request->all());
    }
=========================================================================================================================================
# WORKING WITH MODELS IN LARAVEL (same documentation of pervious laraval document)

=========================================================================================================================================
# The Eloquent ORM in Laravel

Laravel Application -> object -> ORM -> Databse 

What is object Relational mapping 
	1. ORM or object Relational Mapping is a system that implements the responsibilty of mapping the object to Relational Model 
	2. That means it is responsible to store Object Model Data into Relational Model and future read the data from relational Model into Object Model
	3. One of the most important feature of the laravel framework is that, it comes with built in ORM (object Relation Mapping ) Called Eloquent ORM
	4. Eloquent ORM refer to an adavanced implementation of the PHP avtive Record Pattern, which makes it very easy to intract with application database 

Note : 
		Model Class {model class name should be singular}
				Employee (class name) -- employees (table name) {table name should be plural}
										 column names become variable or properties of the class eg id, name, gender 

					$object = new Employees();
					$object->id = 1;
					$object->name = "Deepinder";
					$object->gender = "Male";

	5. Eloquent ORM is the very powerful yet very expressive ORM, which allow us to work with the database objects and realtionships using much eloquent and expensive syntax.
	6. In Laravel, each database table is mapped into corresponding eloquent model object include various method for saving, retrieving and updating the database 
	7. The Eloquent ORM inclued with laravel provides a beautiful and simple for working with your database
	8. Each Database table has a corresponding "Model" which is used to intract with that table 									 		

==============================================================================================================================================
Setting up Database, Tables and Migrations in laravel 

Step : 1
	1. Before getting started, be sure to configure a database connection in config/database.php		
	2. So you have to made modification in .env file for database purpose not in config/database.php
	3. To get started, created an Eloquent model. Models Typically live in the app directory 

step : 2 
	Class user extends Model {

	}

	or 

	You may also generate Eloquent Models using the make:model command	
		php artisan make:model employee

	if you want to create migration of model then 
		php artisan make:model Employee -m	

		Exammplle
		     2021_05_11_175404_create_employees_table.php
				
				public function up()
			    {
			        Schema::create('employees', function (Blueprint $table) {
			            $table->bigIncrements('id');
			            $table->string('name', 50);
			            $table->string('gender', 50);
			            $table->integer('age');
			            $table->string('designation', 50);
			            $table->timestamps();       //created_at , updated_at
			        });
			    }








	All migration are located in database > migrations directory 
	
Step : 3 
	1. Write the columns you want in your table in your migration file in 'up' function 
	2. use properties in model class like 
		a. $table 			// this property is used to change the name 
		b. $primaryKey		// this property is used to create primary key 
		c. $timestamps		// this property is used to disable the timestamps
		d. $fillable 		// this property is used to fill only particular columns 

			these propeties are define previous document 


step : 4
	a. Setting up the Default string Length of varchar Column in your table 
	b. use Illumination\Support\Facades\Schema;
	c. Copy this namespace from your migration file and paste into app > Providers > AppServiceProvider.php file 
	d. And then add this line in boot function 
	e. Scheme::DefaultStringLength(191);  			

step : 5 
	a. After writing migration code then run your migration 
	b. After running the migrations, all tables will be created in your database automatically 	

==================================================================================================================================================
Creating Resources Controller in Laravel 
	1. Create a resource controller, becasue resorce controller will provide you all the methods in a controller, which you will be used in your crud application 	
	2. Command for creating resource controller 
		a. PHP artisan make:controller EmployeeController 
		b. PHP artisan make:controller EmployeeEontroller -r 

		inde function 			: show data 
		create function 		: insert data
		show function 			: see particular id
		edit function 			: to edit data
		update function 		: to update data
		destroy	function 		: to delete data 			

	3. Create the route
		Example 
			Route::resource('employee','EmployeeController');

			This line will create all the routes for your employee controller
================================================================================================================================================
Fetching / Retriving Data from Database in laravel
	
	then add line in controller 
		use App\Employee;					here employee is a model which exsit in app folder 	

		public function index(){
			
				$data['emp'] = Employee::all();		// return all the data from the employee Table
       		 return view('Employee.index', $data);
		}

		a. $data['emp'] = Employee::orderBy('name', 'DESC')->get();			// this function is use to show in order by 
		b. $data['emp'] = Employee::orderBy('name', 'DESC')->take(1)->get();	//  take function show number of rows
		c. $data['emp'] = Employee::orderBy('name', 'DESC')->paginate(3);		number of records per page
				{{$emp->links()}}												// make number of pages 

		@foreach($emp as $e)
		Id : {{$e['id']}}
		Name : {{$e['name']}}
		Age : {{$e['age']}}
		Description : {{$e['descripton']}}
		Id : {{$e['id']}}
		@endforeach;
================================================================================================================================================
inserting Data
	
note : <a href="url('path/routeName')">Create Link</a>	

Model.php

<?php

namespace App;

use Illuminate\Database\Eloquent\Model;

class Employee extends Model
{
    //
} 


Controller.php

  use App\Employee;								// model name
  public function store(Request $request)
    {
    	$this->validate($request, ['name' => 'required', 'gender' => 'required', 'age' => 'required', 'designation' => 'required']);
        $emp = new Employee();
        $emp->name = $request->input('name');
        $emp->gender = $request->input('gender');
        $emp->age = $request->input('age');
        $emp->designation = $request->input('designation');
        $emp->save();											// this function is used to insert data into database
        return  redirect('/Index')->with('insertMessage', 'Data has been inserted Successfully');			
    }

   public function Index(
   	return view('index');
   ) 

index.blade.php
	@if(session('insertMessage'))
	<h1>{{session('insertMessage')}}</h1>
	@endif

===========================================================================================================================================================
Update data in Database table in Laravel

model.php
	class Employee extends Model
	{
	    //
	} 

view.php
	<a href="{{url('/store',$emp->id)}}">Edit</a>

route.php
	Route::get('/edit/{id}', 'HomeController@edit');


controller.php
	 public function edit($id)
    {
        $emp = Employee::find($id);
        return view('Employee.edit')->with('emp', $emp);					
    }


edit.blade.php
	<form action="{{url('/update',$emp->id)}}" method="POST">
	    {{csrf_field()}}
	    <input type="text" name="name" id="" placeholder="Enter Name" value="{{$emp['name']}}"><br />
	    <select name="gender" id="">
	        <option value="">Seletc Gender</option>
	        <option value="male" @if($emp->gender=='male') selected @endif>Male</option>
	        <option value="female" @if($emp->gender=='female') selected @endif >Female</option>
	    </select><br />
	    <input type="number" name="age" id="" placeholder="Enter Age" value="{{$emp['age']}}"><br />
	    <input type="text" name="designation" id="" placeholder="Enter Designation" value="{{$emp->designation}}"><br />
	    <input type="submit" value="Submit">
	</form>   

	Route::post('/update/{id}', 'HomeController@update');


     public function update(Request $request, $id)
    {
        $emp = Employee::find($id);
        $emp->name = $request->input('name');
        $emp->gender = $request->input('gender');
        $emp->age = $request->input('age');
        $emp->designation = $request->input('designation
        $this->validate($request, ['name' => 'required', 'gender' => 'required', 'age' => 'required', 'designation' => 'required']);
        $emp->save();
        return redirect('/Index')->with('insertMessage', 'Data Updated successfully');
    }	

 =========================================================================================================================================================
 Detele data from the database in laravel

view.php

 <form action="{{url('/delete',$e->id)}}" method="post">
    {{csrf_field()}}
    <input type="submit" value="Delete">
</form>

route.php
	Route::post('/delete/{id}', 'HomeController@destroy');


controller.php
	public function destroy($id)
    {
        $emp = Employee::find($id);
        $emp->delete($id);
        return redirect('/Index')->with('insertMessage', 'Data Deleted successfully');
    }   


============================================================================================================================================================
Fluent String in laravel 

	all reated too string function and method chaining 

===========================================================================================================================================================
Laravel 8 Routing Importatnt update 
	
in this version Model are placed in the Model Folder 

there are 3 ways
1. 	route::get('/index','App\Http\Controllers\HomeController@Index');	

2. ->namespace($this->namespace) replace this by namespace('App\Http\Controllers') in the app > provider > RouteServiceProvider.php in the middleware('web') function 
			
3. In routes -> web.php

	use App\Http\Controllers\HomeController;					add this line on the top 
	Route::get('/Index',[HomeController::class,'index']);			



