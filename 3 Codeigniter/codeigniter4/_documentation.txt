#Introduction

    1. Codeigniter is an applicatino Development Framwork -a toolkit -for people who build websites using php 
    2. CI4 helps you to develop the projects in much faster 
    3. we can minimizing the amount of code needed for a given task 
    4. Exceptional performance, zero configuration , no need of command link knowledge and more  
    5. CI4 was completely re-written.

========================================================================================================================================= 
#Server Requirments 

    1. PHP version 7.2 newer is required, with the 'intl' extension and 'mbstring' extension installed 
    2. The following PHP extensions should be enabled on your server : php-json, php-mysqlnd,php xml
    3. To work with curlRequest you will need libcurl installed.

    Supported database by Codeigniter4 : 
        Mysql(5.1+) vai the mysqli Driver 
        postgreSQL via the postgre Driver 
        SQLite3 via the SQLite3 Driver.

==========================================================================================================================================
#installation

    1. Manually : Download => Extract => copy to server Location 
    2. Using Composer => composer create-project codeigniter4/appstarter <project-folder-name>

    Note : Composer installation is always recommended

======================================================================================================================================== 
Directory structure

    1. config           : Store The configuration Files 
    2. Controllers      : Controllers determine the program flow.
    3. Database         : Store the database migration and seeds files 
    4. Filters          : Strores Filters classes that can run before and after controller 
    5. Helpers          : Helpers store Collections of standalone functions 
    6. Language         : Multiple language support reads the language strings from here 
    7. Libraries        : Useful classes that don't fit in another category
    8. Models           : Models work with the database to respresent the business entities 
    9. Thirdparty       : Thirdparty Libraries that can be used in application 
    10. Views           : Views make up the HTML that is displayed to the client.
    11. System          : All Core files are avaialbe in this location, we can extend, create the class 
    12. Public          : Ci4 application will load from this location, we can also keep assets like css, js also here 
    13. Writable        : used to store log files, Caches files and updates 
    14. Test            : for unit testing , _support : contains mock files. 

    test folder is only use for local server. 

======================================================================================================================================== 
#MVC

    Its a design pattern which will organize the code like html code, database code, logical codes will be in different files 

    Models      : Models are always deals with the database operations like select, insert, delete, update etc....
    Views       : Views are always deals with the front end nothing but HTML , CSS 
    Controllers : The Heart of MVC architecture is controller, also called as TRAFFIC copy. Each and every request & response is going is handle by coontroller only. 
======================================================================================================================================== 
#URL 
 
    Query String Based Url 
        http://example.com/view.php?product=20

    Segment Based Url 
        http://example.com/view/product/20


    Url = Base URL + URI 

          example Base Url : http://example.com

          URI              : /view/product/20
                                1    2     3            // segments 
                                       
======================================================================================================================================== 
#Controller 

    A controller is a class file, which contains collection of the method and properties.
    Controller classes should be saved  in App/Controller Folder.
    The file must be be called 'Helloworld.php' with a capital 'H'. Controller class name MUST start with an uppercase letter and ONLY the first Charcter can be uppercase.
    Controller extends the parent controller class so that it can inherit all its method.

    namespace App\Controller;
    use Codeigniter\Controller;

    <?php namespace App\Controller;

    use Codeigniter\Controller;

    class Helloworld extends Controller
    {
        Public functions index(){
            echo "Hello World";
        }
        public function test($id, $name)
        {
            echo "Welcome to CI4 with $id and with $name";
        }
    }

    
    ?>     


    http://localhost/codeigniter4/ci4/public/welcome                         // to index
    http://localhost/codeigniter4/ci4/public/welcome/test/198/Deepinder      // to test   

    Note : Only public can be accessble but private and protected methods can be only use for internal functionalities. 

======================================================================================================================================== 
#Removing Public and index.php from URL 

    step 1 : Open App.php File from the location : ci4/app/Config/app.php
                    public $baseURL = 'http://localhost:8080' To
                    public $baseURL = 'http://localhost/codeigniter4/ci4/'
    
    step 2 : Public $uriProtocal = 'REQUEST_URL'; TO public $uriProtocal = 'PATH_INFO';

    step 3 : in public/Directory, copy index.php and .htaccess to your root project Directory.

    step 4 : Open index.php from project root Directory and edit the following path 

                $pathsPath = FCPATH.'../app/Config/Paths.php'; To
                $pathsPath = FCPATH.'app/Config/Paths.php'; To

======================================================================================================================================== 
#Remapping method calls in controller

    1. We know that the second segment of the URI typically determines which in the controller gets called.
    2. By using_remap() method, we can override the method behaviour
    3. if your controller a method named_remap(), it will always get called automatically regardless of what your URI contains 

     public function _remap($method, $parm1 = null, $parm2 = null)                  // setting by default values        
    {
        if (method_exists($this, $method)) {
            return $this->$method($parm1, $parm2);                                  // calling that function if exist.
        } else {
            throw \CodeIgniter\Exceptions\PageNotFoundException::forPageNotFound(); // calling the Exceptions when function not found.    
        }
    }                 
======================================================================================================================================== 
#Views in Controller4 

    1. View Components are used to build what is returned to the user.
    2. A view will always talk about front end which is displayed to the user.
    3. A view is simply a web page, or a page fregments like a header, footer, sidebar etc.
    4. we can also embed the views with other views also 
    5. A view will Never called Directly, The views are always loaded with the help of controller only. 

    Creating a View 

        Using your editor, create a file called BlogView.php and put this in it 

            Hmtl Code 

        Then save the file in your app/views Directory.

    #In controller file 

        public function blog()
        {
            return view('firstView');
        }       

======================================================================================================================================== 
#Passing Data into a view via Controller

    1. We know that, a view is always responsible for displaying the data.
    2. A view Always knows how to display the data beautiful, but it does not know what to display.
    3. by default a view will never get the data Directly from database 
    4. by using controller, we can pass data to views 
    5. Data is passed from the controller to the view by way of any array in the second parameter of the view function, here is example 
    6, Data format should be an Associated array like Show  

    public function blog()
    {
        $data = [
            'name' => 'Deepinder Singh',
            'phone' => '9915099247',
            'Address' => '51-d'
        ];
        return view('firstView', $data);
    }

======================================================================================================================================== 
#Html Table Class 
    
    Table Class Provides reuseable logic for our application Development.
    3. Ci4 is Providing some of the predefined Libraries like : session, email, validation, security and more....
    4. We can also create our own Libraries, based on our business requirment.
    
where to load the Libraries
    1. whatever the library we have( predefined or custome), we have to load them into our controller classes.
    2. if we want to use library methods, we have to create instance of the library.     method that enabled you to auto-generate HTML tables from arrays or database result sets 

    How to use 

    $table = new \CodeIgniter\View\Table();

      $data = [
             ['name', 'color', 'Size'],
             ['Deepinder', 'white', '175'],
             ['Simranjeet', 'Skin', '165'],
             ['Inderdeep', 'grey', '197']
         ];
        echo $table->generate($data);
        
                 //or

        $table->setHeading(['Name', 'City', 'State']);
        $table->addRow(['Deepinder', 'Patiala', 'Punjab']);
        $table->addRow(['Simranjeet', 'Patiala', 'Punjab']);
        echo $table->generate();

                //or

        $data = [
            ['name', 'color', 'Size'],
            ['Deepinder', 'white', '175'],
            ['Simranjeet', 'Skin', '165'],
            ['Inderdeep', 'grey', '197']
        ];

        $template = [
            'table_open'         => '<table border="4" cellpadding="4" cellspacing="0">',

            'thead_open'         => '<thead>',
            'thead_close'        => '</thead>',

            'heading_row_start'  => '<tr>',
            'heading_row_end'    => '</tr>',
            'heading_cell_start' => '<th>',
            'heading_cell_end'   => '</th>',

            'tfoot_open'         => '<tfoot>',
            'tfoot_close'        => '</tfoot>',

            'footing_row_start'  => '<tr>',
            'footing_row_end'    => '</tr>',
            'footing_cell_start' => '<td>',
            'footing_cell_end'   => '</td>',

            'tbody_open'         => '<tbody>',
            'tbody_close'        => '</tbody>',

            'row_start'          => '<tr>',
            'row_end'            => '</tr>',
            'cell_start'         => '<td>',
            'cell_end'           => '</td>',

            'row_alt_start'      => '<tr>',
            'row_alt_end'        => '</tr>',
            'cell_alt_start'     => '<td>',
            'cell_alt_end'       => '</td>',

            'table_close'        => '</table>'
        ];


        $table->setTemplate($template);
        echo  $table->generate($data);

======================================================================================================================================== 
#View Parser class  

    1. The parser Class Processes "PHP/HTML scripts" stored in the application's view path. These scrpts can not contains any PHP.
    2. The view parser can perform simple test substitution for pseudo-variables contained within your view files.
    3. Pseudo-variables are not extracted into PHP variables; instead their value is accessed through the Pseudo-variables syntax, where its name is referenced inside braces.

        {some_variable}   

    public function blog()
    {
        $parser = \Config\Services::parser();
        $data = [
            'name' => 'Deepinder',
            'phone' => '9915099247',
            'class' => 'Cse',
            'subject_list_loop' => [
                ['subject' => 'hindi', 'marks' => 20],
                ['subject' => 'Punjabi', 'marks' => 33],
                ['subject' => 'English', 'marks' => 90],
            ],
            'status' => true
        ];

        return $parser->setData($data)->render('firstView');
    }            

    #view file 

         <h1>This is First Page</h1>
        <h1>{name}</h1>

        {subject_list_loop}
        <h1>{subject} :: {marks}</h1>
        {/subject_list_loop}

        {if $status}
        <p>Yes values is true</p>
        {endif}

======================================================================================================================================== 
#View Filters 

    1. We can apply filters to the substituted variables modify the way of presenting data.
    2. we can apply one or more filters on a {pseudo-variable}

        {pseudo-variable|filter1|filter2|filter3|.....} 


    #Controller code 

        public function parsedata()
        {
            $parser = \Config\Services::parser();
            $data = [
                'heading' => 'This is first page',
                'name' => 'Deepinder singh',
                'dob' => '24-11-1993 21:23:23',
                'salary' => '37500',
                'gig' => '3.35',
                'description' => 'Hey my name is deepinder singh i am a webdeveloper.'
            ];

            return $parser->setData($data)->render('parseview');
        }
    
    #view Code     

        <h1>{heading|upper}</h1>
        <h2>{name|lower}</h2>
        <h3>{dob|date(Y-m-d)}</h3>
        <h4>{salary|local_currency(INR)}</h4>
        <h5>{gig|round}</h5>
        <h6>{description|limit_chars(8)}</h6>

======================================================================================================================================== 
#Calling Fillter with constructor 

    public $parseObject;

    public function __construct()
    {
        $this->parseObject = \Config\Services::parser();
    }
    public function blog()
    {
        return $this->parseObject->setData($data)->render('firstView');
    }
    public function parsedata()
    {
        return $this->parseObject->setData($data)->render('parseview');
    }

======================================================================================================================================== 
#Custom View Filters

    1. We can create our own filters by editing app/config/view.php and adding new entries to the $filter array. 
    2. Each key is the name of the filter is called by in the view, and its value is any valid PHP callable. 

           public $filters = [
                'myFilter' => '\CodeIgniter\View\Filters::myFilterOne',
            ];

    Example : 

    1. app/config/view.php

        public $filters = [
            'hideNumbers' => '\CodeIgniter\View\Filters::hideNumbers',
        ];        

    2. vendor/Codeigniter/View/Filters.php

        Add below Code 

        public static function hideNumbers(string $value, int $display = 4): string
        {
            $txt = '';
            for ($i = 0; $i < strlen($value); $i++) {
                if ($i < $display) {
                    $txt .= $value[$i];
                } else {
                    $txt .= "X";
                }
            }
            return $txt;
        }

    3. In View File 

         <h2>{phone|hideNumbers}</h2>    

======================================================================================================================================== 
#View Layouts/#Template Engine   

    1. CodeIgniter4 support a simple, yet very flexible, layout System to create website applicatins.
    2. We can create layouts like: one-column, two-column, blog archive pages, left-sidebar, right sidebar, widgets and more. 
    3. a Layout nothing but a view.
    4. We can also restrict the content from one page to another page.
    5. A layout will decide look and feel of our website.
    6. we can reuse each and every layout in other views.

    #various Methods 

        1. renderSection('content')      :: this method acts as a placeholder for content.
        2. extend('default')             
        3. section('content')
        4. endSection('content')
        5. include()                     :: to include the files


        1. Create a layout Folder -> and also create file main.php

            add below code 

                <!DOCTYPE html>
                    <html lang="en">

                    <head>
                        <meta charset="UTF-8">
                        <meta http-equiv="X-UA-Compatible" content="IE=edge">
                        <meta name="viewport" content="width=device-width, initial-scale=1.0">
                        <title><?= $heading ?></title>
                    </head>

                    <body>
                        <h1><?= $header ?></h1>
                        <?= $this->renderSection('content'); ?>

                        <?= $this->renderSection('asideMenu'); ?>
                        <h1><?= $footer ?></h1>
                    </body>

                    </html>

        2. Controller file 

              public function home()
                {
                    $data = [
                        'heading' => 'Home Page',
                        'header' => 'This is Home Page Header',
                        'body' => 'This is Home Page Body',
                        'footer' => 'This is Home Page Footer'
                    ];
                    return view('home', $data);
                }

                public function about()
                {
                    $data = [
                        'heading' => 'About Page',
                        'header' => 'This is About Page Header',
                        'body' => 'This is About Page Body',
                        'footer' => 'This is About Page Footer'
                    ];
                    return view('about', $data);
                }            

        3. about.php

            <?= $this->extend('layouts/main'); ?>
            <?= $this->section('content'); ?>
            <h2><?= $body; ?></h2>
            <?= $this->endSection(); ?>


            <?= $this->section('asideMenu'); ?>
            <p>This is side Menu which is only accessble in About page only </p>

            <?= $this->include('widgets/sidebar'); ?>

            <?= $this->endSection(); ?>

        4. create folder widgets -> create a file sidebar.php

            <h2><i>This is Itallic text and used for widgets</i></h2> 

        5. home.php

            <?= $this->extend('layouts/main'); ?>
            <?= $this->section('content'); ?>
            <h2><?= $body ?></h2>
            <?= $this->endSection(); ?>    

        http://localhost/codeigniter4/ci4/welcome/home    
        http://localhost/codeigniter4/ci4/welcome/about

======================================================================================================================================== 
#URI Routing 

    1. Routing rules are defined in the app/config/Routes.php file 
    2. We know that, there is a one-to-one relationship between a url string and its corresponding controller class/method
                http::/www.example.com/class/method/id

    3. Routing rules can be specified using placeholdes or regular Expressions. A typical route might look something like this: 

                $routes->add('about','Home::about');
                $routes->add('training','Home::training');


        Example :: $routes->add('websiteabout', 'Welcome::about');

        http://localhost/codeigniter4/ci4/websiteabout      

    4. To create Multiple route for single method

        in  app/config/Routes.php file 
        
        $myRoutes = [];
        $myRoutes['websiteabout'] = 'Welcome::about';
        $myRoutes['myabout'] = 'Welcome::about';
        $myRoutes['newabout'] = 'Welcome::about';
        $myRoutes['goodabout'] = 'Welcome::about';
        $myRoutes['okabout'] = 'Welcome::about';
        $routes->map($myRoutes);      


     5. Validation on Routes 

        #Routes Files
            $myRoutes = [];
            $myRoutes['sroute/(:alpha)/(:alpha)'] = 'Welcome::stringRoute/$1/$2';
            $routes->map($myRoutes);   


        #controller File    
            public function stringRoute($name, $class)
            {

                echo $name . '  :  ' . $class;
                exit;
            }

        #List

            1. (:any)       :: will match all Charcters from the point to the end of the URI. This my include Multiple URI Segment
            2. (:segment)   :: will match any Charcter except for a forward slash(/) restricting the result to a single segment.
            3. (:num)       :: will match any integer
            4. (:alpha)     :: will match any string of alphabetic Charcters
            5. (:aplhanum)  :: will match any string of alphabetic Charcters or integer, or any combination of the two
            6. (:alpha)     :: is the same as (:segment), but can be used to easily see which routes use hashed ids


        Note : Callback Function 

                function test($name){
                        $name();
                    }
                test(function(){echo "this is call back function";});
     
     6. set disable all direct methods of controller            
        
            $routes->setAutoRoute(false);           // when you working on large websites set false, user cannot access direct methods 

            $routes->setAutoRoute(true);           // user can access direct methods 
     
     7. Create Callback functions in the routes

        $routes->get('help',function(){
            echo "This is callback Function and written in the Routes function";
        }); 

     8. Create Custome 404 Error

        #create a file in the view/errors folder -> custom_error.php
            
            add below Code 

            <!DOCTYPE html>
            <html lang="en">

            <head>
                <meta charset="UTF-8">
                <meta http-equiv="X-UA-Compatible" content="IE=edge">
                <meta name="viewport" content="width=device-width, initial-scale=1.0">
                <title>Document</title>
            </head>

            <body>
                <h1>404 Error please try later</h1>
            </body>

            </html>


        #in  app/config/Routes.php file 
        
            $routes->set404Override(function(){
                echo view('errors/custom_error');
            });           

        http://localhost/codeigniter4/ci4/dlkafldkfj


======================================================================================================================================== 
#Database configuration

    we can connect to database in two ways 

    1. By using Database.php
    2. by using .env file 


    1. DB configuration using Database.php

        a. Open app/Config/Database.php

            1. Please find the array public $default = [] in database class. and define your db details 
            2. Loading DB Connection Controller

                $db = \Config\Database::connect();

                Example : 

                    In controller file 
                    
                    public function databaseConnect()
                    {
                        $db = \Config\Database::connect();                      // by default its parameter is value default
                        $result = $db->query('SELECT * FROM user ORDER BY full_name ASC')->getResult();
                        echo "<pre>";
                        print_r($result);
                    }

             Note :  1. getResult           // for objects 
                     2. getResultArray      // for arrays 
                     3. getrRow             // for single object    
                     4. getrRowArray        // for single Array             
            
            3. Loading Multiple Databases

                $db1 = \Config\Database::connect('group_one');
                $db2 = \Config\Database::connect('group_two');


                  Example

                     public $default = [
                        'DSN'      => '',
                        'hostname' => 'localhost',
                        'username' => 'root',
                        'password' => '',
                        'database' => 'ci4',
                        'DBDriver' => 'MySQLi',
                        'DBPrefix' => '',
                        'pConnect' => false,
                        'DBDebug'  => (ENVIRONMENT !== 'production'),
                        'charset'  => 'utf8',
                        'DBCollat' => 'utf8_general_ci',
                        'swapPre'  => '',
                        'encrypt'  => false,
                        'compress' => false,
                        'strictOn' => false,
                        'failover' => [],
                        'port'     => 3306,
                    ];

                    public $seconddb = [
                        'DSN'      => '',
                        'hostname' => 'localhost',
                        'username' => 'root',
                        'password' => '',
                        'database' => 'radzi_database',
                        'DBDriver' => 'MySQLi',
                        'DBPrefix' => '',
                        'pConnect' => false,
                        'DBDebug'  => (ENVIRONMENT !== 'production'),
                        'charset'  => 'utf8',
                        'DBCollat' => 'utf8_general_ci',
                        'swapPre'  => '',
                        'encrypt'  => false,
                        'compress' => false,
                        'strictOn' => false,
                        'failover' => [],
                        'port'     => 3306,
                    ];  
                
                public function databaseConnect()
                {
                    $db1 = \Config\Database::connect();
                    $db2 = \Config\Database::connect('seconddb');
                    $result = $db1->query('SELECT * FROM user ORDER BY full_name ASC')->getResult();
                    echo "<pre>";
                    print_r($result);

                    $result = $db2->query('SELECT * FROM user ORDER BY full_name ASC')->getResult();
                    echo "<pre>";
                    print_r($result);
                }    

    2. DB configuration using .env file

        1. Open env file from your project root
        2. Rename it as .env 

                database.default.username = root
                database.default.password = 
                database.default.database = ci4
        
        3. Loading Databse
            
                $db1 = \Config\Database::connect();

        4. Loading Multiple Databases

                $db1 = \Config\Database::connect('group_one');
                $db2 = \Config\Database::connect('group_two');  


           All same above Examples      

======================================================================================================================================== 
#Model

    What is a Model ? 
        1. A Model is nothing but a PHP class file, which contain collection of methods to intract with a specific table in your database.
        2. We know that, As per MVC, Model will always communicate with our DB. Model is responsible to get data from Databse.

        3.  Models are typically Stored in the app/Models Directory.
        4. Every Model class should be under the namespace called : namespace\App\Model
        5. Ci4 is Providing Helpers method to work with database.

        6. Every model Class should extends with CodeIgniter\Model
        7. Every Model class should stored in App/Models Directory.

        <?php
            namespace App\Models;

            use Codeigniter\Model;

            Class UserModel extends Model {
                // some Methods
            }
        ?>

        8. we can access models within our Controller by Creating an instance of a model class 

            $userModel = new \App\Models\UserModel();
            $data['users'] = $userModel->methodName();

        9. Passing data to view 

            return view ('dataview',$data);


         Example 

        #add code in model file 

            <?php

            namespace App\Models;

            use CodeIgniter\Model;

            class UserModel extends Model
            {
                public function getUserData()
                {
                    $subjects = [
                        ['subjectName' => 'html', 'marks' => '30'],
                        ['subjectName' => 'javascript', 'marks' => '90'],
                        ['subjectName' => 'CSS', 'marks' => '60'],
                        ['subjectName' => 'PHP', 'marks' => '80'],
                        ['subjectName' => 'Database', 'marks' => '70']
                    ];
                    return $subjects;
                }
            } 

        #add code in controller

            public function modelData()
            {
                $model = new \App\Models\UserModel();
                $data = $model->getUserData();
                echo "<pre>";
                print_r($data);
            }   

    Note : 1.  Model class extend basemodel class. In this class Every rule is written for tables like timestamp = off or on, update on/off etc. You also find some other features like before insertion or after insertion etc using callback functions. 
           2. You can use model same as like laravel by creating different-different model with adding features of basemodel. then we can perform save quries like save, find, delete functions Directly. 

======================================================================================================================================== 
#Reading Data from Databse

    1. Read Data from database bu using model 
    2. Load the model into controller, create model object, call the model methods by using model instance.
    3. Render the data to view with the help of controller.

    #Create this file in the Model
        public function getDatabaseData()
        {
            $db1 = \Config\Database::connect();
            $result = $db1->query('SELECT * FROM user ORDER BY full_name ASC')->getResult();
            if (count($result) > 0) {
                return $result;
            } else {
                return [];
            }
        }

   #create this file in the Controller
    
        public function modelData()
        {
            $model = new \App\Models\UserModel();
            $data = $model->getDatabaseData();
            echo "<pre>";
            print_r($data);
        }

======================================================================================================================================== 
#Libraries 

    What is a Library ? 

        1. A Library is a Class which contains collection of method and properties. 
        2. A Library class will always Provides reuseable logic for our application Development.
        3. Ci4 is Providing some of the predefined Libraries like : session, email, validation, security and more....
        4. We can also create our own Libraries, based on our business requirment.

        5. All the custom Libraries are placed inside App/Libraries folder
        6. Custom Libraries are imported by using namespace.

    where to load the Libraries
        1. whatever the library we have( predefined or custome), we have to load them into our controller classes.
        2. if we want to use library methods, we have to create instance of the library.     


        Example

        #add File in the app/library -> testlibrary.php

            <?php

            namespace App\Libraries;

            class TestLibrary
            {
                public function getData()
                {
                    return 'Welcome to the test library';
                }
            }

        #add Codes in Controller

            
            use App\Libraries\TestLibrary;  

             public function myLibrary()
            {
                $testObject = new TestLibrary();
                echo $testObject->getData();
            }  
======================================================================================================================================== 
#Email Library 
    
    1. Configure SMTP preferences in the app/Config/Email.php file.
    2. After preferences completed, load email Service into your controller.

        $email = \Config\Services::email();

        $email->setFrom('your@example.com','Your Name');
        $email->setto('to@example.com');
        $email->setSubject('Email Test'); 
        $email->setMessge('Testing the email class.');
        $email->send();   



        Example : 

        1. Add Below Code in app/Config/Email.php file 

            public $protocol = 'smtp';
            public $SMTPHost = "smtp.gmail.com";
            public $SMTPUser = "deepinder999@gmail.com";
            public $SMTPPass = "setpassword here";
            public $SMTPCrypto = 'ssl';
            public $SMTPPort = 465;
            public $SMTPTimeout = 60;

        2. Set less secure connection in gmail account 

        3. Add below Code in the Controller and placed a file into the public/assests folder

            public function sendMail()
            {
                $email = \Config\Services::email();

                $email->setFrom('deepinder999@gmail.com', 'Deepinder singh');
                $email->setto('deepinder000@gmail.com');
                // $email->setBCC('deepinder999@gmail.com');
                // $email->setCC('deepinder999@gmail.com');
                $email->setSubject('Email Test');
                $email->setMessage('Testing the email class.');
                $filepath = 'public/assests/fiverr.jpg';
                $email->attach($filepath);
                if ($email->send()) {
                    echo "sent";
                } else {
                    echo "<pre>";
                    $data = $email->printDebugger(['headers']);
                    print_r($data);
                }
            } 

======================================================================================================================================== 
#Helper 

    What is Helper?
        A Helper is a group of function under a specific category. Helper as the name suggests, help you with task while developing web application.

    There are some predefined helpers: 
        Url Helper      : that assist in creating links.
        Form Helper     : that help you create form elements 
        Cookie Helper   : set and read cookies 
        File Helper     : help you deal with files 
        and more .... 

    All the Helpers are avaialbe from the following locations app/Helpers (user defined) and system/Helper (pre-defined).

    Extending Helpers : it is also possible to extend the predefined helpers create a file in your app/Helpers/ Folder with an identical name to the existing Helper. For Example, to extend the native Array Helper you'll create a file named app/Helpres/array_helper.php 

    1. Add these codes in the controller
    
        public function myhelper()
        {
            helper(['form', 'html', 'cookie', 'array']);

            echo form_open();
            echo form_input('firstname', 'Deepinder singh');
            echo form_close();
            echo "<br/>";
            echo base_url();
            echo "<br/>";
            echo current_url();
            echo "<br/>";
            echo getRandom([12, 45, 67, 88, 33, 22]);
        }
    
    2. Extending the helper (add some functionalities in existing helper)

        add file into to the app/Helper/ -> Array_helper.php

            <?php
                function getRandom($arr)
                {
                    shuffle($arr);
                    return end($arr);
                }

======================================================================================================================================== 
#Form Validation

    1. CodeIgniter 4 Provides a library to validate the data. This class will help us minimize the amount of code that we will write 
    2. Load the view into controller
    3. Once form submitted, validate the form by using validate() method
    4. validate() : by using this method we can check the validation rules. if all the rules are valid, this method returns true.
    5. validate() method expects a parameter with set of rules to be applied on the form. 

        $rules=[
                'username' => 'required',
                'email'    => 'required|valid_email',
                'mobile'   => 'required' 
          ];
          
          $this->validate($rules);



        1. Create a method in controller 

             public function myform()
            {
                  $data = [];
                 $data['validation'] = null;
                if (isset($_POST['send']) && $this->request->getMethod() == 'post') {
                    // $rules = [
                    //     'username' => 'required',
                    //     'email' => 'required|valid_email',
                    //     'phone_number' => 'required|numeric|exact_length[10]',

                    // ];

                    $rules = [
                        'username' =>
                        [
                            'rules' => 'required',
                            'errors' => [
                                'required' => 'Please Enter Username',
                            ]
                        ],
                        'email' => [
                            'rules' => 'required|valid_email',
                            'errors' => [
                                'required' => 'Please Enter Email id',
                                'valid_email' => 'Please Enter Valid Email id'
                            ]
                        ],
                        'phone_number' => [
                            'rules' => 'required|numeric|exact_length[10]',
                            'errors' => [
                                'required' => 'Please Enter Phone',
                                'numeric' => '{value} Should be Numbers',
                                'exact_length' => '{value} Should be Only 10 Characters ',
                            ]
                        ],
                    ];



                    if ($this->validate($rules)) {
                        echo "From submited Successfully";
                    } else {
                        $data['validation'] = $this->validator;
                    }
                }

                helper(['url', 'form', 'form_helper']);
                return view('my_form', $data);
            } 

        2. Create a Helper -> Form_Helper.php

            use phpDocumentor\Reflection\PseudoTypes\False_;

            function display_error($validation, $field)
            {
                if (isset($validation)) {
                    if ($validation->hasError($field)) {
                        return $validation->getError($field);
                    } else {
                        return false;
                    }
                }
            }

        3. Create a View File 

            <h1>hello</h1>
            <table>
                <?php if (isset($validation)) : ?>
                    <?= $validation->listErrors(); ?>
                <?php endif; ?>
                <?= form_open('welcome/myform') ?>
                <tr>
                    <td>Name</td>
                    <td>
                        <?= form_input(['name' => 'username', 'placeholder' => 'Enter Username', 'value' => set_value('username')]); ?>
                        <?= display_error($validation, 'username') ?>
                    </td>
                </tr>
                <tr>
                    <td>Email</td>
                    <td>
                        <?= form_input(['name' => 'email', 'placeholder' => 'Enter Email Id', 'value' => set_value('email')]); ?>
                        <?= display_error($validation, 'email') ?>
                    </td>
                </tr>
                <tr>
                    <td>Phone Number</td>
                    <td>
                        <?= form_input(['name' => 'phone_number', 'placeholder' => 'Enter Phone Number', 'value' => set_value('phone_number')]); ?>
                        <?= display_error($validation, 'phone_number') ?>
                    </td>
                </tr>
                <tr>
                    <td></td>
                    <td>
                        <?= form_submit(['name' => 'send', 'value' => 'Submit']); ?>
                    </td>
                </tr>
            </table>    
======================================================================================================================================== 
#Enable Development ENVIRONMENT

    1. open .evn file 

            #CI_ENVIRONMENT = production

    2. Remove # in front of CI_ENVIRONMENT and assign the value as development 
        
            CI_ENVIRONMENT = development; 

======================================================================================================================================== 
#User Management Module 

    1. Register with account activation 
    2. user login 
    3. Social Logins 
           a. Gmail 
           b. facebook

    4. Forget password 
    5. Reset Passsword         


======================================================================================================================================== 
#Spark 

    1. php spark list            :: it will return all the list of commands 
    2. php spark namespaces      :: respresent the namespace of the each classes.   
        +-------------+-----------------------------------------------------------------------+--------+
        | Namespace   | Path                                                                  | Found? |
        +-------------+-----------------------------------------------------------------------+--------+
        | CodeIgniter | C:\xampp\htdocs\codeigniter4\ci4\vendor\codeigniter4\framework\system | Yes    |
        | App         | C:\xampp\htdocs\codeigniter4\ci4\app                                  | Yes    |
        | Config      | C:\xampp\htdocs\codeigniter4\ci4\app\Config                           | Yes    |
        +-------------+-----------------------------------------------------------------------+--------+

    3. php spark routes                 :: return all the created routes in ci4
    4. php spark serve                  :: Launches the CodeIgniter PHP-Development Server.    
    5. php spark session:migration      :: create a ci_session Table in Database.
    6. php spark migrate                :: Locates and runs all new migrations against the database.
    7. php spark help migrate:create    :: return all the options of create migration  
    8. php spark migrate:rollback       :: Runs the "down" method for all migrations in the last batch.  
    9. php spark migrate:refresh        :: Does a rollback followed by a latest to refresh the current state of the database.  
    10.php spark migrate::status        :: Displays a list of all migrations and whether they've been run or not. 

======================================================================================================================================== 
#Query Builders

        1. SELECT * FROM user_table
           return  $db->table('user_table')->get()->getResultArray();

         2. SELECT * FROM user_table where id = 1
           return  $db->table('user_table')->where(['id'=>1])->get()->getResultArray();   

======================================================================================================================================== 
#Migrations Commands 

    1. Create Migrations  
        a. php spark migrate:create my_table 
        b. now copy paste values from the table 
        c. then exceute the value using migrate command

     Note : you can search various commands in the migration    