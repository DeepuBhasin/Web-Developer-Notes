command:

							folder Name			additional command 
	npx create-react-app react-typescript-demo --template typescript

extension : 
		
		.tsx

==================================================================================================================================
@type vs interface
	
	type use for props
	interface use for libraries

==================================================================================================================================
@basic of all Types
	
	let name : string;                // string type
	
	let age : number;                 // number type
	
	let isStudent : boolean;          // boolean type
	
	let metric : boolean | string;    // boolean or string type is called Union Type
	
	//let person = Object;            // Object type
	        // OR
	type Person = {                   // Object Type (with starting word is type) : recomended way
	  name : string,
	  age : number,
	  adult? : boolean                // this property is optional
	}

	let person : Person;              // assigning Object type to variable
	person = {                        
	  name : 'Deep',
	  age : 29
	}


	let personList:Person[];          // Person Object type with array type

	interface schoolClass {         // same like type 
	  ClassName : string,
	  sectionName : number
	}

	let school : schoolClass;



	let sum : Function;               // Function type

	let personName : any;             // any type
	let projectName : unknown;        // unknown type

	let printName : (name : string) => never
	//return type never               // it will not return any thing
	// return type void               // it will return undefined 

	// difference bewteen interface and type 

	type aa = {
	  a: string,
	  b : boolean
	}

	type bb = aa & {                  // extending type aa
	  c : string,
	  d : boolean 
	}

	let cc : bb;                      // assigning type bb

	interface TV extends aa {         // interface extending type 
	  name : string
	}
	interface Guy {
	  name : string
	  age : number
	}

	type dd = Guy & {                 // type extending Gut interface
	  e : string
	}

	interface Guy2 extends Guy {      // extending interface 
	  phone : string
	  class : string
	}


	class Test implements Guy2 {      // implementning interface

	}
================================================================================================================================
@Array 
	
	1. let hobbies : string[];           // array with string type
	
	2. let role : [number, string];      // tuple fixed : [this element will be number , this element will be string]

	3. let classSection : Array <number | string>;
		
		classSection = [1,2,3,4,5,5, 'deepu'];

=================================================================================================================================
@interface with object 
	
	interface userInfo {
	    firstName : string
	    lastName : string
	    userId : number
	    status : boolean
	    mobile : number
	    fullname : ()=> string 
	}

	var obj : userInfo = {
	    firstName : 'Deepinder',
	    lastName : 'Singh',
	    userId : 12,
	    status: true,
	    mobile : 9915099247,
	    fullname: ()=> 'Deepinder Singh' 
	}

==================================================================================================================================
@class in type script
	
	class Student {
	    public name : string;
	    private class : string;
	    protected phone : string;

	    constructor(studentName : string, stduentClass : string, studentPhone : string) {
	        this.name = studentName;
	        this.class = stduentClass;
	        this.phone = studentPhone;
	    }
	    getName() : string {
	        return this.name;
	    }
	    getClass(): string {
	        return this.class;
	    }
	    getPhone() : string {
	        return this.phone;
	    }
	}

	let obj = new Student('Deepinder', 'Degere', '9915099247');

	console.log(obj.getName());

	



==================================================================================================================================
@Typing Props
	
	type GreetProps = {
		name : string
		messageCount : number
		isLoogedIn : boolean
	}

==================================================================================================================================
@Basic Props

	
	1. Number + string + boolean + Array + Object
	---------------------------------------------

	#App.tsx
	--------
	
		import './App.css';
		import Greet from './components/Greet';
		import { Person } from './components/Person';
		import { PersonList } from './components/PersonList';

		function App() {

		  const personName = {
		    first : 'Bruce',
		    last : 'Wayan'
		  }

		  const nameList = [
		    {
		      first: 'Bruce',
		      last : 'Wayan'
		    },
		    {
		      first: 'clark',
		      last : 'Kent'
		    },
		    {
		      first: 'Princess',
		      last : 'Diana'
		    },

		  ]
		  
		  return (
		    <div className="App">
		        <Greet name="Deepu" isLoggedIn={true} messageCount={2}/>  		// sending string + boolean + number
		        <Person name={personName}/>    									// sending object
		        <PersonList name={nameList}/>									// sending Array
		    </div>
		  );
		}

		export default App;

	#Greet.tsx (string + boolean + number)
	--------------------------------------

		type Greetprops = {
		    name : String 										// receiving string
		    isLoggedIn : boolean								// receiving boolean		
		    messageCount : Number 								// receiving number	
		}

		const Greet = (props: Greetprops) => {
		    return (
		        <div>
		            {props.isLoggedIn ? `Welcome ${props.name} ! you have ${props.messageCount} unread messages` : `Hello Guest`}
		        </div>
		    )
		}

		export default Greet;	

			


	#Person.tsx (object)
	--------------------

		type PersonProps = {													// receiving  Object
		    name : {
		        first : string
		        last : string
		    }
		}

		export const Person = (props: PersonProps) => {
		    return <div>{props.name.first} {props.name.last}</div>
		}	

	

	#PersonList.tsx (Array)
	-----------------------

		type PersonListProps = {												// receving Array
		  name: {
		    first: string,
		    last: string,
		  }[],
		};

		export const PersonList = (props: PersonListProps) => {
		  return (
		    <div>
		      {props.name.map((item) => {
		        return (
		          <h1 key={item.first}>
		            {item.first} {item.last}
		          </h1>
		        );
		      })}
		    </div>
		  );
		};
	
==================================================================================================================================
@Advance Props	
	
	App.tsx
	-------

		import './App.css';
		import InputField from './components/inputField';
		let lists  = [																// object included in array
		  {name : 'test', email : 'test@gmail.com'},
		  {name : 'testing', email : 'testing@gmail.com'}
		]
		const App: React.FC = () => {
		  return (
		    <div className="App">
		        <span className='heading'>Taskify</span>
		        <InputField firstName='dp' styles={{color : 'red'}}>
		            <h2>Hello World</h2>
		          </InputField>  
		    </div>
		  );
		}

		export default App;

	
	inputFiled.tsx
	--------------
	import { CSSProperties } from "react"

	type Person = {
	  firstName : 'deepinder' | 'dp' | 'deepu'                      	// receiving fixed values 
	  lastName? : string 											// optional with string value		
	  age? : number 												// optional with string value	
	  children : React.ReactNode									// receiving children
	  styles : CSSProperties										// receving css properties
	  lists : {														// receiving object in array 
	    name : string,
	    email : string
	  }[]
	}


	const InputField = (props : Person) => {
	  return (
	    <div>
	      <h2 style={props.styles}>{props.firstName}</h2>
	       {props.children} 
	      </div>
	  )
	}

	export default InputField	
=====================================================================================================================================
@Events

import React, { useState } from "react";
import "./App.css";
const App = () => {
  const [firstName, setFirstName ] = useState('');
  const handleEvent = (event:React.MouseEvent<HTMLButtonElement>) => {					// mouse event with button element							
    console.log(event.target);
  }

  const handleInputEvent = (event:React.ChangeEvent<HTMLInputElement>) => {				// change event with input element
   let firstName = event.target.value
    setFirstName(firstName);
    console.log(firstName);
  }
  return (
    <div className="App">
        <button onClick={handleEvent}>Click Me</button><br/>
        <input type="text" name="firstName" id="firstName" onChange={handleInputEvent} value={firstName} />
    </div>
  )
}

export default App;

=====================================================================================================================================
@Events as props
	
	App.js 
	------

		import "./App.css";
		import InputField from "./components/inputField";
		const App = () => {
		    const handleEvent = (event:React.MouseEvent<HTMLButtonElement>) => {
		    console.log(event.target);
		  }
		  return (
		    <div className="App">
		        <InputField event={handleEvent} />
		        
		    </div>
		  )
		}

		export default App;

	
	inputField.js
	-------------

		type Person = {
		  event : (event:React.MouseEvent<HTMLButtonElement>) => void					// sending props as event with void return
		}

		const InputField = (props : Person) => {
		  return (
		    <div>
		      <button onClick={props.event}>Click me</button>
		    </div>
		  )
		}

		export default InputField
=====================================================================================================================================
@Props type and tips
	
	1. destructurs props
	2. export type (when you dealing with lots of type at same time)

	person.type.tsx
	---------------

		export type name = {								// can export separate properties (its increase reusability)
		    firstName : string
		    lastName : string
		}

		export type PersonInfo = {
		    name : name 									// can use name type as property
		}

	App.tsx
	-------

		import "./App.css";
		import InputField from "./components/inputField";

		const App = () =>{ 
		  return (
		    <div className="App">
		      <InputField name={{firstName : 'Deepinder', lastName : 'Singh'}}/>
		    </div>
		  )
		}

		export default App;	

	inputField.tsx
	--------------

		import {PersonInfo} from './person.type'

		const InputField = ({name}: PersonInfo) => {
		  return (
		    <div>
		      <h1>{name.firstName}</h1>
		      <h1>{name.lastName}</h1>
		    </div>
		  )
		}

		export default InputField	

=====================================================================================================================================
@useState with interface or type

	import { useState } from "react";
	import "./App.css";

	// interface userObject {
	//   firstName : string,
	//   lastName : string
	// }

	// OR

	type userObject = {
	  firstName : string,
	  lastName : string
	}

	const App = () =>{ 
	  let [user,setUserName] = useState<userObject>({
	    firstName : 'Deepinder',
	    lastName : 'singh'
	  });
	  return (
	    <div className="App">
	        {user.firstName}

	    </div>
	  )
	}

	export default App;


