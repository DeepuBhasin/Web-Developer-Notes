#Download Projetc 
    composer.phar create-project yiisoft/yii2-app-basic basic

 # php yii              :: will show all the commands 

 #php serve             :: will show the running port
 ============================================================================================================================================
 #Controller 
   
   1. Directory Structure 

        basic -> Controller -> FilenameController.php
    
   2. Code 
     
        namespace app\controllers;

        use yii\web\Controller;


        class FirstController extends Controller
        {
            public function actionIndex()
            {
                echo "testing";
            }
        }

    3. Calling Controller

                                          ControllerName/Function name
        http://localhost/yii/basic/web/index.php?r=first/index

        a. actionDemo               :: demo
        b. actionDemoFirst          :: demo-first
        c. actionDemo_second        :: demo_second    



    Note : 1. Function Name allways start wih 'action' keyword 
           2. Function name should be capital but in address bar it should be lower case to call that function
           3. Controller file name always end with 'Controller' keyword. 
           4. DemoTest means demo-test in every case like files, functions etc 

 ============================================================================================================================================
 #View
    1. Directory Structure
        basic -> Views -> FolderName -> viewFiles

    Note : ControllerName and Folder name in View should be same exmaple 
            ControllerName      -> FirstController
            ViewFolderName      -> First

            Store all the files in the first folder which belongs to FirstController only.


    2. Controller File Code 

        public function actionTest(){

             $this->layout = false;                              // to stop by default layout (optional) 
                    or 
            return $this->renderPartial('index');            // to stop by default layout (optional) 

            return $this->render('index');
            
        }

    3. View Folder
        View Folder -> First (folder) -> index.php 

 ============================================================================================================================================
 #Change Layout 

 	1. Folder and File 
 		basic -> view -> create New Folder (layouts2) -> create file (main2.php)

 		basic Code(below) 

 		<?php
			use yii\helpers\Html;
			use app\assets\AppAsset;

			AppAsset::register($this);
			?>
			<?php $this->beginPage() ?>																// Starting of html Page 
			    <!DOCTYPE html>
			    <html lang="<?= Yii::$app->language ?>">
			    <head>
			        <meta charset="<?= Yii::$app->charset ?>">
			        <meta http-equiv="X-UA-Compatible" content="IE=edge">
			        <meta name="viewport" content="width=device-width, initial-scale=1">
			        <?php $this->registerCsrfMetaTags() ?>
			        <title><?= Html::encode($this->title) ?></title>								// Print title , which will comes from index or other page
			        <?php $this->head() ?>															// Printing of All the Heads
			    </head>
			    <body>
			    <?php $this->beginBody() ?>															// Starting of body 	

			        <div class="wrap">
			            <div class="container">
			                <h1>This is my another main layout Page</h1>  
			            <?= $content ?>
			            </div>
			        </div>

			        <footer class="footer">
			            <div class="container">
			                <p class="pull-left">&copy; My Company <?= date('Y') ?></p>
			            </div>
			        </footer>

			    <?php $this->endBody() ?>															// Ending of body
			    </body>
			    </html>
			<?php $this->endPage() ?>																// Ending of html Page 	


	2. Configuration of Layout file 
 		
 		#basic -> config -> web.php

 			Add these lines in Config array 

 				'layoutPath'=>'@app/views/layouts2',
    			'layout'=>'main2',	

					OR

    	#in controller you can directly call 

    		public function actionDemo_second()
		    {
		        $this->layout = 'main2';
		        return $this->render('index');
		    }		

    3. creating meta Tags 

    	view -> folder (first) -> index.php

    		$this->title = 'This is My Web page';									// for creating your own title 
			$this->params['breadcrumbs'][] = $this->title;							


			#add below written codes just below the above codes 

    		Yii::$app->view->registerMetaTag([
			    'title'=>'my first Page',
			    'content'=>'test test',
			]);			

	4. Adding js Code 
		view -> folder (first) -> index.php
		
		at the end of the page 
		<?php
			
			$this->registerJs('alert(12)');								// when you dont want to add common js  

		?>		
=================================================================================================================================================================
#load Css and JS (common in all files)
	

a. Common in all
	1. Folder 
		basic -> assets -> AppAssets.php

		class AppAsset extends AssetBundle
		{
		    public $basePath = '@webroot';
		    public $baseUrl = '@web';
		    public $css = [
		        'css/site.css',										// add here your Css here
		    ];
		    public $js = [											// add here your js here
		    ];			
		    public $depends = [
		        'yii\web\YiiAsset',
		        'yii\bootstrap\BootstrapAsset',
		    ];
		}

	2. load in layout File 

		basic -> view -> layouts -> main.php	 
		
		use app\assets\AppAsset;									// load to variable that files 

		AppAsset::register($this);									// loading function 
        
b. Individual JS and CSS
	
	1. Create new File 

		basic -> assets -> TestAssets.php

		class TestAsset extends AssetBundle
		{
		    public $basePath = '@webroot';
		    public $baseUrl = '@web';
		    public $css = [
		        'mytest.css'										// add css
		    ];
		    public $js = [
		        'test.js'											// add js 
		    ];
		}

	2. load in layout File  	

		basic -> view -> layouts -> main.php	 
		
		use app\assets\TestAsset;									// load to variable that files 

		TestAsset::register($this);									// loading function 
=================================================================================================================================================================
#Routes 
	
	basics -> config -> web.php
	
a. Adding Slashes in Address bar  

	1. 	uncomment The Below Code 

		/*
	        'urlManager' => [
	            'enablePrettyUrl' => true,
	            'showScriptName' => false,
	            'rules' => [
	            ],
	        ],
        */	

     2. Hit address in the address bar 
     	
     		http://localhost/yii/basic/web/first/demo_second 

b. Creating your own Routes 
	
	a. Create Dynamic Routes

		1. 	uncomment The Below Code 

		 'urlManager' => [
	                'enablePrettyUrl' => true,
	                'showScriptName' => false,
	                'rules' => [
	                    'second'=>'first/demo_second',								// creating own address 
	                    'first'=>'first/demo-first'									// creating own address 
	                ],
	            ],


	    2. Hit address in the address bar 
	     	
	     		a. http://localhost/yii/basic/web/second
	     		
	     		b. http://localhost/yii/basic/web/first   


	b. Creating Dynamic Routes and sending values in address bar 

		1. hitting Address 

			a. http://localhost/yii/basic/web/first/testing
			b. http://localhost/yii/basic/web/second/testing

		2. setting Code 
			
			basic -> config -> web.php 	

		'rules' => [
                    [
                        'pattern'=>'first/<others>',										// setting key where we will get the value 
                        'route'=>'first/info',												// controller Name/Function Name
                        'defaults'=>[														// setting Default Values Array 
                                'default-value-1'=>'hello 1',								// setting Default Values	
                                'dafult-value-2'=>'hello 2'									// setting Default Values		
                        ]
                        
                    ],
                    [
                        'pattern'=>'second/<others>',										// setting key where we will get the value 
                        'route'=>'first/demo-first',										// controller Name/Function Name
                        'defaults'=>[														// setting Default Values Array 
                                'default-value-1'=>'hello 1',
                                'dafult-value-2'=>'hello 2'
                        ]
                        
                    ]

                ],
        
         3. Controller Code 
         	
         	use Yii;

         	public function actionInfo(){
		        $data= Yii::$app->request->get() ;
		        echo "yes";
		        echo "<br/>";
		        print_r($data);


		    }

		    public function actionDemoFirst()
		    {
		        $data= Yii::$app->request->get() ;
		        echo 'demofirst';
		        echo "<br/>";
		        print_r($data);
		    }  

		  4. Output 
		  	 
		  	 a. yes
				 Array ( [default-value-1] => hello 1 [dafult-value-2] => hello 2 [others] => testing )


			  b. demofirst
				 Array ( [default-value-1] => hello 1 [dafult-value-2] => hello 2 [others] => testing )            		     

=================================================================================================================================================================
#Database 
	
a. Setting up Single Database 

	1. Setting up Connection

		basic -> config -> db.php

		Add database name 	

	2. Write Query in controller 

			 use Yii

			public function actionDemo_second()
			{
			    $data = Yii::$app->db->createCommand('SELECT * FROM employees')->queryAll();		// select Table from the database 
			}

b. Setting Mutiple Database
	
	1. Setting up Connection

		basic -> config -> db.php

			return $db=['db1'=>[
		    'class' => 'yii\db\Connection',
		    'dsn' => 'mysql:host=localhost;dbname=tutorial',
		    'username' => 'root',
		    'password' => '',
		    'charset' => 'utf8',

		    // Schema cache options (for production environment)
		    //'enableSchemaCache' => true,
		    //'schemaCacheDuration' => 60,
		    //'schemaCache' => 'cache',
		],
		'db2'=>[
		    'class' => 'yii\db\Connection',
		    'dsn' => 'mysql:host=localhost;dbname=codeigniterproject ',
		    'username' => 'root',
		    'password' => '',
		    'charset' => 'utf8',

		    // Schema cache options (for production environment)
		    //'enableSchemaCache' => true,
		    //'schemaCacheDuration' => 60,
		    //'schemaCache' => 'cache',
		]]; 

	2. 	Setting Up Array

		'db1' => $db['db1'],
        'db2' => $db['db2'],	

    3. creating Query
    	
    	  public function actionDemo_second()
		    {
		        $data1 = Yii::$app->db1->createCommand('SELECT * FROM employees')->queryAll();			// calling from the another database 
		        $data2 = Yii::$app->db2->createCommand('SELECT * FROM users')->queryAll();				// calling from the another database 
		        echo "<pre>";
		        print_r($data1);
		        print_r($data2);

		        // $this->layout = 'main2';
		        // return $this->render('index');
		    }    

=================================================================================================================================================================
#Using GUI 
	
	Note 
		 'enablePrettyUrl' => false,
         'showScriptName' => false,

         both paremeter should set False 

a. Creating Controller
	
	1. hit Address 

		http://localhost/yii/basic/web/index.php?r=gii 

	2. Click on Controller 

		1. app\controllers\DemoController					// provide Controller Name
					|
			rest of thinks should Blanks 
					|
			Click on Preview button 
					|
			Click on Generate Button
				
			Then Controller and View File will automatcially Created				

		
b. Creating Model
	
	1. hit Address 

		http://localhost/yii/basic/web/index.php?r=gii 
	
	2. Click on Model		

		Note : In database you should Select only one database 


		1. Select Table from the Drop down (which is automatically generated)
						|
			Click on Genereta Button 

			then go to Basic -> Model Folder -> ModelName.php


c. Creating Form	
	
	1. hit Address 

		http://localhost/yii/basic/web/index.php?r=gii 

	2. Click Form 
		a. demo/demo_home								// view name / form name
		b. select Model 								// app\models\Articles

	3. Copy Code in Controller which is generated by yii
		
		public function actionDemo_home()
		{
		    $model = new \app\models\Articles();

		    if ($model->load(Yii::$app->request->post())) {
		        if ($model->validate()) {
		            // form inputs are valid, do something here
		            return;
		        }
		    }

		    return $this->render('demo_home', [
		        'model' => $model,
		    ]);
		}				

	4. hit the url 

		 http://localhost/yii/basic/web/index.php?r=demo/demo_home


d. creating Crud 
	
		1. Creating Model Class 

			app\models\Articles

		2. Search Model Class
			
			app\models\ArticleSearch					// provide any name 

		3. Create Model Name 

			app\controllers\ArticleController

		4. Create View 
			
			@app\views\article	

		click on Generate Button 

		Note Before creating CRDU Create Model First by using Model Generator

==============================================================================================================================================
#ORM
	
	Object Relation Mapping  

		1. An ORM is layer thats site between your database and your application 
		2. ORM in computer is a programming technique (machanism) for converting data between incompatible type systems using (OOPS) object -oriented programming language 
		3. An ORM is the layer between the database and your application. By using an ORM, a lot of the hardwork of creating, updating, reading and deleting from the databae is taken care for us.


		OOPS Objects------>ORM-------->SQL

		OOPS Objects<------ORM<--------SQL

		 a. all data of application will be in Objects form and database date will be in Tables form 
		 b. application pass his object to the ORM so it can store data or da any thing in Sql(tables) , every thing done automatcially ORM , we just simply pass our application Object to ORM  
		 c. so map Objects and SQL using Classes name which is same as table name of the SQL and variable of class are same the column name of the tables 

		There are two types of ORM	
			1. Data Mapper ORM
			2. Active Record ORM 

		Example's of ORM are : 
			1. Docttrine		-> sybiny
			2. Eloquent			-> Laravel
			3. Propel 			
			4. Redbean	

			these all are PHP ORM


	Why we use ORM 
		In Object oriented programming, you work with objects as your main point of reference. (means we only want to work in objects)		


==============================================================================================================================================
#Model
	
	1. Call Model in controller 

		Write these lines in Controller 

		use app\models\Articles;
		use Yii
		

	
	#Various CRUD function 

		1. Insert 				

			$data = new Articles();					// Createing Object
			$data->title='test';					// Column Name
	        $data->body='test';						// Column Name
	        $data->user_id=1;						// column name
	        $data->save();							// function is used to save 
	        echo "yes";


	    2. Updating 

	    	$data = Articles::findOne(8);			// finding the value from the objects 
			$data->title='updating test';
	        $data->body='updating body';
	        $data->user_id=2;
	        $data->save();  


		3. Delete 

			$data = Articles::findOne(8);			// finding the value from the objects 
        	$data->delete();	  					//delete particluar row

		4. Select 

			a. Print All Values 
				  
				$data= Articles::find()->all();
				echo "<pre>";
				print_r($data);
				exit;	

			b. Print all the data in the array From 

				$data= Articles::find()->asArray()->all();

			c. Print all data with where Conditon 

				$data= Articles::find()->where(['id'=>9])->all();
			
			d. print all data with where and in query 

				 $data= Articles::find()->where(['id'=>[8,9,7,6]])->all(); 

			e. print all data with where , in , order by query 

				 $data= Articles::find()->where(['id'=>[8,9,7,6]])->groupBy('id')->orderBy('user_di')->all(); 

				 SELECT * FROM `articles` WHERE `id` IN (7, 8, 9) GROUP BY `user_id` ORDER BY `id`	  		

			f. to Create Sql Command as Raw
				
				$data= Articles::find()->where(['id'=>9])->all();
				echo $data->createCommand()->getRawSql();

				SELECT * FROM `articles` WHERE `id`=9
				

			g. Print All with the where condition 

				 $data= Articles::findAll(['user_id'=>2]);				// finding with which contain user_id 2

			h. print top one Asc 

				$data= Articles::find()->one();

			i. Print One particluar Result 

				$data= Articles::findOne(9);					//filling Id number	  	

			k. Select and joins 

				$data = Articles::find()
				 ->select('*')
				->innerJoin('user as u','u.id=articles.user_id')
				->leftJoin('a as a','a.id=articles.a_id')
				->where(['id'=>[7,8,9]])
				->groupBy('user_id')
				->orderBy('id')->all();

			l. Normal Query	

				$data = Yii::$app->db->createCommand("SELECT * FROM Atricles")->queryAll();	
==============================================================================================================================================
#Query Builder
	 
	1. Model 	 
	 	
		 use yii\db\Query;

		a. Insert Query
		 	public function getData(){														// create your own function 
					$sql = Yii::$app->db->createCommand()->insert('articles',[			// insert query 
						'title'=>'queryBuilder',
						'body'=>'queryBuilderBody',
						'user_id'=>1
				])->execute();

					$lastId = Yii::$app->db->getLastInsertId();					// lastinserted Id
					return $lastId;										
			}

		b. Update Query 
			 $sql = Yii::$app->db->createCommand()->update('articles',[
                'title'=>'UpdatequeryBuilder',
                'body'=>'UpdatequeryBuilderBody',
                'user_id'=>1
            ],array('id'=>[1,2,3,4,5,6,7,8]))->execute();

		c. Delete Query 
			$sql = Yii::$app->db->createCommand()->delete('articles',array('id'=>[1,2,3,4,5,6,7,8]))->execute();	


		d. Select Query 

			1.	// Normal Query 
				
				$query =(new Query())->select('*')->from('articles')->where(['id'=>10])->all();

			2. // Only One Result
				
				$query =(new Query())->select('*')->from('articles')->where(['id'=>10])->one();

			3. // Create Raw Query 

				$query =(new Query())->select('*')->from('articles')->where(['id'=>10]);
            	echo $query->createCommand()->getRawSql();

			4. Create query With where and Conditon 
				
				$query =(new Query())->select(['user_id','title','body'])->from('articles')->where(['id'=>10])->andWhere(['email'=>'xx@gmail.com']);		

			4. Create query With where,and, or Conditon 
				
				$query =(new Query())->select('*')->from('articles')->where(['id'=>10])->andWhere(['email'=>'xx@gmail.com'])->orWhere(['name'=>'Deepinder']);

			5. Create Or Query 

				$query =(new Query())->select('*')->from('articles')->where(['id'=>10])->andFilterWhere(['or',['Like','article.title','test'],['Like','article.body','bodytest']]);
            echo $query->createCommand()->getRawSql();

				SELECT * FROM `articles` WHERE (`id`=10) AND ((`article`.`title` LIKE '%test%') OR (`article`.`body` LIKE '%bodytest%'))	

			6. Groupby and orderBy

				 $query =(new Query())->select('*')->from('articles')->where(['id'=>10])->andFilterWhere(['or',['Like','article.title','test'],['Like','article.body','bodytest']])->groupBy('user_id')->orderBy('id')->limit(5)->offset(4);
            	echo $query->createCommand()->getRawSql();

				SELECT * FROM `articles` WHERE (`id`=10) AND ((`article`.`title` LIKE '%test%') OR (`article`.`body` LIKE '%bodytest%')) GROUP BY `user_id` ORDER BY `id`			


			5. // Create Raw Query 

				$query =(new Query())->select('*')->from('articles')->leftJoin()->innerJoin()->where(['id'=>10]);
            	echo $query->createCommand()->getRawSql();	

	2. Controller 

		$data= new Articles;
       echo $data->getData();	

=============================================================================================================================================
#Components 

	Same like helper in Codeigniter where we can call this function to every where 


	1. create folder 

		basics -> Folder anyname (Components)


	2. Create File 
		
		basics -> Folder anyname -> anyFilename (Commoncomponent)


		namespace app\components;															//provide any name 
		use yii\base\Component;						

			Class CommonComponents extends Component{										// create class according to filename

					public function getToken(){
						return 'DJDIDJFHUIEKDPWIEURYEUIOWSLXMCNVBFDHUWISLD';
					}
			}	

	3. Create Controller 

		  public function actionComponent(){
				echo Yii::$app->common->getToken();										//calling component
			}				

=============================================================================================================================================
#Widgets

	Location Of all Widgets

		basic -> vender -> yiisoft -> yii2 -> base -> widget -> all widget there


	#breadcrumbs widget 

		$arrayList=[                                                                             // creating array   
			'dashboard',                                                                        // creating simple text
			[
				'label'=>'Home',                                                                //creating Text     
				'url'=>'home'                                                                   //making link using text     
			],
			[
				'label'=>'about',
				'url'=>['about','id'=>1],                                                       // providing id with link 
			],
			[
				'label'=>'testing',
				'url'=>['testing','id'=>3],
				'template'=>'<li><span style="font-style: italic;">{link}</li>',                // adding html element to particular 
			]
		]
	
			<?= Breadcrumbs::widget([                                                           //calling the breadcrumbs 
				'itemTemplate'=>"<li><b>{link}</b></li>",                                       // making html element to all the breadcrumbs
				'links'=>$arrayList                                                             // making breadcrumbs using array
			]);?>

=============================================================================================================================================
#Custome Widgets

	1. creating File 

		basic -> widget -> filename (Form.php)

		Code 

		namespace app\widgets;

		use yii\base\Widget;

		Class Form extends Widget{

			public $pageType;									//variable name  
			public $Tag;										//variable name
			public $records;									//variable name

			public function init(){								// this function always run first before any other function 
				parent::init();
				echo "run first in this file";				

			}



			public function run(){								// default function 
				echo "<pre>";
				print_r($this->records);
				return $this->pageType.' '.$this->Tag.' '.'<input type="text" name="firstName" value="" placeholder="Enter FirstName"/>';
			}

		}

	2. View file Code 

		basic -> view -> folderName -> anyFilename

			use app\widgets\Form;
			echo Form::widget(['pageType'=>'Home Page','Tag'=>'Label','records'=>[1,2,3,4,5]]);				// key which we passed in this sholud be same as variable name in class 
===========================================================================================================================================
#Sessions

	1. Set Session 
		
		Yii::$app->session->set('username','Code Improved');

	2. Get Session 

		Yii::$app->session->get('username');

	3. Unset Session

		  unset(Yii::$app->session['username']); 			// to unset particluar key
    	  Yii::$app->session->remove('username');			// to unset particluar key
          Yii::$app->session->destory();					// to unset all keys

===========================================================================================================================================
#Flash Session

	1. Set Session Data

		Yii::$app->session->setFlash('message','Success');

	2. Get Session Data 	

		Yii::$app->session->getFlash('message');


===========================================================================================================================================
#Module Generater (basically its a separation conecept of various modules)

	1. hit address

		http://localhost/yii/basic/web/index.php?r=gii

	2. Create Module Generator

		Module Class 		::		app\modules\admin\Module							
		Module ID			:: 		Generate automatically

		Click on Generate

		Note i write 'admin' but i can write any name 

	3. Create Module Code 

		Paste the below Code any where in web.php -> $config (array) 

		  'modules' => [										
				'admin' => [
					'class' => 'app\modules\admin\Module',							// admin Module
				],
				'demo' => [
					'class' => 'app\modules\demo\Module',							// demo Module
				],
			],


	4. Hit address to run Module 

		1. http://localhost/yii/basic/web/admin					(work in 'enablePrettyUrl' =>true)

		2. http://localhost/yii/basic/web/index.php?r=admin		(work in 'enablePrettyUrl' =>false)


	Note : To call Yii controller in the Module Controller

		1. Change namespace of Yii Controller

			namespace app\modules\admin\models;  	by		 namespace app\models; 

		2. To Call yii Controller

			Add the below code in New Module

				use app\modules\admin\models\ModelName (like Articles)			

				Then write functions or programs

===========================================================================================================================================
#Behaviors and Before Request Event

	Behaviour are always calls first when ever we load controller (we can use this as for authentication , ip validations)

	1. Create file 

		basic -> Components -> MyBehaviour.php

		Code 

		namespace app\components;
		use yii\base\Behavior;
		use Yii;

		Class MyBehaviour extends Behavior{

				public $variable1;										// variable created for run time 
				public $variable2;										// variable created for run time

				public function events(){								//default function 
						echo $this->variable1;
						echo "<br/>";
						echo $this->variable2;
						echo "<br/>";
						echo "Behaviour Yes";
						echo "<br/>";
						return [];
				}
		} 

	2. Call Behavior 

		a. Calling in Controller 

			namespace app\controllers;
			use app\Components\MyBehaviour;
			use Yii;


			public function behaviors()											//by default function and run always first 
			{	
				return [
				MyBehaviour::className(),                                        // anonymous behaviour
				[                                                
					'class'=>MyBehaviour::className(),                           // anonymous behaviour 
					'variable1'=>'Variable Data 1',                              // setting variable         
					'variable2'=>'Variable Data 2'
				],   
				'behaviour'=> MyBehaviour::className()                           // name behaviour     
				];
			}

			Note : 1. Calling behaviour in above 3  different Methods 

		b. Calling all Controller using web.php

			copy this code in the web.php file anywhere 

					'as myBehaviour'=>[                                                
				'class'=>'\app\components\MyBehaviour',                           
				'variable1'=>'Variable Data 1',                              
				'variable2'=>'Variable Data 2'
			],

===========================================================================================================================================
#Events 

	Trigger Something Like Sending Email, Sending any kind Of notification etc and it is created Globally 

	1. create File  

		a. 1. Global Event	
			

			1. Setting up files 

				basic -> web -> events.php

				#Code 

				use yii\base\Event;

					function upperData(Event $event){
						echo strtoupper($event->data);
					}	

			2. Call event File 

				basic -> web -> index.php 

				#Code 

					 require 'events.php';

			3. Create Code In controller

				Const Event_DEMO = 'Event_DEMO';
   
				public function actionIndex()
				{
					$this->on(self::Event_DEMO,'upperData','Hello World');  
					$this->trigger(self::Event_DEMO);
					$this->off(self::Event_DEMO);
					//  return  $this->render('demo');
				}	
		2. Global 

			Const Event_DEMO = 'Event_DEMO';

			 public function actionIndex()
			{
			\Yii::$app->on(self::Event_DEMO,'upperData','Hello World');  
			\Yii::$app->trigger(self::Event_DEMO);
			\Yii::$app->off(self::Event_DEMO);
				//  return  $this->render('demo');
			} 		 			

		b. 1. Local event 

			Const Event_DEMO = 'Event_DEMO';

			public function actionMySelfEvent()
			{
				$this->on(self::Event_DEMO,
					function (Event $event){
						echo strtoupper($event->data);

						// create here code 

					},'Hello World'); 
				$this->trigger(self::Event_DEMO);
				$this->off(self::Event_DEMO);
				//  return  $this->render('demo');
			}

			2. Local Event  

			Const Event_DEMO = 'Event_DEMO';

			 public function actionTest()												
			{
				$this->on(self::Event_DEMO,[$this,'upperData'],'HHHHHHHHHH WWWWWWWWWW');  	// calling the function 
				$this->trigger(self::Event_DEMO);
				$this->off(self::Event_DEMO);
				//  return  $this->render('demo');
			}

			public   function upperData(Event $event){						// this function is already exist in events files 
				echo strtolower($event->data);
			}	

			3. Local Event 

				public static  function upperData(Event $event){
					echo strtolower($event->data);
				}

				 public function actionMySelfEvent()
				{
					Event::on(self::className(),self::Event_DEMO,
						function (Event $event){
							echo strtoupper($event->data);

							// create here code 





							},'Hello World'); 
					Event::trigger(self::className(),self::Event_DEMO);
					Event::off(self::className(),self::Event_DEMO);
					//  return  $this->render('demo');
				}
===========================================================================================================================================
#Before and After Action  (this is controller wise)

	1. When ever we call any controller before function and after function Calls Its self automaticlly for Example you call Index function before and after function Call its self when we call index 

	2. Majorly beforeAction Use in authentication or session checking and afterAction use in appending Data 

	1. Settin Up Code 

	basic -> controller -> ControllerName

	#code 
		public function beforeAction($action){
			parent::beforeAction($action);
			echo  "Before Action";
			return True;
		}
	
		public function actionIndex()
		{
		echo " Index action";
			return True;
		}
		public function afterAction($action,$result){
			echo " After Action";
			$result = parent::beforeAction($action,$result);
			return $result;
		}
		public function actionTest()
		{
		echo " Test action";
			return True;
		}

	2. Hit Url 

		1. http://localhost/yii/basic/web/articles/index

		2. http://localhost/yii/basic/web/articles/test

	Before and After call every time its self when ever we call any controller

===========================================================================================================================================
 #Before Request & Before Action (this is global wise)

		every Point are same as above the main difference is that its work on global 

		1. setting up codes

			basic -> web -> config.php


			Paste this code in the config array 

			  'on beforeAction'=>function($event){							
				echo "<pre>";
				echo ($event->action->id);
				echo "<br/>";
				print_r ($event->action->controller->id);
				echo "<br/>";
				// print_r ($event->action->controller);
				exit;
			echo  "Before Action From Web.php";
			},
			'on beforeRequest'=>function(){
				echo "yes";
			},


		Note : beforeRequest always work first as compair to beforeAction 	





===========================================================================================================================================
#Internationalization 

	1. 	Setting up Folder 

		basic -> message -> folderName (like en,hi,pun etc) -> app.php (filename)

		note : filename should be same in all the folder 

		#Code
		
		// for english code 
		return [
			'Welcome'=>'Hello Killer'
			]; 

		// for Hindi code 
		return [
			'Welcome'=>'नमस्ते'
			]; 	

		// for Punjabi code 	
		return [
			'Welcome'=>'ਸਤ ਸ੍ਰੀ ਅਕਾਲ'
			];	

	2. Setting up Codes in Web.php

		basic -> config -> web.php

		copy paste this code in Components array 

			  'components' => [
						'i18n' => [
							'translations' => [
								'app*' => [
									'class' => 'yii\i18n\PhpMessageSource',
									'basePath' => '@app/messages',
									'sourceLanguage' => 'en-US',
									'fileMap' => [
										'app' => 'app.php',
										'app/error' => 'error.php',
									], 
								],
							],
						],
			  ]	

	3. Calling Fill in Controller 

		 public function actionIndex()
		{   
			\Yii::$app->language = 'pun';						// calling punjabi folder
			echo \Yii::t('app','Welcome');						// calling Welcome Message in punjabi langauge

			echo "<br/>";

			\Yii::$app->language = 'hi';						// calling hindi folder
			echo \Yii::t('app','Welcome');						// calling Welcome Message in hindi langauge


			echo "<br/>";

			\Yii::$app->language = 'en';						// calling english folder
			echo \Yii::t('app','Welcome');						// calling Welcome Message in english langauge

			exit; 
			
		}		  				
===========================================================================================================================================
#Pagination 

	1. Setting Up Codes 

		Models-> ModelName.php

		#code 
			$dataProvider = new ActiveDataProvider([
				'query' => $query,
				// 'pagination'=>													//this function is used to create pagination 
				// [
				//     'pageSize'=>2
				// ],
				'pagination'=>false, 
				'sort'=>[															//sorting accoring to title
					'attributes'=>['title'],
					'defaultOrder'=>['title'=>SORT_ASC],							// for setting default values 
				],
				'sort'=>false,														//incase to make sort false
				// 'pagination'=>true,												//incase to make pagination true 
			]);	

===========================================================================================================================================
#Grid View
	
	1. Change Column name 

		basic -> view folder -> index.php (any file which created by yii)

		#code exist 

			'columns' => [
				['class' => 'yii\grid\SerialColumn'],

				'id',
				'title',
				'body:ntext',
				'user_id',

				['class' => 'yii\grid\ActionColumn'],
			],


			we have to Change in these code 


			#'id' change with 

			[
				'attribute'=>'id',						//column name 
				'label'=>'Art Id',						//User Defined Name (enable Sorting of Asc or Desc option)
				'visible'=>false,						//visbility option 
				// 'header'=>'Article Id'				// user Defined name (disable sorting of Asc or Desc option)
			],


	2. make if else using column valuse and also add some data in Column values 
		
		1. First Method (directly in index File)

			[
				'attribute'=>'title',											//Column name 			
				'label'=>'Article Title',										//User Defined Name 	
				'contentOptions'=>['style'=>'background-color:red;font-size:20px'],	// add css
				'value'=>function($data,$key,$index){                           // anonymous function with default parameter           	
						$newData = $data->title.' ( this title) key : '.$key.' Index: '.$index;			// adding Data into column Data 	
						return $newData;	

				},
				 'filter'=>['1'=>'Deepinder Singh','2'=>'Simran'],		// make drop dwon list in filter to serach according to options
			

			],	

		2. Second Method (Calling Function from Controller to index)

			basic -> Model -> ArticleCrud

			#Code (Add below Codei in controller)

				public static function userIdData($data,$key,$index){
						$newData = $data->title.' ( this title) key : '.$key.' Index: '.$index;
						return $newData;    
				}


			basic -> View -> folderName -> index.php

			#'title' change with 
				
				[
					'attribute'=>'title',
					'label'=>'Article Title',
					'value'=>[ArticlesCrud->className(),'userIdData']

				],		

	3. Make Filter disable (which is showing above on tables)

		  basic -> View -> folderName -> index.php	

		  'filterModel' => $searchModel,				make this code comment 	

	4. Not Display Table Header and Search bar 	  		

		basic -> View -> folderName -> index.php

		'showHeader'=>false,

		add the above code in widget function array 

	5. Show Footer below thw table 
		
		basic -> View -> folderName -> index.php

		 'showFooter'=>true,

		 add the above code in widget function array 


		if incase you want to add value in the footer of particluar column then add below code in the column array  

		  'footer'=>100,

	6. Do Some Changes on the Action's Column 


		Add the below Code in the Widget function -> columns array 

		 [
			'class' => 'yii\grid\ActionColumn',						//enable or disable the Action column 
			'header' => 'action',									//Header name 
			'headerOptions'=>['width'=>'150'],						//Increase the width of the column 
			'template'=>'{delete} {view} {update}'					//Chanhe the appearnce of buttons 
		],

	7. Do some Changes on the Rows of the table 

		add the below code in the widget function array 
			
        'rowOptions'=>function($data,$key,$index){									//anonymous function with default parameter
            $class='bg-success';	
            $style='background-color:yellow;';
            
            return ['key'=>$key,'index'=>$index,'class'=>$class,'style'=>$style];	// return the values and refelect in the tr tags 	
        },	

	8. Layout of the Grid Page 

		add the below code in the widget function array 

		'layout'=>'{pager} {items} {summary}',	 			// it first show pagination , table , number of records 

	9. when Now record Found 

		add the below code in the widget function array 

		'showOnEmpty'=>false,								// it will disapper the table in case no table found 
        'emptyCell'=>'NA'	 								// it will set by default value when the column is empty

======================================================================================================================================
#list View 

	basic -> view -> index.php

	1. Make List View in index file(External file)

		a. Indxe.php File Code 

			#Code

			use yii\widgets\ListView; 

			Delete all code of the GridView From the file and add the Below code in Index.php file 

				<?php
				
					echo ListView::widget([
						'dataProvider'=>$dataProvider,							
						'itemView'=>'list_view',								// file name which is placed in the same folder
						'viewParams'=>[											// Adding parameter to send array 
							'testData'=>'Hello Test Data',						// sending key and value in External file				
						],
						//'options'=>['class'=>'well'],							// if we want to make class for whole container div 
							'itemOptions'=>['class'=>'well']					// if we want to make class for each dive 
					]);
				?>
		b. Make External file with in the View Folder 

			<?php
				use yii\helpers\Html;
			?>


				<div>
					<p><h3><?php echo $model->id;?></h3></p>					//name of the Column 
					<p><?php echo $model->title;?></p>							//name of the Column 
					<p><?php echo $model->body;?></p>							//name of the Column 
					<p><?php echo $model->user_id;?></p>						//name of the Column 
					<p><?= $testData?></p>										//Data sending from the parameter

				</div>
			<br/>
			<br/>	

	2. Make List View in index file(Local file)		

		<?php
		
			echo ListView::widget([
				'dataProvider'=>$dataProvider,
				'itemView'=>function($model,$item,$key,$wedgets)
				{
					?>
							<div>
								<p><?php echo $model->id;?></p>
								<p><?php echo $model->title;?></p>
								<p><?php echo $model->body;?></p>
								<p><?php echo $model->user_id;?></p>

							</div>
							<br/>
							<br/>
					<?php
				}
			]);
		?>	

	Note :
	1.  Local is use full when you want to make small code while External is usefull when you want to make very very large codes

	2.    <?php // echo $this->render('_search', ['model' => $searchModel]); ?>

			if you uncomment this line this will make a search on your view File

===========================================================================================================================================
#Detail View 

	When ever you create a CRUD using gii then you get 'View.php' file in the view folder 

	basic -> view -> FolderName (article) -> view.php

	#Add the code in the  widget function Array 

		DetailView::widget([
        'model' => $model,
        'attributes' => [
            'id',
            'title',
            'body:ntext',
            'user_id',
        ],
    ]


	Add below Code 

		 DetailView::widget([
        'model' => $model,
        'attributes' => [									
            [
                'attribute'=>'title',						// select column name 
                'label'=>'Article Title',					// replace column name with User Defined column name 
                'format'=>'html'							// showing Data in html from like <b>Hello</b> will in bold	
					or
				'format'=>'text'							// showing Data in text from like <b>Hello</b> will not in bold					
            ],
				'body:ntext',
				[
					'attribute'=>'user_id',					// select column name 
					'value'=>function($data){				// createing function for there data , $data contains the data value	
						if($data->user_id==1){
							$newData = "Deep";
						}else{
							$newData='Sim';
						}
						return $newData;					// returning the data
					},
					'contentOptions'=>['style'=>'background-color:red;']		// adding style sheet 

				],
			],
		])				

===========================================================================================================================================
#Form Validation Rule

	1. For front end Validation (browser Side)

		basic -> Controller -> controllerfile.php (find the actionCreate function then check view file name) -> in create.php (find the file name of the view like _from)-> All code is written in ActiveForm

		here is you all html code of Forms

		<?php $form = ActiveForm::begin(); ?>												// starting Form 

			<?= $form->field($model, 'title')->textInput(['maxlength' => true]) ?>			// making Fields 

			<?= $form->field($model, 'body')->textarea(['rows' => 6]) ?>					// making Fields 

			<?= $form->field($model, 'user_id')->textInput() ?>								// making Fields 

			<div class="form-group">
				<?= Html::submitButton('Save', ['class' => 'btn btn-success']) ?>			// Ending Form 
			</div>

		<?php ActiveForm::end(); ?>

	2. For back end Validation (Server Side)

		every rule is defined in the Model Side 

		public function rules()
		{
			return [
				[['body', 'user_id'], 'required'],													// make common validations				
				['body','compare','compareAttribute'=>'title','message'=>'Body text not matched'],  // making value compare of two fields
				['user_id','compare','compareValue'=>'1','operator'=>'>=','type'=>'Number'],		// making compair and check for value	
				[['body'], 'string'],
				['title','required','message'=>'User Name must be Submit'],							// making our own message
				['body','required','message'=>'Please type some thing in Body'],					// making our own message 
				[['user_id'], 'integer'],															
				[['title'], 'string', 'max' => 225,'min'=>10],										
			];
		}
		public function attributeLabels()
		{
			return [
				'id' => 'ID',											// Label name of the filed
				'title' => 'Title',										// Label name of the filed 
				'body' => 'Body',										// Label name of the filed 	
				'user_id' => 'User ID',									// Label name of the filed 
			];
		}	



	


===========================================================================================================================================
#Image Upload

	1. Create folder for uploading Images 

		basic -> web -> create folder (Uploads)

	2. Make html file input 

		basic -> view -> artcile -> _form.php

		#Code 

			 <?= $form->field($model, 'profile')->fileInput() ?>								// name is profile 

	3. 	Add rule in the Model File

		  public function rules()
			{
				return [
					['profile','file'],										// set rule of file 
				];
			}

			/**
			* {@inheritdoc}
			*/
			public function attributeLabels()
			{
				return [
					'profile'=>'Upload Image'								// set label Name 
				];	
			}
	4. 	Add Code in the Controller File 

		public function actionCreate()
		{
			$model = new Articles();
			
			if ($model->load(Yii::$app->request->post())) 
			{
				$model -> profile = UploadedFile::getInstance($model,'profile');				// get instance of the class 
				$filename = time().'.'.$model->profile->extension;								// setting name and extention of the file
				$model->profile->saveAs('uploads/'.$filename);									// moving the file to the folder 
				$model->profile = $filename;													// sending the value to the variable 
				$model->save();																	// save the value in the database	
			}
		}

	Note : Web Folder is the public directory where we can set up CSS, JS, Upload , Theme Files	
===========================================================================================================================================
#Theme Set Up 

	1. Create folder for Setting up new theme 

		basic -> web -> themes -> folderName (new/old) -> Views -> Site (same as ControllerName) -> create File which you want to replace (about .php , contact.php)
		
		Create Code there 

			<h1>About New theme</h1>

	2. Setting code in the web.php

		basic -> config -> web 

		#add below code in the config -> component array
		  
		  'view'=>[
            'theme'=>[
                'basePath'=>'@webroot/themes/new',							//root path 
                'baseUrl'=>'@web/themes/new',								//root path 
                'pathMap'=>[
                    '@app/views'=>[											//setting up two options 		
                        '@webroot/themes/news/views',						//setting up first template				
                        '@webroot/themes/old/views', 						//setting up Second template				
                    ]															
                ]
            ]
         ],			

	Note : in options , if first did not works then second theme will works , if second not work then default theme will works 			 
=============================================================================================================================================
#Advanced Application Template setup (front End back end)

	1. For Downlaod 

		php composer.phar create-project yiisoft/yii2-app-advanced advanced

	2. Run 'php init' command -> select Development option by pressing 0 -> type yes -> then automtically files will generate 

	3. For Help 

		Command -> Php yii 

		command -> php yii serve --docroot="frontend/web/" 				// to run front End Code

		Command -> php yii serve --docroot="backend/web/"				// to run Back end Code

	4. Directory Structure 

		Front end -> For front end data

		Back end  -> For back end Data

		Comman	  -> works in front and back end 

=============================================================================================================================================
#Cron Set 

	1.Directoty Structure 

		Advanced -> Console -> 	Controllers -> controllerfile (TestController.php)

		#code 

		namespace console\controllers;
		use yii\console\Controller;

		Class TestController extends Controller{
			
			public function actionIndex(){
				echo "Cron complete";
			}
			public function actionEmail($email,$subject){
				echo "Hello $email, This mail regarding $subject";
			}
		}

	2. Run Commands 

		1. for testing that every thing is perfect -> php yii 
			(if you get the all commands means every code is perfect or if you get any kind of error then means you have error in your file)

		2. Run Controller using command 

			php yii test/index 												-> to run index Controller 

			php yii test/email 'Deepinder999@gmail.com' 'Learning Yii'		-> to run email Controller



	Note : when you run  php yii Command then you will get all the list of various controller which you have created in cron as well of userDefined Commands 		

=============================================================================================================================================
#Create Custom Command

	we can use these things which we perfom daily like delete log files, trucate databases (just write the code in the function body and execute that function using Command)

	1. Directory Structure 

		basic -> commands -> ControllerName (DemoController.php)

		#code 

			namespace app\commands;

			use yii\console\Controller;
			use yii\console\ExitCode;

			class DemoController extends Controller
			{
				public function actionIndex($message = 'Demo command')
				{
					echo $message . "\n";

					return ExitCode::OK;
				}
				public function actionTest()
				{
					echo "testing the codes";

					return ExitCode::OK;
				}
			}	

	2. Run Command

		php yii demo/index

=============================================================================================================================================
#Queue Job 






		

	 


















	





			   	





