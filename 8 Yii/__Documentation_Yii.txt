#Documentation 


#path 
	1. we can set any file path using namspeace or path 

		@app means current root directory like basic or advance 

		@app\view\about.php 		means basic->view->about.php 

	1. Yii is a high performance, component-based PHP framework for rapidly developing modern Web applications. The name Yii (pronounced Yee or [ji:]) means "simple and evolutionary" in Chinese. It can also be thought of as an acronym for Yes It Is!
	2. Additionally to the web application, there is a console script called yii, which is located in the applications base directory. This script can be used to run background and maintenance tasks for the application, which are described in the Console Application Section.

#What is Yii Best for?
	Yii is a generic Web programming framework, meaning that it can be used for developing all kinds of Web applications using PHP. Because of its component-based architecture and sophisticated caching support, it is especially suitable for developing large-scale applications such as portals, forums, content management systems (CMS), e-commerce projects, RESTful Web services, and so on.	

#Namespace 
	The most obvious change in Yii 2.0 is the use of namespaces. Almost every core class is namespaced, e.g., yii\web\Request. The "C" prefix is no longer used in class names. The naming scheme now follows the directory structure. For example, yii\web\Request indicates that the corresponding class file is web/Request.php under the Yii framework folder.

	(You can use any core class without explicitly including that class file, thanks to the Yii class loader.)	

#Component and Object
	Yii 2.0 breaks the CComponent class in 1.1 into two classes: yii\base\BaseObject and yii\base\Component. The BaseObject class is a lightweight base class that allows defining object properties via getters and setters. The Component class extends from BaseObject and supports events and behaviors.

	If your class does not need the event or behavior feature, you should consider using BaseObject as the base class. This is usually the case for classes that represent basic data structures.

#Template engine 
	  Yii 2.0 is also equipped with official support for two popular template engines: Smarty and Twig.The Prado template engine is no longer supported. 

#Models
	
	Models are basically used to Store the data to represent in the view

	Yii 2.0 uses yii\base\Model as the base model.Yii 2 you should extend yii\base\Model to create a form model class.


#Controllers
	
	1.Yii 2.0 uses yii\web\Controller as the base controller class		
	
		public function actionView($id)
		{
		    $model = \app\models\Post::findOne($id);
		    if ($model) {
		        return $this->render('view', ['model' => $model]);
		    } else {
		        throw new \yii\web\NotFoundHttpException;
		    }
		}

	2. There are two types of Controller 
		
		1. Console Controller 				:: yii\console\Controller
		2. Web Controller 					:: yii\web\Controller 

	3. There are two types of actions 
		1. createIndex 			:: inline action 					
		2. standalone actions 											//they are use across multiple application or controller


	4. When you create controller in the Sub directory 

		1. basic -> controller -> admin -> siteController.php

			namespace app\controllers\admin;

			 public function actionIndex()
			    {
			        echo "yes";
			        exit;
			     
			    }	

		2. hit the address http://localhost/yii/basic/web/admin/site/index


		Note : in the address bar you have write exact name , that controller name rule does not work here

#Console Applications
	Console applications are now organized as controllers, like Web applications. Console controllers should extend from yii\console\Controller.To run a console command, use yii <route>, where <route> stands for a controller route (e.g. sitemap/index). Additional anonymous arguments are passed as the parameters to the corresponding controller action method 	

#Action Filters
	
	 Action filters are implemented via behaviors now.
	 yii\base\ActionFilter	

#Assets
	Yii 2.0 introduces a new concept called asset bundle that replaces the script package concept found in Yii 1.1.

	An asset bundle is a collection of asset files (e.g. JavaScript files, CSS files, image files, etc.) within a directory. Each asset bundle is represented as a class extending yii\web\AssetBundle. By registering an asset bundle via yii\web\AssetBundle::register(), you make the assets in that bundle accessible via the Web.	 

#Forms
	Yii 2.0 introduces the field concept for building a form using yii\widgets\ActiveForm. A field is a container consisting of a label, an input, an error message, and/or a hint text. A field is represented as an ActiveField object. Using fields, you can build a form more cleanly than before:

	<?php $form = yii\widgets\ActiveForm::begin(); ?>
	    <?= $form->field($model, 'username') ?>
	    <?= $form->field($model, 'password')->passwordInput() ?>
	    <div class="form-group">
	        <?= Html::submitButton('Login') ?>
	    </div>
	<?php yii\widgets\ActiveForm::end(); ?>	

#Query Builder
	Yii 2.0 represents a DB query in terms of a Query object that can be turned into a SQL statement with the help of QueryBuilder behind the scene. For example:

	$query = new \yii\db\Query();
	$query->select('id, name')
	      ->from('user')
	      ->limit(10);

	$command = $query->createCommand();
	$sql = $command->sql;
	$rows = $command->queryAll();

#Active Records 
	 Yii 2. That class extends from yii\db\Query, and thus inherits all query building methods. You call yii\db\ActiveRecord::find() to start building a query:

	// To retrieve all *active* customers and order them by their ID:
	$customers = Customer::find()
	    ->where(['status' => $active])
	    ->orderBy('id')
	    ->all();

#Recommended Apache Configuration
	
	Use the following configuration in Apache's httpd.conf file or within a virtual host configuration. Note that you should replace path/to/basic/web with the actual path for basic/web.

	# Set document root to be "basic/web"
	DocumentRoot "path/to/basic/web"

	<Directory "path/to/basic/web">
	    # use mod_rewrite for pretty URL support
	    RewriteEngine on
	    
	    # if $showScriptName is false in UrlManager, do not allow accessing URLs with script name
	    RewriteRule ^index.php/ - [L,R=404]
	    
	    # If a directory or a file exists, use the request directly
	    RewriteCond %{REQUEST_FILENAME} !-f
	    RewriteCond %{REQUEST_FILENAME} !-d
	    
	    # Otherwise forward the request to index.php
	    RewriteRule . index.php

	    # ...other settings...
	</Directory>

#First controller 

	#controller.php

		class FirstController extends Controller
		{
		    public function actionIndex($message="<b>Hello</b>")
		    {
				$message = $message;
		        echo Html::encode($message);
			}
		}

	#view.php

		echo $message;

	#address

		https://localhost/yii/basic/web/index.php?r=first/index&message=HelloWorld	
	

	basic/                  application base path
    composer.json       used by Composer, describes package information
    config/             contains application and other configurations
        console.php     the console application configuration
        web.php         the Web application configuration
    commands/           contains console command classes (inbuilt yii commands or create custome Commands to run using CLI)
    controllers/        contains controller classes
    models/             contains model classes
    runtime/            contains files generated by Yii during runtime, such as logs and cache files
    vendor/             contains the installed Composer packages, including the Yii framework itself
    views/              contains view files
    web/                application Web root, contains Web accessible files
        assets/         contains published asset files (javascript and css) by Yii
        index.php       the entry (or bootstrap) script for the application
    yii                 the Yii console command execution script


    A user makes a request to the entry script web/index.php.
	The entry script loads the application configuration and creates an application instance to handle the request.
	The application resolves the requested route with the help of the request application component.
	The application creates a controller instance to handle the request.
	The controller creates an action instance and performs the filters for the action.
	If any filter fails, the action is cancelled.
	If all filters pass, the action is executed.
	The action loads some data models, possibly from a database.
	The action renders a view, providing it with the data models.
	The rendered result is returned to the response application component.
	The response component sends the rendered result to the user's browser.


	Note :  routes in Yii, which act as the bridge between user requests and controller actions.

#Application Components

	Applications are service locators. They host a set of the so-called application components that provide different services for processing requests. For example, the urlManager component is responsible for routing Web requests to appropriate controllers; the db component provides DB-related services; and so on.

	Each application component has an ID that uniquely identifies itself among other application components in the same application. You can access an application component through the expression:

	\Yii::$app->componentID	

	For example, you can use \Yii::$app->db to get the DB connection, and \Yii::$app->cache to get the primary cache registered with the application.

=====================================================================================================================================================
#Working With Forms 
	
	1. Create Model 

		The data to be requested from the user will be represented by an EntryForm model class as shown below and saved in the file models/EntryForm.php.

		#Code 	

			namespace app\models;

			use Yii;
			use yii\base\Model;

			class EntryForm extends Model
			{
			    public $name;
			    public $email;

			    public function rules()
			    {
			        return [
			            [['name', 'email'], 'required'],
			            ['email', 'email','message'=>'Please Provide A valide Email'],
			            ['name','string','message'=>'Please Enter The Name']
			        ];
			    }
			}	

		Note : 1. The class extends from yii\base\Model, a base class provided by Yii, commonly used to represent form data.
			   2. yii\base\Model is used as a parent for model classes not associated with database tables. yii\db\ActiveRecord is normally the parent for model classes that do correspond to database tables.


		The EntryForm class contains two public members, name and email, which are used to store the data entered by the user. It also contains a method named rules(), which returns a set of rules for validating the data. The validation rules declared above state that

		both the name and email values are required
		the email data must be a syntactically valid email address


		Note: In this very simple example we just render the confirmation page upon valid data submission. In practice, you should consider using refresh() or redirect() to avoid form resubmission problems.



	2. Create Controller 

		#code	

		namespace app\controllers;

		use Yii;
		use yii\web\Controller;
		use app\models\EntryForm;

		class FirstController extends Controller
		{
		    // ...existing code...

		    public function actionIndex()
		    {
		        $model = new EntryForm();

		        if ($model->load(Yii::$app->request->post()) && $model->validate()) {
		            // valid data received in $model
						
						return $this->render('entry-confirm', ['model' => $model]);
		        } else {
					echo "soory";
		            // either the page is initially displayed or there is some validation error
		            return $this->render('entry', ['model' => $model]);
		        }
				exit;
			}
		}

		The action first creates an EntryForm object. It then tries to populate the model with the data from $_POST, provided in Yii by yii\web\Request::post(). If the model is successfully populated (i.e., if the user has submitted the HTML form), the action will call validate() to make sure the values entered are valid.

	3. Create View File 

		1. entry.php

			use yii\helpers\Html;
			use yii\widgets\ActiveForm;
			?>
			<?php $form = ActiveForm::begin(); ?>

			    <?= $form->field($model, 'name') ?>

			    <?= $form->field($model, 'email') ?>

			    <div class="form-group">
			        <?= Html::submitButton('Submit', ['class' => 'btn btn-primary']) ?>
			    </div>

			<?php ActiveForm::end(); ?>	

		2. entry-confirm.php
			
			use yii\helpers\Html;
			?>
			<p>You have entered the following information:</p>

			<ul>
			    <li><label>Name</label>: <?= Html::encode($model->name) ?></li>
			    <li><label>Email</label>: <?= Html::encode($model->email) ?></li>
			</ul>

	#Magic Explained
		
		You may wonder how the HTML form works behind the scene, because it seems almost magical that it can display a label for each input field and show error messages if you do not enter the data correctly without reloading the page.

		Yes, the data validation is initially done on the client-side using JavaScript, and secondarily performed on the server-side via PHP. yii\widgets\ActiveForm is smart enough to extract the validation rules that you have declared in EntryForm, turn them into executable JavaScript code, and use the JavaScript to perform data validation. In case you have disabled JavaScript on your browser, the validation will still be performed on the server-side, as shown in the actionEntry() method. This ensures data validity in all circumstances.

		Warning: Client-side validation is a convenience that provides for a better user experience. Server-side validation is always required, whether or not client-side validation is in place.

		The labels for input fields are generated by the field() method, using the property names from the model. For example, the label Name will be generated for the name property.

		You may customize a label within a view using the following code:

		<?= $form->field($model, 'name')->label('Your Name') ?>
		<?= $form->field($model, 'email')->label('Your Email') ?>	

		
		#Summary
		In this section of the guide, you have touched every part in the MVC architectural pattern. You have learned how to create a model class to 
		represent the user data and validate said data.

		You have also learned how to get data from users and how to display data back in the browser. This is a task that could take you a lot of time when developing an application, but Yii provides powerful widgets to make this task very easy.		
				
=====================================================================================================================================================
#Working with Databases
	
	1. Creating an Active Record
		
		To represent and fetch the data in the country table, create an Active Record-derived class named Country, and save it in the file models/Country.php.

		namespace app\models;

		use yii\db\ActiveRecord;

		class Country extends ActiveRecord
		{
		}

	The Country class extends from yii\db\ActiveRecord. You do not need to write any code inside of it! With just the above code, Yii will guess the associated table name from the class name.
	
	Note : Active Record is a powerful way to access and manipulate database data in an object-oriented fashion. Alternatively, you may also interact with a database using a lower-level data accessing method called Database Access Objects.


	2. Creating an Action


		namespace app\controllers;

		use yii\web\Controller;
		use yii\data\Pagination;
		use app\models\Country;

		class CountryController extends Controller
		{
		    public function actionIndex()
		    {
		        $query = Country::find();

		        $pagination = new Pagination([
		            'defaultPageSize' => 5,
		            'totalCount' => $query->count(),
		        ]);

		        $countries = $query->orderBy('name')
		            ->offset($pagination->offset)
		            ->limit($pagination->limit)
		            ->all();

		        return $this->render('index', [
		            'countries' => $countries,
		            'pagination' => $pagination,
		        ]);
		    }
		}	

		Save the above code in the file controllers/CountryController.php.

		First, The index action calls Country::find(). This find() method creates a ActiveQuery query object, which provides methods to access data from the country table.

		To limit the number of countries returned in each request, the query object is paginated with the help of a yii\data\Pagination object. The Pagination object serves two purposes:

		Sets the offset and limit clauses for the SQL statement represented by the query object so that it only returns a single page of data at a time (at most 5 rows in a page).
		It's used in the view to display a pager consisting of a list of page buttons, as will be explained in the next subsection.
		Next, all() returns all country records based on the query results.

		At the end of the code, the index action renders a view named index, and passes the returned country data as well as the pagination information to it.

	3. Creating a View
		
		<?php
		use yii\helpers\Html;
		use yii\widgets\LinkPager;
		?>
		<h1>Countries</h1>
		<ul>
		<?php foreach ($countries as $country): ?>
		    <li>
		        <?= Html::encode("{$country->code} ({$country->name})") ?>:
		        <?= $country->population ?>
		    </li>
		<?php endforeach; ?>
		</ul>

		<?= LinkPager::widget(['pagination' => $pagination]) ?>	

		At first, you will see a page showing five countries. Below the countries, you will see a pager with four buttons. If you click on the button "2", you will see the page display another five countries in the database: the second page of records. Observe more carefully and you will find that the URL in the browser also changes to

		http://hostname/index.php?r=country%2Findex&page=2
		Behind the scenes, Pagination is providing all of the necessary functionality to paginate a data set:

		Initially, Pagination represents the first page, which reflects the country SELECT query with the clause LIMIT 5 OFFSET 0. As a result, the first five countries will be fetched and displayed.
		The LinkPager widget renders the page buttons using the URLs created by Pagination. The URLs will contain the query parameter page, which represents the different page numbers.
		If you click the page button "2", a new request for the route country/index will be triggered and handled. Pagination reads the page query parameter from the URL and sets the current page number to 2. The new country query will thus have the clause LIMIT 5 OFFSET 5 and return the next five countries for display.

		#Summary
		In this section, you learned how to work with a database. You also learned how to fetch and display data in pages with the help of yii\data\Pagination and yii\widgets\LinkPager.

========================================================================================================================================================
#Overview 
	Yii applications are organized according to the model-view-controller (MVC) architectural pattern. Models represent data, business logic and rules; views are output representation of models; and controllers take input and convert it to commands for models and views.


	#Besides MVC, Yii applications also have the following entities:

		entry scripts: they are PHP scripts that are directly accessible by end users. They are responsible for starting a request handling cycle.
		applications: they are globally accessible objects that manage application components and coordinate them to fulfill requests.
		application components: they are objects registered with applications and provide various services for fulfilling requests.
		modules: they are self-contained packages that contain complete MVC by themselves. An application can be organized in terms of multiple modules.
		filters: they represent code that need to be invoked before and after the actual handling of each request by controllers.
		widgets: they are objects that can be embedded in views. They may contain controller logic and can be reused in different views.


#entry Script 
	
	Entry scripts mainly do the following work:

	Define global constants;
	Register Composer autoloader;
	Include the Yii class file;
	Load application configuration;
	Create and configure an application instance;
	Call yii\base\Application::run() to process the incoming request.	


	index.php

		defined('YII_DEBUG') or define('YII_DEBUG', false);			false -> prodution , true -> development


	Entry scripts are the best place for defining global constants. Yii supports the following three constants:

	YII_DEBUG: specifies whether the application is running in debug mode. When in debug mode, an application will keep more log information, and will reveal detailed error call stacks if exceptions are thrown. For this reason, debug mode should be used mainly during development. The default value of YII_DEBUG is false.
	YII_ENV: specifies which environment the application is running in. This will be described in more detail in the Configurations section. The default value of YII_ENV is 'prod', meaning the application is running in production environment.
	YII_ENABLE_ERROR_HANDLER: specifies whether to enable the error handler provided by Yii. The default value of this constant is true		

======================================================================================================================================================	
#Yii Videos best one 

======================================================================================================================================================
#config File 
	
	$config = [
		'id'=> 'basic'								// set application Name,
		'name'=> 'Deepu Bhasin'						// Show the name in the Nav bar 
		'defaultRoute'=>'site/login'				// create default route
		'language'=>'de'							// sent language into germen
		'layout'=>'main2'							// set the other layout
		'components'=> [
			'assetManager'=[
				'appendTimeStamp'=> true,			// it will set the time version with css and js files to remove the cache
			]
		]
	]






















======================================================================================================================================================	
#Yii Videos

======================================================================================================================================================

#Download Projetc 
							Create Command /pacakge name          /directory name
Basic     					:: composer.phar create-project yiisoft/yii2-app-basic basic

Advanced   					:: composer.phar create-project yiisoft/yii2-app-advanced advanced
				
Download Compress Images 	:: composer require yiisoft/yii2-imagine D


 # php yii              :: will show all the commands (its a Command line application for yii or console application)

 #php serve             :: will show the running port

 #php -v 				:: will show you the current version of the php

 #User Contribution 	:: https://www.yiiframework.com/extensions



 #Migrate or migration are those files which contains Database tables logics 

============================================================================================================================================
#Run the yii 
	
	1. using CMD

		 php yii serve -> click on the link to open the yii in the browser 

		 this command will create automatically virtualhost in ubuntu for basic yii2 project 

		 hit http://localhost:8080

	2. using Local host 
		
		Open browser -> localhost -> basic -> web 

		Note 
			1. Site in the address bar means id of the controller
			2. site/login and 'login' in the address bar means id of the action   




============================================================================================================================================
#Various Nampsaces 
	
	1. Controller 			
		
		namespace app\controllers;
		use yii\web\Controller;

	2. Html 
		
		use yii\helpers\Html;	

		echo Html::encode($message);			// prevent from crosss-site Scripting 

	3. NavBar 
		
		use yii\bootstrap\Nav;
		use yii\bootstrap\NavBar;
		
	4. Use Css and Js Files (CommonFiles)	
		
		use app\assets\AppAsset;
		AppAsset::register($this);					// this function allows us to use js and css files
	
	5. Use Breadcrumb
		
		use yii\widgets\Breadcrumbs;	

	6. Html Pages Functions 
		
		<?php $this->beginPage() ?>
														// write title, heads, links, meta tags 
			<?php $this->beginBody() ?>					
														// write html body here 
			<?php $this->endBody() ?>
		<?php $this->endPage() ?>	

	7. For Query Builders 

		use yii\db\Query;	

	8. For Models

		use app\models\Articles	

	9. For creating Form 

		use yii\bootstrap\ActiveForm;

============================================================================================================================================
#Controller 
   
   1. Directory Structure 

        basic -> Controller -> FilenameController.php
    
   2. Code 
     
        namespace app\controllers;

        use yii\web\Controller;


        class FirstController extends Controller
        {
            public function actionIndex()
            {
                echo "testing";
            }
        }

    3. Calling Controller

                                          ControllerName/Function name
        http://localhost/yii/basic/web/index.php?r=first/index

        a. actionDemo               :: demo
        b. actionDemoFirst          :: demo-first
        c. actionDemo_second        :: demo_second    



    Note : 1. Function Name allways start wih 'action' keyword 
           2. Function name should be capital but in address bar it should be lower case to call that function
           3. Controller file name always end with 'Controller' keyword. 
           4. DemoTest means demo-test in every case like files, functions etc 

 ============================================================================================================================================
 #View
    1. Directory Structure
        basic -> Views -> FolderName -> viewFiles

    Note : ControllerName and Folder name in View should be same exmaple 
            ControllerName      -> FirstController
            ViewFolderName      -> First

            Store all the files in the first folder which belongs to FirstController only.


    2. Controller File Code 

        public function actionTest(){

             $this->layout = false;                              // to stop by default layout (optional) 
                    or 
            return $this->renderPartial('index');            // to stop by default layout (optional) 

            return $this->render('index');
            
        }

    3. View Folder
        View Folder -> First (folder) -> index.php 

 ============================================================================================================================================
 #Change Layout 

	Note : when ever we call any view automatically default layout will call which contains header and Footer.

 	1. Folder and File 

 		basic -> view -> create New Folder (layouts2) -> create file (main2.php)

 		basic Code(below) 

 		<?php
			use yii\helpers\Html;
			use app\assets\AppAsset;

			AppAsset::register($this);
			?>
			<?php $this->beginPage() ?>																// Starting of html Page 
			    <!DOCTYPE html>
			    <html lang="<?= Yii::$app->language ?>">
			    <head>
			        <meta charset="<?= Yii::$app->charset ?>">
			        <meta http-equiv="X-UA-Compatible" content="IE=edge">
			        <meta name="viewport" content="width=device-width, initial-scale=1">
			        <?php $this->registerCsrfMetaTags() ?>
			        <title><?= Html::encode($this->title) ?></title>								// Print title , which will comes from index or other page
			        <?php $this->head() ?>															// Printing of All the Heads
			    </head>
			    <body>
			    <?php $this->beginBody() ?>															// Starting of body 	

			        <div class="wrap">
			            <div class="container">
			                <h1>This is my another main layout Page</h1>  
			            <?= $content ?>
			            </div>
			        </div>

			        <footer class="footer">
			            <div class="container">
			                <p class="pull-left">&copy; My Company <?= date('Y') ?></p>
			            </div>
			        </footer>

			    <?php $this->endBody() ?>															// Ending of body
			    </body>
			    </html>
			<?php $this->endPage() ?>																// Ending of html Page 	


	2. Configuration of Layout file 
 		
 		#basic -> config -> web.php

 			Add these lines in Config array 

 				'layoutPath'=>'@app/views/layouts2',
    			'layout'=>'main2',	

					OR

    	#in controller you can directly call 

    		public function actionDemo_second()
		    {
		        $this->layout = 'main2';
		        return $this->render('index');
		    }		

    3. creating meta Tags 

    	view -> folder (first) -> index.php

    		$this->title = 'This is My Web page';									// for creating your own title 
			$this->params['breadcrumbs'][] = $this->title;							


			#add below written codes just below the above codes 

    		Yii::$app->view->registerMetaTag([
			    'title'=>'my first Page',
			    'content'=>'test test',
			]);			

	4. Adding js Code 
		view -> folder (first) -> index.php
		
		at the end of the page 
		<?php
			
			$this->registerJs('alert(12)');								// when you dont want to add common js  

		?>		
================================================================================================================================================================
#load Css and JS (common in all files)
	

a. Common in all
	1. Folder 
		basic -> assets -> AppAssets.php

		class AppAsset extends AssetBundle
		{
		    public $basePath = '@webroot';
		    public $baseUrl = '@web';
		    public $css = [
		        'css/site.css',										// add here your Css here
		    ];
		    public $js = [											// add here your js here
		    ];			
		    public $depends = [
		        'yii\web\YiiAsset',
		        'yii\bootstrap\BootstrapAsset',
		    ];
		}

	2. load in layout File 

		basic -> view -> layouts -> main.php	 
		
		use app\assets\AppAsset;									// load to variable that files 

		AppAsset::register($this);									// loading function 
        
b. Individual JS and CSS
	
	1. Create new File 

		basic -> assets -> TestAssets.php (copy from the already exist file)

		class TestAsset extends AssetBundle
		{
		    public $basePath = '@webroot';
		    public $baseUrl = '@web';
		    public $css = [
		        'mytest.css'										// add css
		    ];
		    public $js = [
		        'test.js'											// add js 
		    ];
		}

	2. load in layout File  	

		basic -> view -> layouts -> main.php	 
		
		use app\assets\TestAsset;									// load to variable that files 

		TestAsset::register($this);									// loading function 
=================================================================================================================================================================
#Working with Request
	
	http://localhost/yii/basic/web/site/?id=10

	$id = Yii::$app->request->get('id','default value');					//get method 
	$id = Yii::$app->request->post();										//post method
    echo $id;


    #disable Csrf tokken 

    	a. for all actions

		    write this below code in the controller 

		    	public $enableCsrfValidation = false;

		b. for a particular action

			public function beforeAction($action)
			{
				return parent::beforeAction($action)
			}   

	#various request in yii (to check the request before requet perform)
		
		1. Yii::$app->request->isGet();	
		2. Yii::$app->request->isPost();	 		 	
		3. Yii::$app->request->isDelete();	
		4. Yii::$app->request->isPut();	
		5. Yii::$app->request->isPatch();	
		6. Yii::$app->request->hostInfo();							// return the host 
		6. Yii::$app->request->pathInfo();							// return the other address info 


	#fileinput() method same as in php 
		
		1. add code in the controlle in any function 

			
			public function actionCreate($idparam)
			{
				echo Yii::$app->request->get();
				$id = Yii::$app->request->getBodyParams();

			}
		2. Select raw option from the postman 

			{'id':12,'data':'testing'}

			#add header 

			Content-type = application/json


			#add line in the code in the config folder -> web.php

			add line the components -> request array 
				
				paramas => [
								'application/json'=> \yii\web\JsonPasres::class 
					]	 

		3. Hit address (from the post man)

				https://localhost/yii/basic/web/site/
								
								or 

				https://localhost/yii/basic/web/site/?id=10

		4. To print the user agent 

			$id = Yii::$app->request->userAgent()										//print the user agent


		5. To print all the headers  

			$id = Yii::$app->request->readers											//print the headers of the page

		6. To print use IP  

			$id = Yii::$app->request->userIP											//print the user Ip 

=================================================================================================================================================================
#Format Respnse 
	
	1. Using return 

		public function actionResponse(){
			return 'Hello World'										// we use simple return keyword to print the data in the browser 
		}

	2. using $app variable 

		public function actionResponse(){
			return Yii::$app->response->content = 'Hello World';		// return just simple data using yii
		}

	3. responsein various form

		public function actionResponse()
		 {
			return Yii::$app->response->format = Response::FORMAT_JSON		// return the data in the from of json like json_encode
			return Yii::$app->response->format = Response::FORMAT_RAW		// return the data in the from of raw 
			return Yii::$app->response->format = Response::FORMAT_HTML		// return the data in the from of html 	
			return Yii::$app->response->format = Response::FORMAT_JSONP		// return the data in the from of jsonp 
			return Yii::$app->response->format = Response::FORMAT_XML		// return the data in the from of xml 




			return [														// return the data in above defined form
				'name'=>'Deepinder',
				'number'=>'9915099247'
			];
		}

	Note : in case we return from some where else then we use 
		
		Yii::$app->response->data = [										
				'name'=>'Deepinder',
				'number'=>'9915099247'
			];





=================================================================================================================================================================
#Routes 
	
	basics -> config -> web.php
	
a. Adding Slashes in Address bar  

	1. 	uncomment The Below Code 

		/*
	        'urlManager' => [
	            'enablePrettyUrl' => true,
	            'showScriptName' => false,
	            'rules' => [
	            ],
	        ],
        */	

     2. Hit address in the address bar 
     	
     		http://localhost/yii/basic/web/first/demo_second 

b. Creating your own Routes 
	
	a. Create Dynamic Routes

		1. 	uncomment The Below Code 

		 'urlManager' => [
	                'enablePrettyUrl' => true,
	                'showScriptName' => false,
	                'rules' => [
	                    'second'=>'first/demo_second',								// creating own address 
	                    'first'=>'first/demo-first'									// creating own address 

	                    	or 

	                     'site/about/<id>'=>'site/about',							// means redirect to about function 			

	                ],
	            ],



	    2. Hit address in the address bar 
	     	
	     		a. http://localhost/yii/basic/web/second
	     		
	     		b. http://localhost/yii/basic/web/first   


	b. Creating Dynamic Routes and sending values in address bar 

		1. hitting Address 

			a. http://localhost/yii/basic/web/first/testing
			b. http://localhost/yii/basic/web/second/testing

		2. setting Code 
			
			basic -> config -> web.php 	

		'rules' => [
                    [
                        'pattern'=>'first/<others>',										// setting key where we will get the value 
                        'route'=>'first/info',												// controller Name/Function Name
                        'defaults'=>[														// setting Default Values Array 
                                'default-value-1'=>'hello 1',								// setting Default Values	
                                'dafult-value-2'=>'hello 2'									// setting Default Values		
                        ]
                        
                    ],
                    [
                        'pattern'=>'second/<others>',										// setting key where we will get the value 
                        'route'=>'first/demo-first',										// controller Name/Function Name
                        'defaults'=>[														// setting Default Values Array 
                                'default-value-1'=>'hello 1',
                                'dafult-value-2'=>'hello 2'
                        ]
                        
                    ]

                ],
        
         3. Controller Code 
         	
         	use Yii;

         	public function actionInfo(){
		        $data= Yii::$app->request->get() ;											//this method is used to get the data 
		        echo "yes";
		        echo "<br/>";
		        print_r($data);


		    }

		    public function actionDemoFirst()
		    {
		        $data= Yii::$app->request->get() ;
		        echo 'demofirst';
		        echo "<br/>";
		        print_r($data);
		    }  

		  4. Output 
		  	 
		  	 a. yes
				 Array ( [default-value-1] => hello 1 [dafult-value-2] => hello 2 [others] => testing )


			  b. demofirst
				 Array ( [default-value-1] => hello 1 [dafult-value-2] => hello 2 [others] => testing )            		     

=================================================================================================================================================================
#Database 
	
a. Setting up Single Database 

	1. Setting up Connection

		basic -> config -> db.php

		Add database name 	

	2. Write Query in controller 

		use Yii

		public function actionDemo_second()
		{
		    $data = Yii::$app->db->createCommand('SELECT * FROM employees')->queryAll();		// select Table from the database 
		}

		Note : in the above command we did not create Object of the Model

b. Setting Mutiple Database
	
	1. Setting up Connection

		basic -> config -> db.php

			return $db=['db1'=>[
		    'class' => 'yii\db\Connection',
		    'dsn' => 'mysql:host=localhost;dbname=tutorial',
		    'username' => 'root',
		    'password' => '',
		    'charset' => 'utf8',

		    // Schema cache options (for production environment)
		    //'enableSchemaCache' => true,
		    //'schemaCacheDuration' => 60,
		    //'schemaCache' => 'cache',
		],
		'db2'=>[
		    'class' => 'yii\db\Connection',
		    'dsn' => 'mysql:host=localhost;dbname=codeigniterproject ',
		    'username' => 'root',
		    'password' => '',
		    'charset' => 'utf8',

		    // Schema cache options (for production environment)
		    //'enableSchemaCache' => true,
		    //'schemaCacheDuration' => 60,
		    //'schemaCache' => 'cache',
		]]; 

	2. 	Setting Up Array in the config -> web.php and add the below code the in the config array 

		'db1' => $db['db1'],
        'db2' => $db['db2'],	

    3. creating Query
    	
    	  public function actionDemo_second()
		    {
		        $data1 = Yii::$app->db1->createCommand('SELECT * FROM employees')->queryAll();			// calling from the another database 
		        $data2 = Yii::$app->db2->createCommand('SELECT * FROM users')->queryAll();				// calling from the another database 
		        echo "<pre>";
		        print_r($data1);
		        print_r($data2);

		        // $this->layout = 'main2';
		        // return $this->render('index');
		    }    

=================================================================================================================================================================
#Using GUI 
	
	Note 
		 'enablePrettyUrl' => false,
         'showScriptName' => false,

         both paremeter should set False (web.php)

a. Creating Controller
	
	1. hit Address 

		http://localhost/yii/basic/web/index.php?r=gii 

					or 

		http://localhost/yii/basic/gii			

	2. Click on Controller 

		1. app\controllers\DemoController					// provide Controller Name
					|
			rest of thinks should Blanks 
					|
			Click on Preview button 
					|
			Click on Generate Button
				
			Then Controller and View File will automatcially Created				

		
b. Creating Model
	
	1. hit Address 

		http://localhost/yii/basic/web/index.php?r=gii 
	
	2. Click on Model		

		Note : In database you should Select only one database 


		1. Select Table from the Drop down (which is automatically generated)
						|
			Click on Genereta Button 

			then go to Basic -> Model Folder -> ModelName.php


c. Creating Form	
	
	1. hit Address 

		http://localhost/yii/basic/web/index.php?r=gii 

	2. Click Form 
		a. demo/demo_home								// view name / form name
		b. select Model 								// app\models\Articles

	3. Copy Code in Controller which is generated by yii
		
		public function actionDemo_home()
		{
		    $model = new \app\models\Articles();

		    if ($model->load(Yii::$app->request->post())) {
		        if ($model->validate()) {
		            // form inputs are valid, do something here
		            return;
		        }
		    }

		    return $this->render('demo_home', [
		        'model' => $model,
		    ]);
		}				

	4. hit the url 

		 http://localhost/yii/basic/web/index.php?r=demo/demo_home


d. creating Crud 
	
		1. Creating Model Class 

			use app\models\Articles

		2. Search Model Class
			
			use app\models\ArticleSearch					// provide any name 

		3. Create Model Name 

			app\controllers\ArticleController

		4. Create View 
			
			@app/views/article	

		click on Generate Button 

		Note Before creating CRDU Create Model First by using Model Generator


		#Note : 
				1. when you create backend gii then use 'backend' instead of 'app'
				2. when you create backend or frontend view  then use 'backend/view/video' or 'frontend/view/video' instead of  '@app\views\article'
				3. when you create frontend gii then use 'frontend' instead of 'app'



==============================================================================================================================================
#ORM
	
	Object Relation Mapping  

		1. An ORM is layer thats site between your database and your application 
		2. ORM in computer is a programming technique (machanism) for converting data between incompatible type systems using (OOPS) object -oriented programming language 
		3. An ORM is the layer between the database and your application. By using an ORM, a lot of the hardwork of creating, updating, reading and deleting from the databae is taken care for us.


		OOPS Objects------>ORM-------->SQL

		OOPS Objects<------ORM<--------SQL

		 a. all data of application will be in Objects form and database date will be in Tables form 
		 b. application pass his object to the ORM so it can store data or da any thing in Sql(tables) , every thing done automatcially ORM , we just simply pass our application Object to ORM  
		 c. so map Objects and SQL using Classes name which is same as table name of the SQL and variable of class are same the column name of the tables 

		There are two types of ORM	
			1. Data Mapper ORM
			2. Active Record ORM 

		Example's of ORM are : 
			1. Docttrine		-> sybiny
			2. Eloquent			-> Laravel
			3. Propel 			
			4. Redbean	

			these all are PHP ORM


	Why we use ORM 
		In Object oriented programming, you work with objects as your main point of reference. (means we only want to work in objects)	

	Note : 1. Yii is a full-stack framework providing many proven and ready-to-use features: query builders and ActiveRecord for both relational and NoSQL databases; RESTful API development support; multi-tier caching support; and more.		


==============================================================================================================================================
#Model (Active Records)
	
	1. Call Model in controller 

		Write these lines in Controller 

		use app\models\Articles;
		use Yii
		

	
	#Various CRUD function 

		1. Insert 				

			$data = new Articles();					// Createing Object
			$data->title='test';					// Column Name
	        $data->body='test';						// Column Name
	        $data->user_id=1;						// column name
	        $data->save();							// function is used to save 
	        echo "yes";


	    2. Updating 

	    	$data = Articles::findOne(8);			// finding the value from the objects 
			$data->title='updating test';
	        $data->body='updating body';
	        $data->user_id=2;
	        $data->save();  


		3. Delete 

			$data = Articles::findOne(8);			// finding the value from the objects 
        	$data->delete();	  					//delete particluar row

		4. Select 

			a. Print All Values 
				  
				$data= Articles::find()->all();									// print all the data 
				echo "<pre>";
				print_r($data);
				exit;	

			b. Print all the data in the array From 

				$data= Articles::find()->asArray()->all();

			c. Print all data with where Conditon 

				$data= Articles::find()->where(['id'=>9])->all();
			
			d. print all data with where and in query 

				 $data= Articles::find()->where(['id'=>[8,9,7,6]])->all(); 

			e. print all data with where , in , order by query 

				 $data= Articles::find()->where(['id'=>[8,9,7,6]])->groupBy('id')->orderBy('user_di')->all(); 

				 SELECT * FROM `articles` WHERE `id` IN (7, 8, 9) GROUP BY `user_id` ORDER BY `id`	  		

			f. to Create Sql Command as Raw
				
				$data= Articles::find()->where(['id'=>9])->all();
				echo $data->createCommand()->getRawSql();

				SELECT * FROM `articles` WHERE `id`=9
				

			g. Print All with the where condition 

				 $data= Articles::findAll(['user_id'=>2]);				// finding with which contain user_id 2

			h. print top one Asc 

				$data= Articles::find()->one();

			i. Print One particluar Result 

				$data= Articles::findOne(9);					//filling Id number	  	

			k. Select and joins 

				$data = Articles::find()
				 ->select('*')
				->innerJoin('user as u','u.id=articles.user_id')
				->leftJoin('a as a','a.id=articles.a_id')
				->where(['id'=>[7,8,9]])
				->groupBy('user_id')
				->orderBy('id')->all();

			l. Normal Query	

				$data = Yii::$app->db->createCommand("SELECT * FROM Atricles")->queryAll();	

			Note 

				1. if ww want to use count or aggregate functions 

					$db->createCommand("SELECT COUNT(*) from user")->queryScalar();

				2. For sql Injections 
					
					1. bindparameter
					2. bindvalues 	

==============================================================================================================================================
#Query Builder (means binding a parameter same as like in pdo and here we donnot create modes we just create model instance)
	 
	1. Model 	 
	 	
		 use yii\db\Query;

		a. Insert Query
		 	public function getData(){														// create your own function 
					$sql = Yii::$app->db->createCommand()->insert('articles',[				// insert query 
						'title'=>'queryBuilder',
						'body'=>'queryBuilderBody',
						'user_id'=>1
				])->execute();

					$lastId = Yii::$app->db->getLastInsertId();								// lastinserted Id
					return $lastId;										
			}

		b. Update Query 
			 $sql = Yii::$app->db->createCommand()->update('articles',[
                'title'=>'UpdatequeryBuilder',
                'body'=>'UpdatequeryBuilderBody',
                'user_id'=>1
            ],array('id'=>[1,2,3,4,5,6,7,8]))->execute();					// for binding, we can use this -> ,array('id=:id',array(':id'=>1))->execute

		c. Delete Query 
			$sql = Yii::$app->db->createCommand()->delete('articles',array('id'=>[1,2,3,4,5,6,7,8]))->execute();	


		d. Select Query 

			1.	// Normal Query 
				
				$query =(new Query())->select('*')->from('articles')->where(['id'=>10])->all();

			2. // Only One Result
				
				$query =(new Query())->select('*')->from('articles')->where(['id'=>10])->one();

			3. // Create Raw Query 

				$query =(new Query())->select('*')->from('articles')->where(['id'=>10]);
            	echo $query->createCommand()->getRawSql();

			4. Create query With where and Conditon 
				
				$query =(new Query())->select(['user_id','title','body'])->from('articles')->where(['id'=>10])->andWhere(['email'=>'xx@gmail.com']);		

			4. Create query With where,and, or Conditon 
				
				$query =(new Query())->select('*')->from('articles')->where(['id'=>10])->andWhere(['email'=>'xx@gmail.com'])->orWhere(['name'=>'Deepinder']);

			5. Create Or Query 

				$query =(new Query())->select('*')->from('articles')->where(['id'=>10])->andFilterWhere(['or',['Like','article.title','test'],['Like','article.body','bodytest']]);
            echo $query->createCommand()->getRawSql();

				SELECT * FROM `articles` WHERE (`id`=10) AND ((`article`.`title` LIKE '%test%') OR (`article`.`body` LIKE '%bodytest%'))	

			6. Groupby and orderBy

				 $query =(new Query())->select('*')->from('articles')->where(['id'=>10])->andFilterWhere(['or',['Like','article.title','test'],['Like','article.body','bodytest']])->groupBy('user_id')->orderBy('id')->limit(5)->offset(4);
            	echo $query->createCommand()->getRawSql();

				SELECT * FROM `articles` WHERE (`id`=10) AND ((`article`.`title` LIKE '%test%') OR (`article`.`body` LIKE '%bodytest%')) GROUP BY `user_id` ORDER BY `id`			


			5. // Create Raw Query 

				$query =(new Query())->select('*')->from('articles')->leftJoin()->innerJoin()->where(['id'=>10]);
            	echo $query->createCommand()->getRawSql();	

	2. Controller 

		$data= new Articles;
       echo $data->getData();	

=============================================================================================================================================
#Components (Same like helper in Codeigniter where we can call this function to every where )


	1. create folder 

		basics -> Folder anyname (Components)


	2. Create File 
		
		basics -> Folder anyname (components) -> anyFilename (Commoncomponent.php)


		namespace app\components;													//write Folder Name
		
		use yii\base\Component;														//component Class				

			Class CommonComponents extends Component{								// create class according to filename

					public function getToken(){
						return 'DJDIDJFHUIEKDPWIEURYEUIOWSLXMCNVBFDHUWISLD';
					}
			}	

	3. Define components in web.php 

		add key-value pair in the config folder 

		'common'=>[
				class=>'app\components\CommonComponents',							//app\foldername\filename
				class=>'app\components\CommonComponents2',							//app\foldername\filename	
		]
					or

		'common'=>'app\components\CommonComponents'	
		
					or 
		'common'=>function(){
			return new \app\components\CommonComponents(); 
		}	



	4. Create Controller 

		  public function actionComponent(){
				echo Yii::$app->common->getToken();									//calling component
			}				

=============================================================================================================================================
#Widgets

	Location Of all Widgets

		basic -> vender -> yiisoft -> yii2 -> base -> widget -> all widget there


	#breadcrumbs widget 

		$arrayList=[                                                                             // creating array   
			'dashboard',                                                                        // creating simple text
			[
				'label'=>'Home',                                                                //creating Text     
				'url'=>'home'                                                                   //making link using text     
			],
			[
				'label'=>'about',
				'url'=>['about','id'=>1],                                                       // providing id with link 
			],
			[
				'label'=>'testing',
				'url'=>['testing','id'=>3],
				'template'=>'<li><span style="font-style: italic;">{link}</li>',                // adding html element to particular 
			]
		]
	
			<?= Breadcrumbs::widget([                                                           //calling the breadcrumbs 
				'itemTemplate'=>"<li><b>{link}</b></li>",                                       // making html element to all the breadcrumbs
				'links'=>$arrayList                                                             // making breadcrumbs using array
			]);?>

=============================================================================================================================================
#Custome Widgets

	1. creating File 

		basic -> widget -> filename (Form.php)

		Code 

		namespace app\widgets;

		use yii\base\Widget;

		Class Form extends Widget{

			public $pageType;									//variable name  
			public $Tag;										//variable name
			public $records;									//variable name

			public function init(){								// this function always run first before any other function 
				parent::init();
				echo "run first in this file";				

			}



			public function run(){								// default function 
				echo "<pre>";
				print_r($this->records);
				return $this->pageType.' '.$this->Tag.' '.'<input type="text" name="firstName" value="" placeholder="Enter FirstName"/>';
			}

		}

	2. View file Code 

		basic -> view -> folderName -> anyFilename

			use app\widgets\Form;
			echo Form::widget(['pageType'=>'Home Page','Tag'=>'Label','records'=>[1,2,3,4,5]]);				// key which we passed in this sholud be same as variable name in class 
===========================================================================================================================================
#Sessions

	1. Set Session 
		
		Yii::$app->session->set('username','Code Improved');

	2. Get Session 

		Yii::$app->session->get('username');

	3. Unset Session

		  unset(Yii::$app->session['username']); 			// to unset particluar key
    	  Yii::$app->session->remove('username');			// to unset particluar key
          Yii::$app->session->destory();					// to unset all keys

===========================================================================================================================================
#Flash Session

	1. Set Session Data

		Yii::$app->session->setFlash('message','Success');

	2. Get Session Data 	

		Yii::$app->session->getFlash('message');


===========================================================================================================================================
#Module Generater (basically its a separation conecept of various modules)

	1. hit address

		http://localhost/yii/basic/web/index.php?r=gii

	2. Create Module Generator

		Module Class 		::		app\modules\admin\Module							
		Module ID			:: 		Generate automatically

		Click on Generate

		Note i write 'admin' but i can write any name 

	3. Create Module Code 

		Paste the below Code any where in web.php -> $config (array) 

		  'modules' => [										
				'admin' => [
					'class' => 'app\modules\admin\Module',							// admin Module
				],
				'demo' => [
					'class' => 'app\modules\demo\Module',							// demo Module
				],
			],


	4. Hit address to run Module 

		1. http://localhost/yii/basic/web/admin					(work in 'enablePrettyUrl' =>true)

		2. http://localhost/yii/basic/web/index.php?r=admin		(work in 'enablePrettyUrl' =>false)


	Note : To call Yii controller in the Module Controller

		1. Change namespace of Yii Controller

			namespace app\modules\admin\models;  	by		 namespace app\models; 

		2. To Call yii Controller

			Add the below code in New Module

				use app\modules\admin\models\ModelName (like Articles)			

				Then write functions or programs

===========================================================================================================================================
#Behaviors and Before Request Event

	Behaviour are always calls first when ever we load controller (we can use this as for authentication , ip validations)

	1. Create file 

		basic -> Components (create Folder) -> MyBehaviour.php

		Code 

		namespace app\components;
		use yii\base\Behavior;
		use Yii;

		Class MyBehaviour extends Behavior{

				public $variable1;										// variable created for run time 
				public $variable2;										// variable created for run time

				public function events(){								//default function 
						echo $this->variable1;
						echo "<br/>";
						echo $this->variable2;
						echo "<br/>";
						echo "Behaviour Yes";
						echo "<br/>";
						return [];
				}
		} 

	2. Call Behavior 

		a. Calling behaviour in particular Controller (it will excute on all functions)

			namespace app\controllers;
			use app\Components\MyBehaviour;
			use Yii;


			public function behaviors()											//by default function and run always first 
			{	
				return [
				MyBehaviour::className(),                                        // anonymous behaviour     -1
				[                                                
					'class'=>MyBehaviour::className(),                           // anonymous behaviour   	-2
					'variable1'=>'Variable Data 1',                              // setting variable         
					'variable2'=>'Variable Data 2'
				],   
				'behaviour'=> MyBehaviour::className()                           // name behaviour     		-3
				];
			}

			Note : 1. Calling behaviour in above 3  different Methods 

					2. calling in the particalur function (i did not complete that video)

		b. Calling behaviour in all Controller using web.php  (it will excute on particular functions)

			copy this code in the web.php file anywhere 

					'as myBehaviour'=>[                                                
				'class'=>'\app\components\MyBehaviour',                           
				'variable1'=>'Variable Data 1',                              
				'variable2'=>'Variable Data 2'
			],

===========================================================================================================================================
#Events 

	Trigger Something Like Sending Email, Sending any kind Of notification etc and it is created Globally 

	1. create File  

		a. 1. Global Event	
			

			1. Setting up files 

				basic -> web -> events.php

				#Code 

				use yii\base\Event;

					function upperData(Event $event){
						echo strtoupper($event->data);
					}	

			2. Call event File 

				basic -> web -> index.php 

				#Code 

					 require 'events.php';

			3. Create Code In controller

				Const Event_DEMO = 'Event_DEMO';
   
				public function actionIndex()
				{
					$this->on(self::Event_DEMO,'upperData','Hello World');  
					$this->trigger(self::Event_DEMO);
					$this->off(self::Event_DEMO);
					//  return  $this->render('demo');
				}	
		2. Global 

			1. Const Event_DEMO = 'Event_DEMO';

				 public function actionIndex()
				{
				\Yii::$app->on(self::Event_DEMO,'upperData','Hello World');  
				\Yii::$app->trigger(self::Event_DEMO);
				\Yii::$app->off(self::Event_DEMO);
					//  return  $this->render('demo');
				} 		 		

			2. In the web.php file 

				add below code in the config array 

				 'on beforeRequest'=>function(){
			        echo "<pre>";
			        echo "this is calling from the before request Module";
			        exit;
			    } 		

		b. 1. Local event 

			Const Event_DEMO = 'Event_DEMO';

			public function actionMySelfEvent()
			{
				$this->on(self::Event_DEMO,
					function (Event $event){
						echo strtoupper($event->data);

						// create here code 

					},'Hello World'); 
				$this->trigger(self::Event_DEMO);
				$this->off(self::Event_DEMO);
				//  return  $this->render('demo');
			}

			2. Local Event  

			Const Event_DEMO = 'Event_DEMO';

			 public function actionTest()												
			{
				$this->on(self::Event_DEMO,[$this,'upperData'],'HHHHHHHHHH WWWWWWWWWW');  	// calling the function 
				$this->trigger(self::Event_DEMO);
				$this->off(self::Event_DEMO);
				//  return  $this->render('demo');
			}

			public   function upperData(Event $event){						// this function is already exist in events files 
				echo strtolower($event->data);
			}	

			3. Local Event 

				public static  function upperData(Event $event){
					echo strtolower($event->data);
				}

				 public function actionMySelfEvent()
				{
					Event::on(self::className(),self::Event_DEMO,
						function (Event $event){
							echo strtoupper($event->data);

							// create here code 





							},'Hello World'); 
					Event::trigger(self::className(),self::Event_DEMO);
					Event::off(self::className(),self::Event_DEMO);
					//  return  $this->render('demo');
				}
===========================================================================================================================================
#Before and After Action  (this is controller wise)

	1. When ever we call any controller before function and after function Calls Its self automaticlly for Example you call Index function before and after function Call its self when we call index 

	2. Majorly beforeAction Use in authentication or session checking and afterAction use in appending Data 

	1. Settin Up Code 

	basic -> controller -> ControllerName

	#code 
		public function beforeAction($action){
			parent::beforeAction($action);
			echo  "Before Action";
			return True;

			var_dump($action)							// var dump this object and you will get alot of information 
		}

		Note : we can make  condition according to that like 

					if($action->id ==='index'){
						$this->layout = 'admin';
					}


	
		public function actionIndex()
		{
		echo " Index action";
			return True;
		}
		public function afterAction($action,$result){
			echo " After Action";
			$result = parent::beforeAction($action,$result);
			return $result;
		}
		public function actionTest()
		{
		echo " Test action";
			return True;
		}

	2. Hit Url 

		1. http://localhost/yii/basic/web/articles/index

		2. http://localhost/yii/basic/web/articles/test

	Before and After call every time its self when ever we call any controller

	Note : there is 'on' method also for before action 

			Yii::$app->controller->on(\yii\web\Controller::EVENT_BEFORE_ACTION,function(){
				echo "<pre>";
				echo "Controller before action from on method";
				exit; 

			})


	Controller Life cycle 

		1. yii\base\Controller::int()
				|
			Create an action 
			Default action 
			actions() map 
			inline action 
			invalidRoute Exception 						


			Application::beforeAction 
			Module::beforeAction 
			Controller::beforeAction 
				run action 
			Controller::afterAction 			








===========================================================================================================================================
 #Before Request & Before Action (this is global wise)

		every Point are same as above the main difference is that its work on global 

		1. setting up codes

			basic -> web -> config.php


			Paste this code in the config array 

			  'on beforeAction'=>function($event){							
				echo "<pre>";
				echo ($event->action->id);
				echo "<br/>";
				print_r ($event->action->controller->id);
				echo "<br/>";
				// print_r ($event->action->controller);
				exit;
			echo  "Before Action From Web.php";
			},

						or 

			'on beforeAction'=>function($event){
				Yii::$app->controller->on(\yii\web\Controller::EVENT_BEFORE_ACTION,function(){
					echo "hello before action here";
				});

			}				






			'on beforeRequest'=>function(){
				echo "yes";
			},


		Note : 
				1. beforeRequest always work first as compair to beforeAction 	



===========================================================================================================================================
#Internationalization 

	1. 	Setting up Folder 

		basic -> message -> folderName (like en,hi,pun etc) -> app.php (filename)

		note : filename should be same in all the folder 

		#Code
		
		// for english code 
		return [
			'Welcome'=>'Hello Killer'
			]; 

		// for Hindi code 
		return [
			'Welcome'=>'नमस्ते'
			]; 	

		// for Punjabi code 	
		return [
			'Welcome'=>'ਸਤ ਸ੍ਰੀ ਅਕਾਲ'
			];	

	2. Setting up Codes in Web.php

		basic -> config -> web.php

		copy paste this code in Components array 

			  'components' => [
						'i18n' => [
							'translations' => [
								'app*' => [
									'class' => 'yii\i18n\PhpMessageSource',
									'basePath' => '@app/messages',
									'sourceLanguage' => 'en-US',
									'fileMap' => [
										'app' => 'app.php',
										'app/error' => 'error.php',
									], 
								],
							],
						],
			  ]	

	3. Calling Fill in Controller 

		 public function actionIndex()
		{   
			\Yii::$app->language = 'pun';						// calling punjabi folder
			echo \Yii::t('app','Welcome');						// calling Welcome Message in punjabi langauge

			echo "<br/>";

			\Yii::$app->language = 'hi';						// calling hindi folder
			echo \Yii::t('app','Welcome');						// calling Welcome Message in hindi langauge


			echo "<br/>";

			\Yii::$app->language = 'en';						// calling english folder
			echo \Yii::t('app','Welcome');						// calling Welcome Message in english langauge

			exit; 
			
		}		  				
===========================================================================================================================================
#Pagination 

	1. Setting Up Codes 

		Models-> ModelName.php

		#code 
			$dataProvider = new ActiveDataProvider([
				'query' => $query,
				// 'pagination'=>													//this function is used to create pagination 
				// [
				//     'pageSize'=>2
				// ],
				'pagination'=>false, 
				'sort'=>[															//sorting accoring to title
					'attributes'=>['title'],
					'defaultOrder'=>['title'=>SORT_ASC],							// for setting default values 
				],
				'sort'=>false,														//incase to make sort false
				// 'pagination'=>true,												//incase to make pagination true 
			]);	

===========================================================================================================================================
#Grid View
	
	1. Change Column name 

		basic -> view folder -> index.php (any file which created by yii)

		#code exist 

			'columns' => [
				['class' => 'yii\grid\SerialColumn'],

				'id',
				'title',
				'body:ntext',
				'user_id',

				['class' => 'yii\grid\ActionColumn'],
			],


			we have to Change in these code 


			#'id' change with 

			[
				'attribute'=>'id',						//column name 
				'label'=>'Art Id',						//User Defined Name (enable Sorting of Asc or Desc option)
				'visible'=>false,						//visbility option 
				// 'header'=>'Article Id'				// user Defined name (disable sorting of Asc or Desc option)
			],


	2. make if else using column valuse and also add some data in Column values 
		
		1. First Method (directly in index File)

			[
				'attribute'=>'title',											//Column name 			
				'label'=>'Article Title',										//User Defined Name 	
				'contentOptions'=>['style'=>'background-color:red;font-size:20px'],	// add css
				'value'=>function($data,$key,$index){                           // anonymous function with default parameter           	
						$newData = $data->title.' ( this title) key : '.$key.' Index: '.$index;			// adding Data into column Data 	
						return $newData;	

				},
				 'filter'=>['1'=>'Deepinder Singh','2'=>'Simran'],		// make drop dwon list in filter to serach according to options
			

			],	

		2. Second Method (Calling Function from Controller to index)

			basic -> Model -> ArticleCrud

			#Code (Add below Codei in controller)

				public static function userIdData($data,$key,$index){
						$newData = $data->title.' ( this title) key : '.$key.' Index: '.$index;
						return $newData;    
				}


			basic -> View -> folderName -> index.php

			#'title' change with 
				
				[
					'attribute'=>'title',
					'label'=>'Article Title',
					'value'=>[ArticlesCrud->className(),'userIdData']

				],		

	3. Make Filter disable (which is showing above on tables)

		  basic -> View -> folderName -> index.php	

		  'filterModel' => $searchModel,				make this code comment 	

	4. Not Display Table Header and Search bar 	  		

		basic -> View -> folderName -> index.php

		'showHeader'=>false,

		add the above code in widget function array 

	5. Show Footer below thw table 
		
		basic -> View -> folderName -> index.php

		 'showFooter'=>true,

		 add the above code in widget function array 


		if incase you want to add value in the footer of particluar column then add below code in the column array  

		  'footer'=>100,

	6. Do Some Changes on the Action's Column 


		Add the below Code in the Widget function -> columns array 

		 [
			'class' => 'yii\grid\ActionColumn',						//enable or disable the Action column 
			'header' => 'action',									//Header name 
			'headerOptions'=>['width'=>'150'],						//Increase the width of the column 
			'template'=>'{delete} {view} {update}'					//Chanhe the appearnce of buttons 
		],

	7. Do some Changes on the Rows of the table 

		add the below code in the widget function array 
			
        'rowOptions'=>function($data,$key,$index){									//anonymous function with default parameter
            $class='bg-success';	
            $style='background-color:yellow;';
            
            return ['key'=>$key,'index'=>$index,'class'=>$class,'style'=>$style];	// return the values and refelect in the tr tags 	
        },	

	8. Layout of the Grid Page 

		add the below code in the widget function array 

		'layout'=>'{pager} {items} {summary}',	 			// it first show pagination , table , number of records 

	9. when Now record Found 

		add the below code in the widget function array 

		'showOnEmpty'=>false,								// it will disapper the table in case no table found 
        'emptyCell'=>'NA'	 								// it will set by default value when the column is empty

======================================================================================================================================
#list View 

	basic -> view -> index.php

	1. Make List View in index file(External file)

		a. Indxe.php File Code 

			#Code

			use yii\widgets\ListView; 

			Delete all code of the GridView From the file and add the Below code in Index.php file 

				<?php
				
					echo ListView::widget([
						'dataProvider'=>$dataProvider,							
						'itemView'=>'list_view',								// file name which is placed in the same folder
						'viewParams'=>[											// Adding parameter to send array 
							'testData'=>'Hello Test Data',						// sending key and value in External file				
						],
						//'options'=>['class'=>'well'],							// if we want to make class for whole container div 
							'itemOptions'=>['class'=>'well']					// if we want to make class for each dive 
					]);
				?>
		b. Make External file with in the View Folder 

			<?php
				use yii\helpers\Html;
			?>


				<div>
					<p><h3><?php echo $model->id;?></h3></p>					//name of the Column 
					<p><?php echo $model->title;?></p>							//name of the Column 
					<p><?php echo $model->body;?></p>							//name of the Column 
					<p><?php echo $model->user_id;?></p>						//name of the Column 
					<p><?= $testData?></p>										//Data sending from the parameter

				</div>
			<br/>
			<br/>	

	2. Make List View in index file(Local file)		

		<?php
		
			echo ListView::widget([
				'dataProvider'=>$dataProvider,
				'itemView'=>function($model,$item,$key,$wedgets)
				{
					?>
							<div>
								<p><?php echo $model->id;?></p>
								<p><?php echo $model->title;?></p>
								<p><?php echo $model->body;?></p>
								<p><?php echo $model->user_id;?></p>

							</div>
							<br/>
							<br/>
					<?php
				}
			]);
		?>	

	Note :
	1.  Local is use full when you want to make small code while External is usefull when you want to make very very large codes

	2.    <?php // echo $this->render('_search', ['model' => $searchModel]); ?>

			if you uncomment this line this will make a search on your view File

===========================================================================================================================================
#Detail View 

	When ever you create a CRUD using gii then you get 'View.php' file in the view folder 

	basic -> view -> FolderName (article) -> view.php

	#Add the code in the  widget function Array 

		DetailView::widget([
        'model' => $model,
        'attributes' => [
            'id',
            'title',
            'body:ntext',
            'user_id',
        ],
    ]


	Add below Code 

		 DetailView::widget([
        'model' => $model,
        'attributes' => [									
            [
                'attribute'=>'title',						// select column name 
                'label'=>'Article Title',					// replace column name with User Defined column name 
                'format'=>'html'							// showing Data in html from like <b>Hello</b> will in bold	
					or
				'format'=>'text'							// showing Data in text from like <b>Hello</b> will not in bold					
            ],
				'body:ntext',
				[
					'attribute'=>'user_id',					// select column name 
					'value'=>function($data){				// createing function for there data , $data contains the data value	
						if($data->user_id==1){
							$newData = "Deep";
						}else{
							$newData='Sim';
						}
						return $newData;					// returning the data
					},
					'contentOptions'=>['style'=>'background-color:red;']		// adding style sheet 

				],
			],
		])				

===========================================================================================================================================
#Form Validation Rule

	1. Code in controller 

		basic -> controller -> ControllerName

		#code

		use app\models\ModelName;

		public function actionCreate(){
			$model = new ModelName();
			$this->render('create',compact('model'));
		}
	
	
	2. For front end Validation (browser Side)

		basic -> Controller -> controllerfile.php (find the actionCreate function then check view file name) -> in create.php (find the file name of the view like _from)-> All code is written in ActiveForm

		Note :
				1.  Front end validation also Depend on the server Side Rules like if you mention required then it will show error on the front end as well if you did not metion required then front error will not occur 

				2. If you fill the filed then border color become green means success but if You mention required then border color become green with error message at the bottom of the filed

				3. Avoid Rquired on the front End

		here is you all html code of Forms

		use yii\helpers\Html;
		use yii\widgets\ActiveForm;			or 		use yii\bootstrap\ActiveForm;

		<?php $form = ActiveForm::begin(); ?>												// starting Form 

			<?= $form->field($model, 'title')->textInput(['maxlength' => true]) ?>			// making Fields 

			<?= $form->field($model, 'body')->textarea(['rows' => 6]) ?>					// making Fields 

			<?= $form->field($model, 'user_id')->textInput() ?>								// making Fields 

			<div class="form-group">
				<?= Html::submitButton('Save', ['class' => 'btn btn-success']) ?>			// Ending Form 
			</div>

		<?php ActiveForm::end(); ?>

	3. For back end Validation (Server Side)

		every rule is defined in the Model Side 

		public function rules()
		{
			return [
				[['body', 'user_id'], 'required'],													// make common validations				
				['body','compare','compareAttribute'=>'title','message'=>'Body text not matched'],  // making value compare of two fields
				['user_id','compare','compareValue'=>'1','operator'=>'>=','type'=>'Number'],		// making compair and check for value	
				[['body'], 'string'],
				['title','required','message'=>'User Name must be Submit'],							// making our own message
				['body','required','message'=>'Please type some thing in Body'],					// making our own message 
				[['user_id'], 'integer'],															
				[['title'], 'string', 'max' => 225,'min'=>10],										
			];
		}
		public function attributeLabels()
		{
			return [
				'id' => 'ID',											// Label name of the filed
				'title' => 'Title',										// Label name of the filed 
				'body' => 'Body',										// Label name of the filed 	
				'user_id' => 'User ID',									// Label name of the filed 
			];
		}	



	


===========================================================================================================================================
#Image Upload

	1. Create folder for uploading Images 

		basic -> web -> create folder (Uploads)

	2. Make html file input 

		basic -> view -> artcile -> _form.php

		#Code 

			 <?= $form->field($model, 'profile')->fileInput() ?>								// name is profile 

	3. 	Add rule in the Model File

		  public function rules()
			{
				return [
					['profile','file'],										// set rule of file 
				];
			}

			/**
			* {@inheritdoc}
			*/
			public function attributeLabels()
			{
				return [
					'profile'=>'Upload Image'								// set label Name 
				];	
			}
	4. 	Add Code in the Controller File 

		public function actionCreate()
		{
			$model = new Articles();
			
			if ($model->load(Yii::$app->request->post())) 
			{
				$model -> profile = UploadedFile::getInstance($model,'profile');				// get instance of the class 
				$filename = time().'.'.$model->profile ->extension;								// setting name and extention of the file
				$model->profile->saveAs('uploads/'.$filename);									// moving the file to the folder 
				$model->profile = $filename;													// sending the value to the variable 
				$model->save();																	// save the value in the database	
			}
		}

	Note : Web Folder is the public directory where we can set up CSS, JS, Upload , Theme Files	
===========================================================================================================================================
#Theme Set Up 

	1. Create folder for Setting up new theme 

		basic -> web -> themes -> folderName (new/old) -> Views -> Site (same as ControllerName) -> create File which you want to replace (about .php , contact.php)
		
		Create Code there 

			<h1>About New theme</h1>

	2. Setting code in the web.php

		basic -> config -> web 

		#add below code in the config -> component array
		  
		  'view'=>[
            'theme'=>[
                'basePath'=>'@webroot/themes/new',							//root path 
                'baseUrl'=>'@web/themes/new',								//root path 
                'pathMap'=>[
                    '@app/views'=>[											//setting up two options 		
                        '@webroot/themes/news/views',						//setting up first template				
                        '@webroot/themes/old/views', 						//setting up Second template				
                    ]															
                ]
            ]
         ],			

	Note : in options , if first did not works then second theme will works , if second not work then default theme will works 			 
=============================================================================================================================================
#Advanced Application Template setup (front End back end)

	1. For Downlaod 

		php composer.phar create-project yiisoft/yii2-app-advanced advanced

	2. Run 'php init' command -> select Development option by pressing 0 -> type yes -> then automtically files will generate 

	3. For Help 

		Command -> Php yii 

		command -> php yii serve --docroot="frontend/web/" 				// to run front End Code

		Command -> php yii serve --docroot="backend/web/"				// to run Back end Code

	4. Directory Structure 

		Front end -> For front end data

		Back end  -> For back end Data

		Comman	  -> works in front and back end 

=============================================================================================================================================
#Cron Set 

	1.Directoty Structure 

		Advanced -> Console -> 	Controllers -> controllerfile (TestController.php)

		#code 

		namespace console\controllers;
		use yii\console\Controller;

		Class TestController extends Controller{
			
			public function actionIndex(){
				echo "Cron complete";
			}
			public function actionEmail($email,$subject){
				echo "Hello $email, This mail regarding $subject";
			}
		}

	2. Run Commands 

		1. for testing that every thing is perfect -> php yii 
			(if you get the all commands means every code is perfect or if you get any kind of error then means you have error in your file)

		2. Run Controller using command 

			php yii test/index 												-> to run index Controller 

			php yii test/email 'Deepinder999@gmail.com' 'Learning Yii'		-> to run email Controller



	Note : when you run  php yii Command then you will get all the list of various controller which you have created in cron as well of userDefined Commands 		

=============================================================================================================================================
#Create Custom Command

	we can use these things which we perfom daily like delete log files, trucate databases (just write the code in the function body and execute that function using Command)

	1. Directory Structure 

		basic -> commands -> ControllerName (DemoController.php)

		#code 

			namespace app\commands;

			use yii\console\Controller;
			use yii\console\ExitCode;

			class DemoController extends Controller
			{
				public function actionIndex($message = 'Demo command')
				{
					echo $message . "\n";

					return ExitCode::OK;
				}
				public function actionTest()
				{
					echo "testing the codes";

					return ExitCode::OK;
				}
			}	

	2. Run Command

		php yii demo/index

=============================================================================================================================================
#Queue Job 
	
	Mostly use for the Api in chunks 


=============================================================================================================================================
#Ajax Crud Gii Module

	1. Command 			:: composer.phar require --prefer-dist johnitvn/yii2-ajaxcrud "~2.1"

	2. Add Code in the web.php in config array

		basic -> config-> web.php

		'modules' => [
		    'gridview' =>  [
		        'class' => '\kartik\grid\Module'
		    ]       
		]	

	3. Now go to gii -> there Ajax CRUD Generator Option will show

		Note : Your Model should create before gii crud

		1. Model Class 				:: app\models\Employees
		2. Search Model Class 		:: app\models\EmployeesAjax
		3. Controller class 		:: app\controllers\AjaxController
		4. View Path 				:: @app/views/ajax

		Click on generate 

	4. Hit the address 
		
		http://localhost/yii/basic/web/index.php?r=ajax 	

=============================================================================================================================================
#Array Data Provider and pagination 
	
	Same Like Pagination which i have done in bigcola api 

=============================================================================================================================================
#UrlManager & UrlManagerFrontend 	

	same as like routing system 

=============================================================================================================================================
#Relation hasOne() & hasMany()
	
	these are basically used for the primary key and forigen key and it is basically used for the data represantation for the html data	


=============================================================================================================================================
#Access Control
	
	#Directory Structure 
		
	basic -> controller -> ControllerName

	in behaviors function add below line into return array 

		use yii\filters\AccessControl;

			'access'=>[
					'class'=>AccessControl::classname(),
					'only'=>['create','update'],				// on particular functions 
					'rules'=>[
								'allows'=>true,
								'roles'=>['@']					// means authenticate users only 
						]	
			] 








=============================================================================================================================================

#CRUD Application  

=============================================================================================================================================

1. When ever create Page is create for any kind of insertion then we need to create Object and pass to the View Page to create Form. 

2. Html::a('text','link',options(array)); and also load Helper Class 

3. To create Form we use Active Form Class;

4. When creating a DB command from a SQL with parameters, you should almost always use the approach of binding parameters to prevent SQL injection attacks. in select Cases
	
	$post = Yii::$app->db->createCommand('SELECT * FROM post WHERE id=:id AND status=:status')
           ->bindValue(':id', $_GET['id'])
           ->bindValue(':status', 1)
           ->queryOne()
5. To Print all errors
	1. $errores = $modesl->getErrors();
                print_r($errores);    

    2. $error=$models->error
    	print_r($error);

 6. Where we have to use redirect 
 	1. when we are inserting new data then always use redirect function otherwise data will be remain in the fields

 =============================================================================================================================================

#Advanced Yii2

=============================================================================================================================================
#documentation and Installation
	
	1. link 			:: https://github.com/yiisoft/yii2-app-advanced/blob/master/docs/guide/start-installation.md

	2. Paste this Cdoe in the 

		Directory Structure 

			C:\xampp\apache\conf\extra\httpd-vhosts.conf          

		Paste the Below Code
			
	    <VirtualHost *:80>
		        ServerName freecodetube.test 													//set the server Name
		        DocumentRoot "C:\xampp\htdocs\yii_advance\advanced\frontend\web"
		        
		        <Directory "C:\xampp\htdocs\yii_advance\advanced\frontend\web">
		            # use mod_rewrite for pretty URL support
		            RewriteEngine on
		            # If a directory or a file exists, use the request directly
		            RewriteCond %{REQUEST_FILENAME} !-f
		            RewriteCond %{REQUEST_FILENAME} !-d
		            # Otherwise forward the request to index.php
		            RewriteRule . index.php

		            # use index.php as index file
		            DirectoryIndex index.php

		            # ...other settings...
		            # Apache 2.4
		            Require all granted
		            
		            ## Apache 2.2
		            # Order allow,deny
		            # Allow from all
		        </Directory>
		    </VirtualHost>
		    
		    <VirtualHost *:80>
		        ServerName studio.freecodetube.test 											//set the server Name
		        DocumentRoot "C:\xampp\htdocs\yii_advance\advanced\backend\web"
		        
		        <Directory "C:\xampp\htdocs\yii_advance\advanced\backend\web">
		            # use mod_rewrite for pretty URL support
		            RewriteEngine on
		            # If a directory or a file exists, use the request directly
		            RewriteCond %{REQUEST_FILENAME} !-f
		            RewriteCond %{REQUEST_FILENAME} !-d
		            # Otherwise forward the request to index.php
		            RewriteRule . index.php

		            # use index.php as index file
		            DirectoryIndex index.php

		            # ...other settings...
		            # Apache 2.4
		            Require all granted
		            
		            ## Apache 2.2
		            # Order allow,deny
		            # Allow from all
		        </Directory>
		    </VirtualHost>

	2. set the Host Name 
		
		c -> windows -> system32 -> drivers -> etc -> hosts (File name and open this file in visual Studio) -> Paste the Below Code

		#code 

		127.0.0.1	freecodetube.test
		127.0.0.1	studio.freecodetube.test

	3. Hit the address 
		
		localhost or freecodetube.test  				// for front end	  



=======================================================================================================================================================
#Set up Database and Setup Account for Login 
	
	1. Directory 
		advance -> common -> main-local.php

		Enter username, password and database name 

	2. Open Command Prompt and run the command 

		1. php init    -> enter 0 -> enter yes 
		2. yii migrate -> enter yes 

			in database 'user' and 'migration' table will created

	3. Click on the Sign Up Page 
		
		Fill all the Details -> it will show you check the mail for verification 

	4. To check The mail 
		
		advance -> frontend -> runtime -> mail -> 96r32e938123098.eml (kind of the file) -> open that file 


		= 		: means new line
		=3d		: means equal to 

		so remove 3d word from the link and then copy that link , paste in the browser and hit enter > you email will verified

	5. Sign in
		
		click on the Logout if you are login -> enter backend server name -> enter username and Password 

	6. Make Pretty Url 
		
		advance -> front end -> config.php -> main.php -> uncomment the pretty variable	 	
		advance -> back  end -> config.php -> main.php -> uncomment the pretty variable

	7. Index.php File 

		advance -> backend 	-> web -> index.php
		advance -> frontend	-> web -> index.php	 
 
=====================================================================================================================================================
#Set Bootstrap 
	
	1. Remove Old Bootstrap 				::composer remove yiisoft/yii2-bootstrap

	2. Add Bootstrap 						::composer require yiisoft/yii2-bootstrap4	 			

	after that Change every where bootstrap4 where you get the bootstrap

=====================================================================================================================================================
#Web.php

	we can access every parmeter of this file by using 

		echo Yii::$app->arrayName;

	arrayname Like component, language, id etc what ever we written in the web.php array	
		
======================================================================================================================================================
#links 
	
	echo \yii\helpers\Url::to(['/site/logout']);			// use to print the array


======================================================================================================================================================
#Render Function 
	
	When ever we call any view file the yii first call the layout page then in the Content variable it add the view file to show the output.

	 <?= $content ?>		// (layout -> main.php file contains this variable)

	Note 
		1. Item 		:: 	array 
		2. Option 		:: 	attributes add in html 

======================================================================================================================================================
#Migrate Function 

	1. Create Table Migrate 

		php yii migrate/create create_video_table 
		--fields="video_id:string(16):notNull,title:string(512):notNull,description:text(),created_by:integer(11):foreignKey(user)"	

			the above command will add all the things into to migration file, and even we can add more columns or extra things by adding the above command

		#then hit enter

		#then advance -> console -> migrations -> m210724_071802_create_video_table.php (create by Above Console Command)

		#then add these lines in the safeUp function 

		$this->createTable('{{%video}}', [
            'video_id' => $this->string(16)->notNull(),
            'title' => $this->string(512)->notNull(),
            'description' => $this->text(),					or 'LONGTEXT' or 'MEDIUMTEXT'
            'tags'=>$this->string(512),
            'status'=>$this->integer(1),
            'has_thumbnail'=>$this->boolean(),
            'video_name'=>$this->string(512),
            'created_at'=>$this->integer(11),
            'updated_at'=>$this->integer(11),
            'created_by' => $this->integer(11),
        ]);

        $this->addPrimaryKey('Pk_video_video_id','{{%video}}','video_id'); 	


        #then -> open Console 

        	yii migrate -> yes -> hit Enter

        Table Created Successfully 

   2. To Drop the table 

   		php yii migrate/down -> yes -> hit Enter

   	Note : always create Table Name Singler like teacher , student , video etc 

	   	 1. safeUp								:: every thing related to create things 
		 2. safeDown 							:: every thing realted to drop things (and also write in the reverse order of safeUp funtion)	
		 3. bydefault it use migrate/up method 	:: to create the tables etc 
		 4. when we run migrate a migration table will create and it store all the migrate in it 
		 5. if you execute migration command after modification on a particular table then first you have to drop table using migrate/down command and also delete from the migration table
		 6. php yii migrate/down 4 				:: it will drop the last four migrates 
		 7. php yii migrate/down all 			:: it will drop all the migrate 

		 8. php yii migrate/create --migrationPath=@app/migrations/db 		:: create sub folder db under migrations folder 

=======================================================================================================================================================
#AssetManager Cache 
 		
	It will hardrefersh all the css and js when ever we done Some Changes in the CSS and JS files automatiaclly remove the cache 

	1. Directory Structur  

		advance -> config -> main.php

		Add the below Code in the Add Componet array 

		 	'assetManager'=>[
		            'appendTimestamp'=>true
		        ]


		Output will be Like 

			<link href="/assets/dd3953a5/css/bootstrap.css?v=1626971707" rel="stylesheet">
			<link href="/css/site.css?v=1627117276" rel="stylesheet">        



		

	 


















	





			   	





