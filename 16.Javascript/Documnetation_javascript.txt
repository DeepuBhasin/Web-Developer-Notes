Client Side script always Stroe first in the computer then it run 

Why we learn Javascript ?
	1. Javascript is a event based Programming Language {click, double click, mouse hover, mouse out, drag drop etc}

==============================
Benifit of Javscaript

Web development 
1.jquery 
2. Angular js
3. React js
4. Vue js
5. Node js	

Desktop App Devlopment 
Electron Js


Mobile App Development 
1. Angular Js
2. React Js
3. Vueb JS
4. React Native 
5. Node js	 	
==================================================================================================================================================================
1. Internal Javascript 
	<script>	

	</script>

	a. near Head 
	b. any where in the body {best is before the body tag close}

	Always use second option beacuse it wil speed up your web page


2. External Javascript 	
	<script src="path"></script>

==================================================================================================================================================================	
write in html 
	document.write('Deepinder Singh');

Type of variable 
	1. var 
	2. Let 
	3. Const	: value cannot be change

	In 'var' we can redeclare variable again and we will not get any kind of error but In 'Let' we cannot redecaler the variable 	

===============================================================================================================================================================
Differernt Data type 
	1. String 					var x ="Hello World"
	2. Number 					var x = 25
	3. Boolen 					var x = true
	4. Array					var x = ['html','css','js']
	5. Object 					var x = {first:'Deepinder',last:'Singh'}
	6. Null 					var x = null
	7. undefined 				var x 

1. you can check the data type by : typeof 
2. in javascript array and object both are concidered as object 
=============================================================================================================================================================
Console Window in Chrome 

	1. cosnole.log('Print Any thing');
	2. console.table([1,2,3]);					// print in tabular form
	3. console.error('Print Error');
	4. conosle.warn('Print warning');
	5. console.clear();							// to clear all the screen
	6. cosole.timeEnd();						// tell the execution time
=============================================================================================================================================================
1. .innerHtml 		// give text + html tags
2. .innerText		// give text only

=============================================================================================================================================================
various Events in javascript 

	1. click 				: onclick
	2. double Click 		: ondbclick
	3. Right Click 			: oncontextmenu
	4. Mouse Hover 			: onmouseenter
	5. Mouse out 			: onmouseout
	6. Mouse Down			: onmousedown
	7. mouseup				: onmouseup
	8. keypress				: onkeypress
	9. keyup				: onkeyup
	10. load				: onload
	11. unload				: onunload
	12. resize				: onresize
	13. scroll				: onscroll
===========================================================================================================================================================	
creating arrays 
	1. var a = []
	2. var a = new array();


	Array funtions 
		1. sort()
		2. reverse()
		3. pop()					delete from last
		4. push()					add in last
		5. shift()					delete from first
		6. unshift()				add in first
		7. concat()					merge 2 or more arrays
		8. join()					marge 2 or more arrays
		9. Slice()					means delete particular value from array (like slice from pizza)
		10. splice()				means add value any where in the array (means any index)
		11. isArray()				to check the value in the array
		12. indexof()				get the index of particular value from the stating of array {if the value is not match then we get -1}		 
		13. lastIndexOf()			get the index of particular value from the last of arrat {if the value is not match then we get -1}
		14. includes()				search any kind of value from array 
		15. some()					check the particular value or greater than that value 



============================================================================================================================================================
Proper Notes
	
Why is it called JavaScript?
When JavaScript was created, it initially had another name: “LiveScript”. But Java was very popular at that time, so it was decided that positioning a new language as a “younger brother” of Java would help.

But as it evolved, JavaScript became a fully independent language with its own specification called ECMAScript, and now it has no relation to Java at all.

1. Today, JavaScript can execute not only in the browser, but also on the server, or actually on any device that has a special program called the JavaScript engine.
2. The browser has an embedded engine sometimes called a “JavaScript virtual machine”.		
		a. V8 – in Chrome and Opera.
		b. SpiderMonkey – in Firefox.
		c. There are other codenames like “Chakra” for IE, “ChakraCore” for Microsoft Edge, “Nitro” and “SquirrelFish” for Safari, etc.

#In-browser JavaScript can do everything related to webpage manipulation, interaction with the user, and the webserver.For instance, in-browser JavaScript is able to:

1. Add new HTML to the page, change the existing content, modify styles.
2. React to user actions, run on mouse clicks, pointer movements, key presses.
3. Send requests over the network to remote servers, download and upload files (so-called AJAX and COMET technologies).
4. Get and set cookies, ask questions to the visitor, show messages.
5. Remember the data on the client-side (“local storage”).		

===============================================================================================================================================================
Best description about the Editior
https://javascript.info/code-editors


tips 
1. The benefit of a separate file is that the browser will download it and store it in its cache.

2. A single <script> tag can’t have both the src attribute and code inside.
	<script src="file.js">
	  alert(1); // the content is ignored, because src is set
	</script>

We can use a <script> tag to add JavaScript code to a page.
The type and language attributes are not required.
A script in an external file can be inserted with <script src="path/to/script.js"></script>.


==================================================================================================================================================================
1. A semicolon may be omitted in most cases when a line break exists.

This would also work:

alert('Hello')
alert('World')
Here, JavaScript interprets the line break as an “implicit” semicolon. This is called an automatic semicolon insertion.	

==================================================================================================================================================================
1. use strict

	a. This was the case until 2009 when ECMAScript 5 (ES5) appeared. It added new features to the language and modified some of the existing ones. To keep the old code working, most such modifications are off by default. You need to explicitly enable them with a special directive: "use strict".

	b. Please make sure that "use strict" is at the top of your scripts, otherwise strict mode may not be enabled.

===============================================================================================================================================================
var and let 
	
1. The main difference between let and var is that scope of a variable defined with let is limited to the block in which it is declared while variable declared with var has the global scope. So we can say that var is rather a keyword which defines a variable globally regardless of block scope.

	The scope of let not only limited to the block in which it is defined but variable with let also do not get added with global window object even if it get declared outside of any block. But we can access variable with var from window object if it is defined globally.

	Due to limited scope let variables are usually used when there is limited use of those variables such as in for loops, while loops or inside the scope of if conditions etc while var variable is used when value of variable need to be less change and used to accessed globally.

2. Also, one difference between var and let is variable with var can be redeclared to some other value while variable could not be redeclared if it is defined with let.	

=========================================================================================================================================================
constant 

1. To declare a constant (unchanging) variable, use const instead of let:
		const myBirthday = '18.04.1982';

2. There is a widespread practice to use constants as aliases for difficult-to-remember values that are known prior to execution.

	Such constants are named using capital letters and underscores.

===========================================================================================================================================================
Data type 
	1. Number 
		a. Besides regular numbers, there are so-called “special numeric values” which also belong to this data type: Infinity, -Infinity and NaN.	
			alert( 1 / 0 ); // Infinity
			alert( Infinity ); // Infinity
			alert( "not a number" / 2 ); // NaN, such division is erroneous


=================================================================================================================================================================
The “null” value

	1. The special null value does not belong to any of the types described above.
	2. It forms a separate type of its own which contains only the null value:				
	3. It’s just a special value which represents “nothing”, “empty” or “value unknown”.


============================================================================================================================================================
The “undefined” value
	
	1. The special value undefined also stands apart. It makes a type of its own, just like null.
	2. The meaning of undefined is “value is not assigned”.
	3. If a variable is declared, but not assigned, then its value is undefined:		

================================================================================================================================================================
Objects and Symbols
The object type is special.

All other types are called “primitive” because their values can contain only a single thing (be it a string or a number or whatever). In contrast, objects are used to store collections of data and more complex entities.

Being that important, objects deserve a special treatment. We’ll deal with them later in the chapter Objects,	


===============================================================================================================================================================
The typeof operator

	The typeof operator returns the type of the argument. It’s useful when we want to process values of different types differently or just want to do a quick check.

	It supports two forms of syntax:

		As an operator: typeof x.
		As a function: typeof(x).


		typeof 10n // "bigint"

		typeof true // "boolean"

		typeof "foo" // "string"

		typeof Symbol("id") // "symbol"

		typeof Math // "object"  (1)

		typeof null // "object"  (2)

		typeof alert // "function"  (3)


		Summary
			There are 8 basic data types in JavaScript.

			1. number for numbers of any kind: integer or floating-point, integers are limited by ±(253-1).
			2. bigint is for integer numbers of arbitrary length.
			3. string for strings. A string may have zero or more characters, there’s no separate single-character type.
			4. boolean for true/false.
			5. null for unknown values – a standalone type that has a single value null.
			6. undefined for unassigned values – a standalone type that has a single value undefined.
			7. object for more complex data structures.
			8. symbol for unique identifiers.
			

			The typeof operator allows us to see which type is stored in a variable.

			Two forms: typeof x or typeof(x).
			Returns a string with the name of the type, like "string".
			For null returns "object" – this is an error in the language, it’s not actually an object.


program 
		let name = "Ilya";

		// the expression is a number 1
		alert( `hello ${1}` ); // hello 1

		// the expression is a string "name"
		alert( `hello ${"name"}` ); // hello name

		// the expression is a variable, embed it
		alert( `hello ${name}` ); // hello Ilya			